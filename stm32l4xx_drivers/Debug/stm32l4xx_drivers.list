
stm32l4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001554  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080016d8  080016d8  000026d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016e4  080016e4  00003020  2**0
                  CONTENTS
  4 .ARM          00000000  080016e4  080016e4  00003020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016e4  080016e4  00003020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016e4  080016e4  000026e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080016e8  080016e8  000026e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  080016ec  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00003020  2**0
                  CONTENTS
 10 .bss          0000011c  20000020  20000020  00003020  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000013c  2000013c  00003020  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003020  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000175f  00000000  00000000  0000304a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000490  00000000  00000000  000047a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  00004c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000113  00000000  00000000  00004db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002832  00000000  00000000  00004ecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001e99  00000000  00000000  000076fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000097f8  00000000  00000000  00009596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00012d8e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005f8  00000000  00000000  00012dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  000133cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000020 	.word	0x20000020
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080016c0 	.word	0x080016c0

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000024 	.word	0x20000024
 80001c0:	080016c0 	.word	0x080016c0

080001c4 <__aeabi_frsub>:
 80001c4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80001c8:	e002      	b.n	80001d0 <__addsf3>
 80001ca:	bf00      	nop

080001cc <__aeabi_fsub>:
 80001cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080001d0 <__addsf3>:
 80001d0:	0042      	lsls	r2, r0, #1
 80001d2:	bf1f      	itttt	ne
 80001d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001d8:	ea92 0f03 	teqne	r2, r3
 80001dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001e4:	d06a      	beq.n	80002bc <__addsf3+0xec>
 80001e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001ee:	bfc1      	itttt	gt
 80001f0:	18d2      	addgt	r2, r2, r3
 80001f2:	4041      	eorgt	r1, r0
 80001f4:	4048      	eorgt	r0, r1
 80001f6:	4041      	eorgt	r1, r0
 80001f8:	bfb8      	it	lt
 80001fa:	425b      	neglt	r3, r3
 80001fc:	2b19      	cmp	r3, #25
 80001fe:	bf88      	it	hi
 8000200:	4770      	bxhi	lr
 8000202:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000206:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800020a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800020e:	bf18      	it	ne
 8000210:	4240      	negne	r0, r0
 8000212:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000216:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800021a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800021e:	bf18      	it	ne
 8000220:	4249      	negne	r1, r1
 8000222:	ea92 0f03 	teq	r2, r3
 8000226:	d03f      	beq.n	80002a8 <__addsf3+0xd8>
 8000228:	f1a2 0201 	sub.w	r2, r2, #1
 800022c:	fa41 fc03 	asr.w	ip, r1, r3
 8000230:	eb10 000c 	adds.w	r0, r0, ip
 8000234:	f1c3 0320 	rsb	r3, r3, #32
 8000238:	fa01 f103 	lsl.w	r1, r1, r3
 800023c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000240:	d502      	bpl.n	8000248 <__addsf3+0x78>
 8000242:	4249      	negs	r1, r1
 8000244:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000248:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800024c:	d313      	bcc.n	8000276 <__addsf3+0xa6>
 800024e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000252:	d306      	bcc.n	8000262 <__addsf3+0x92>
 8000254:	0840      	lsrs	r0, r0, #1
 8000256:	ea4f 0131 	mov.w	r1, r1, rrx
 800025a:	f102 0201 	add.w	r2, r2, #1
 800025e:	2afe      	cmp	r2, #254	@ 0xfe
 8000260:	d251      	bcs.n	8000306 <__addsf3+0x136>
 8000262:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000266:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800026a:	bf08      	it	eq
 800026c:	f020 0001 	biceq.w	r0, r0, #1
 8000270:	ea40 0003 	orr.w	r0, r0, r3
 8000274:	4770      	bx	lr
 8000276:	0049      	lsls	r1, r1, #1
 8000278:	eb40 0000 	adc.w	r0, r0, r0
 800027c:	3a01      	subs	r2, #1
 800027e:	bf28      	it	cs
 8000280:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000284:	d2ed      	bcs.n	8000262 <__addsf3+0x92>
 8000286:	fab0 fc80 	clz	ip, r0
 800028a:	f1ac 0c08 	sub.w	ip, ip, #8
 800028e:	ebb2 020c 	subs.w	r2, r2, ip
 8000292:	fa00 f00c 	lsl.w	r0, r0, ip
 8000296:	bfaa      	itet	ge
 8000298:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800029c:	4252      	neglt	r2, r2
 800029e:	4318      	orrge	r0, r3
 80002a0:	bfbc      	itt	lt
 80002a2:	40d0      	lsrlt	r0, r2
 80002a4:	4318      	orrlt	r0, r3
 80002a6:	4770      	bx	lr
 80002a8:	f092 0f00 	teq	r2, #0
 80002ac:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80002b0:	bf06      	itte	eq
 80002b2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80002b6:	3201      	addeq	r2, #1
 80002b8:	3b01      	subne	r3, #1
 80002ba:	e7b5      	b.n	8000228 <__addsf3+0x58>
 80002bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002c4:	bf18      	it	ne
 80002c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002ca:	d021      	beq.n	8000310 <__addsf3+0x140>
 80002cc:	ea92 0f03 	teq	r2, r3
 80002d0:	d004      	beq.n	80002dc <__addsf3+0x10c>
 80002d2:	f092 0f00 	teq	r2, #0
 80002d6:	bf08      	it	eq
 80002d8:	4608      	moveq	r0, r1
 80002da:	4770      	bx	lr
 80002dc:	ea90 0f01 	teq	r0, r1
 80002e0:	bf1c      	itt	ne
 80002e2:	2000      	movne	r0, #0
 80002e4:	4770      	bxne	lr
 80002e6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80002ea:	d104      	bne.n	80002f6 <__addsf3+0x126>
 80002ec:	0040      	lsls	r0, r0, #1
 80002ee:	bf28      	it	cs
 80002f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002f4:	4770      	bx	lr
 80002f6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002fa:	bf3c      	itt	cc
 80002fc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000300:	4770      	bxcc	lr
 8000302:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000306:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800030a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800030e:	4770      	bx	lr
 8000310:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000314:	bf16      	itet	ne
 8000316:	4608      	movne	r0, r1
 8000318:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800031c:	4601      	movne	r1, r0
 800031e:	0242      	lsls	r2, r0, #9
 8000320:	bf06      	itte	eq
 8000322:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000326:	ea90 0f01 	teqeq	r0, r1
 800032a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800032e:	4770      	bx	lr

08000330 <__aeabi_ui2f>:
 8000330:	f04f 0300 	mov.w	r3, #0
 8000334:	e004      	b.n	8000340 <__aeabi_i2f+0x8>
 8000336:	bf00      	nop

08000338 <__aeabi_i2f>:
 8000338:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800033c:	bf48      	it	mi
 800033e:	4240      	negmi	r0, r0
 8000340:	ea5f 0c00 	movs.w	ip, r0
 8000344:	bf08      	it	eq
 8000346:	4770      	bxeq	lr
 8000348:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800034c:	4601      	mov	r1, r0
 800034e:	f04f 0000 	mov.w	r0, #0
 8000352:	e01c      	b.n	800038e <__aeabi_l2f+0x2a>

08000354 <__aeabi_ul2f>:
 8000354:	ea50 0201 	orrs.w	r2, r0, r1
 8000358:	bf08      	it	eq
 800035a:	4770      	bxeq	lr
 800035c:	f04f 0300 	mov.w	r3, #0
 8000360:	e00a      	b.n	8000378 <__aeabi_l2f+0x14>
 8000362:	bf00      	nop

08000364 <__aeabi_l2f>:
 8000364:	ea50 0201 	orrs.w	r2, r0, r1
 8000368:	bf08      	it	eq
 800036a:	4770      	bxeq	lr
 800036c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000370:	d502      	bpl.n	8000378 <__aeabi_l2f+0x14>
 8000372:	4240      	negs	r0, r0
 8000374:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000378:	ea5f 0c01 	movs.w	ip, r1
 800037c:	bf02      	ittt	eq
 800037e:	4684      	moveq	ip, r0
 8000380:	4601      	moveq	r1, r0
 8000382:	2000      	moveq	r0, #0
 8000384:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000388:	bf08      	it	eq
 800038a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800038e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000392:	fabc f28c 	clz	r2, ip
 8000396:	3a08      	subs	r2, #8
 8000398:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800039c:	db10      	blt.n	80003c0 <__aeabi_l2f+0x5c>
 800039e:	fa01 fc02 	lsl.w	ip, r1, r2
 80003a2:	4463      	add	r3, ip
 80003a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80003a8:	f1c2 0220 	rsb	r2, r2, #32
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003b0:	fa20 f202 	lsr.w	r2, r0, r2
 80003b4:	eb43 0002 	adc.w	r0, r3, r2
 80003b8:	bf08      	it	eq
 80003ba:	f020 0001 	biceq.w	r0, r0, #1
 80003be:	4770      	bx	lr
 80003c0:	f102 0220 	add.w	r2, r2, #32
 80003c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80003c8:	f1c2 0220 	rsb	r2, r2, #32
 80003cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003d0:	fa21 f202 	lsr.w	r2, r1, r2
 80003d4:	eb43 0002 	adc.w	r0, r3, r2
 80003d8:	bf08      	it	eq
 80003da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003de:	4770      	bx	lr

080003e0 <__aeabi_fmul>:
 80003e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80003e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003e8:	bf1e      	ittt	ne
 80003ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003ee:	ea92 0f0c 	teqne	r2, ip
 80003f2:	ea93 0f0c 	teqne	r3, ip
 80003f6:	d06f      	beq.n	80004d8 <__aeabi_fmul+0xf8>
 80003f8:	441a      	add	r2, r3
 80003fa:	ea80 0c01 	eor.w	ip, r0, r1
 80003fe:	0240      	lsls	r0, r0, #9
 8000400:	bf18      	it	ne
 8000402:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000406:	d01e      	beq.n	8000446 <__aeabi_fmul+0x66>
 8000408:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800040c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000410:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000414:	fba0 3101 	umull	r3, r1, r0, r1
 8000418:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800041c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000420:	bf3e      	ittt	cc
 8000422:	0049      	lslcc	r1, r1, #1
 8000424:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000428:	005b      	lslcc	r3, r3, #1
 800042a:	ea40 0001 	orr.w	r0, r0, r1
 800042e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000432:	2afd      	cmp	r2, #253	@ 0xfd
 8000434:	d81d      	bhi.n	8000472 <__aeabi_fmul+0x92>
 8000436:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800043a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800043e:	bf08      	it	eq
 8000440:	f020 0001 	biceq.w	r0, r0, #1
 8000444:	4770      	bx	lr
 8000446:	f090 0f00 	teq	r0, #0
 800044a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800044e:	bf08      	it	eq
 8000450:	0249      	lsleq	r1, r1, #9
 8000452:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000456:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800045a:	3a7f      	subs	r2, #127	@ 0x7f
 800045c:	bfc2      	ittt	gt
 800045e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000462:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000466:	4770      	bxgt	lr
 8000468:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800046c:	f04f 0300 	mov.w	r3, #0
 8000470:	3a01      	subs	r2, #1
 8000472:	dc5d      	bgt.n	8000530 <__aeabi_fmul+0x150>
 8000474:	f112 0f19 	cmn.w	r2, #25
 8000478:	bfdc      	itt	le
 800047a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800047e:	4770      	bxle	lr
 8000480:	f1c2 0200 	rsb	r2, r2, #0
 8000484:	0041      	lsls	r1, r0, #1
 8000486:	fa21 f102 	lsr.w	r1, r1, r2
 800048a:	f1c2 0220 	rsb	r2, r2, #32
 800048e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000492:	ea5f 0031 	movs.w	r0, r1, rrx
 8000496:	f140 0000 	adc.w	r0, r0, #0
 800049a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800049e:	bf08      	it	eq
 80004a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004a4:	4770      	bx	lr
 80004a6:	f092 0f00 	teq	r2, #0
 80004aa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80004ae:	bf02      	ittt	eq
 80004b0:	0040      	lsleq	r0, r0, #1
 80004b2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80004b6:	3a01      	subeq	r2, #1
 80004b8:	d0f9      	beq.n	80004ae <__aeabi_fmul+0xce>
 80004ba:	ea40 000c 	orr.w	r0, r0, ip
 80004be:	f093 0f00 	teq	r3, #0
 80004c2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80004c6:	bf02      	ittt	eq
 80004c8:	0049      	lsleq	r1, r1, #1
 80004ca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80004ce:	3b01      	subeq	r3, #1
 80004d0:	d0f9      	beq.n	80004c6 <__aeabi_fmul+0xe6>
 80004d2:	ea41 010c 	orr.w	r1, r1, ip
 80004d6:	e78f      	b.n	80003f8 <__aeabi_fmul+0x18>
 80004d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004dc:	ea92 0f0c 	teq	r2, ip
 80004e0:	bf18      	it	ne
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d00a      	beq.n	80004fe <__aeabi_fmul+0x11e>
 80004e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80004ec:	bf18      	it	ne
 80004ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80004f2:	d1d8      	bne.n	80004a6 <__aeabi_fmul+0xc6>
 80004f4:	ea80 0001 	eor.w	r0, r0, r1
 80004f8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004fc:	4770      	bx	lr
 80004fe:	f090 0f00 	teq	r0, #0
 8000502:	bf17      	itett	ne
 8000504:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000508:	4608      	moveq	r0, r1
 800050a:	f091 0f00 	teqne	r1, #0
 800050e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000512:	d014      	beq.n	800053e <__aeabi_fmul+0x15e>
 8000514:	ea92 0f0c 	teq	r2, ip
 8000518:	d101      	bne.n	800051e <__aeabi_fmul+0x13e>
 800051a:	0242      	lsls	r2, r0, #9
 800051c:	d10f      	bne.n	800053e <__aeabi_fmul+0x15e>
 800051e:	ea93 0f0c 	teq	r3, ip
 8000522:	d103      	bne.n	800052c <__aeabi_fmul+0x14c>
 8000524:	024b      	lsls	r3, r1, #9
 8000526:	bf18      	it	ne
 8000528:	4608      	movne	r0, r1
 800052a:	d108      	bne.n	800053e <__aeabi_fmul+0x15e>
 800052c:	ea80 0001 	eor.w	r0, r0, r1
 8000530:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000534:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000538:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800053c:	4770      	bx	lr
 800053e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000542:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000546:	4770      	bx	lr

08000548 <__aeabi_fdiv>:
 8000548:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000550:	bf1e      	ittt	ne
 8000552:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000556:	ea92 0f0c 	teqne	r2, ip
 800055a:	ea93 0f0c 	teqne	r3, ip
 800055e:	d069      	beq.n	8000634 <__aeabi_fdiv+0xec>
 8000560:	eba2 0203 	sub.w	r2, r2, r3
 8000564:	ea80 0c01 	eor.w	ip, r0, r1
 8000568:	0249      	lsls	r1, r1, #9
 800056a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800056e:	d037      	beq.n	80005e0 <__aeabi_fdiv+0x98>
 8000570:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000574:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000578:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800057c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000580:	428b      	cmp	r3, r1
 8000582:	bf38      	it	cc
 8000584:	005b      	lslcc	r3, r3, #1
 8000586:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800058a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800058e:	428b      	cmp	r3, r1
 8000590:	bf24      	itt	cs
 8000592:	1a5b      	subcs	r3, r3, r1
 8000594:	ea40 000c 	orrcs.w	r0, r0, ip
 8000598:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800059c:	bf24      	itt	cs
 800059e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80005a2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80005a6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80005aa:	bf24      	itt	cs
 80005ac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80005b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80005b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80005b8:	bf24      	itt	cs
 80005ba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80005be:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80005c2:	011b      	lsls	r3, r3, #4
 80005c4:	bf18      	it	ne
 80005c6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80005ca:	d1e0      	bne.n	800058e <__aeabi_fdiv+0x46>
 80005cc:	2afd      	cmp	r2, #253	@ 0xfd
 80005ce:	f63f af50 	bhi.w	8000472 <__aeabi_fmul+0x92>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005d8:	bf08      	it	eq
 80005da:	f020 0001 	biceq.w	r0, r0, #1
 80005de:	4770      	bx	lr
 80005e0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80005e4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005e8:	327f      	adds	r2, #127	@ 0x7f
 80005ea:	bfc2      	ittt	gt
 80005ec:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80005f0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005f4:	4770      	bxgt	lr
 80005f6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005fa:	f04f 0300 	mov.w	r3, #0
 80005fe:	3a01      	subs	r2, #1
 8000600:	e737      	b.n	8000472 <__aeabi_fmul+0x92>
 8000602:	f092 0f00 	teq	r2, #0
 8000606:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800060a:	bf02      	ittt	eq
 800060c:	0040      	lsleq	r0, r0, #1
 800060e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000612:	3a01      	subeq	r2, #1
 8000614:	d0f9      	beq.n	800060a <__aeabi_fdiv+0xc2>
 8000616:	ea40 000c 	orr.w	r0, r0, ip
 800061a:	f093 0f00 	teq	r3, #0
 800061e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000622:	bf02      	ittt	eq
 8000624:	0049      	lsleq	r1, r1, #1
 8000626:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800062a:	3b01      	subeq	r3, #1
 800062c:	d0f9      	beq.n	8000622 <__aeabi_fdiv+0xda>
 800062e:	ea41 010c 	orr.w	r1, r1, ip
 8000632:	e795      	b.n	8000560 <__aeabi_fdiv+0x18>
 8000634:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000638:	ea92 0f0c 	teq	r2, ip
 800063c:	d108      	bne.n	8000650 <__aeabi_fdiv+0x108>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	f47f af7d 	bne.w	800053e <__aeabi_fmul+0x15e>
 8000644:	ea93 0f0c 	teq	r3, ip
 8000648:	f47f af70 	bne.w	800052c <__aeabi_fmul+0x14c>
 800064c:	4608      	mov	r0, r1
 800064e:	e776      	b.n	800053e <__aeabi_fmul+0x15e>
 8000650:	ea93 0f0c 	teq	r3, ip
 8000654:	d104      	bne.n	8000660 <__aeabi_fdiv+0x118>
 8000656:	024b      	lsls	r3, r1, #9
 8000658:	f43f af4c 	beq.w	80004f4 <__aeabi_fmul+0x114>
 800065c:	4608      	mov	r0, r1
 800065e:	e76e      	b.n	800053e <__aeabi_fmul+0x15e>
 8000660:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000664:	bf18      	it	ne
 8000666:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800066a:	d1ca      	bne.n	8000602 <__aeabi_fdiv+0xba>
 800066c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000670:	f47f af5c 	bne.w	800052c <__aeabi_fmul+0x14c>
 8000674:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000678:	f47f af3c 	bne.w	80004f4 <__aeabi_fmul+0x114>
 800067c:	e75f      	b.n	800053e <__aeabi_fmul+0x15e>
 800067e:	bf00      	nop

08000680 <__aeabi_f2uiz>:
 8000680:	0042      	lsls	r2, r0, #1
 8000682:	d20e      	bcs.n	80006a2 <__aeabi_f2uiz+0x22>
 8000684:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000688:	d30b      	bcc.n	80006a2 <__aeabi_f2uiz+0x22>
 800068a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800068e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000692:	d409      	bmi.n	80006a8 <__aeabi_f2uiz+0x28>
 8000694:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000698:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800069c:	fa23 f002 	lsr.w	r0, r3, r2
 80006a0:	4770      	bx	lr
 80006a2:	f04f 0000 	mov.w	r0, #0
 80006a6:	4770      	bx	lr
 80006a8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80006ac:	d101      	bne.n	80006b2 <__aeabi_f2uiz+0x32>
 80006ae:	0242      	lsls	r2, r0, #9
 80006b0:	d102      	bne.n	80006b8 <__aeabi_f2uiz+0x38>
 80006b2:	f04f 30ff 	mov.w	r0, #4294967295
 80006b6:	4770      	bx	lr
 80006b8:	f04f 0000 	mov.w	r0, #0
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop

080006c0 <delay>:
        .I2C_SCLSpeed = I2C_SCL_SPEED_SM,
        .I2C_DeviceAddress = 0x0,
    }
};

void delay(uint32_t time) {
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < time; i++)
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	e002      	b.n	80006d4 <delay+0x14>
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	3301      	adds	r3, #1
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fa      	ldr	r2, [r7, #12]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d3f8      	bcc.n	80006ce <delay+0xe>
        ;
}
 80006dc:	bf00      	nop
 80006de:	bf00      	nop
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr

080006e8 <I2C_GPIO_Setup>:

void I2C_GPIO_Setup() {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
    // White wire
    GPIO_Handle_t i2c_handle = {
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <I2C_GPIO_Setup+0x6c>)
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	2302      	movs	r3, #2
 8000700:	747b      	strb	r3, [r7, #17]
 8000702:	2302      	movs	r3, #2
 8000704:	74bb      	strb	r3, [r7, #18]
 8000706:	2301      	movs	r3, #1
 8000708:	753b      	strb	r3, [r7, #20]
 800070a:	2304      	movs	r3, #4
 800070c:	757b      	strb	r3, [r7, #21]
            .GPIO_PinOPType = GPIO_OP_TYPE_OD,
            .GPIO_PinAltFunMode = GPIO_AF_4
        }
    };

    GPIO_PCLK(GPIOB, ENABLE);
 800070e:	2101      	movs	r1, #1
 8000710:	4810      	ldr	r0, [pc, #64]	@ (8000754 <I2C_GPIO_Setup+0x6c>)
 8000712:	f000 f901 	bl	8000918 <GPIO_PCLK>

    // SCL
    i2c_handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_N6;
 8000716:	2306      	movs	r3, #6
 8000718:	743b      	strb	r3, [r7, #16]
    GPIO_Init(&i2c_handle);
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	4618      	mov	r0, r3
 8000720:	f000 f9c8 	bl	8000ab4 <GPIO_Init>

    // SDA
    i2c_handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_N7;
 8000724:	2307      	movs	r3, #7
 8000726:	743b      	strb	r3, [r7, #16]
    GPIO_Init(&i2c_handle);
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	4618      	mov	r0, r3
 800072e:	f000 f9c1 	bl	8000ab4 <GPIO_Init>

    GPIO_Handle_t btn_handle = {
 8000732:	4a09      	ldr	r2, [pc, #36]	@ (8000758 <I2C_GPIO_Setup+0x70>)
 8000734:	463b      	mov	r3, r7
 8000736:	ca07      	ldmia	r2, {r0, r1, r2}
 8000738:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            .GPIO_PinOPType = GPIO_OP_TYPE_PP,
            .GPIO_PinAltFunMode = 0
        }
    };

    GPIO_PCLK(GPIOC, ENABLE);
 800073c:	2101      	movs	r1, #1
 800073e:	4807      	ldr	r0, [pc, #28]	@ (800075c <I2C_GPIO_Setup+0x74>)
 8000740:	f000 f8ea 	bl	8000918 <GPIO_PCLK>

    GPIO_Init(&btn_handle);
 8000744:	463b      	mov	r3, r7
 8000746:	4618      	mov	r0, r3
 8000748:	f000 f9b4 	bl	8000ab4 <GPIO_Init>
}
 800074c:	bf00      	nop
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	48000400 	.word	0x48000400
 8000758:	080016d8 	.word	0x080016d8
 800075c:	48000800 	.word	0x48000800

08000760 <I2C_Setup>:

void I2C_Setup() {
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
    I2C_Init(&handle);
 8000764:	4808      	ldr	r0, [pc, #32]	@ (8000788 <I2C_Setup+0x28>)
 8000766:	f000 fba5 	bl	8000eb4 <I2C_Init>

    I2C_PCLK(handle.pI2Cx, ENABLE);
 800076a:	4b07      	ldr	r3, [pc, #28]	@ (8000788 <I2C_Setup+0x28>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2101      	movs	r1, #1
 8000770:	4618      	mov	r0, r3
 8000772:	f000 fb6b 	bl	8000e4c <I2C_PCLK>

    I2C_Enable(handle.pI2Cx, ENABLE);
 8000776:	4b04      	ldr	r3, [pc, #16]	@ (8000788 <I2C_Setup+0x28>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2101      	movs	r1, #1
 800077c:	4618      	mov	r0, r3
 800077e:	f000 fdc3 	bl	8001308 <I2C_Enable>
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000004 	.word	0x20000004

0800078c <I2C_AppEventCallback>:

void I2C_AppEventCallback(I2C_Handle_t *pHandle, uint8_t event) {
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	460b      	mov	r3, r1
 8000796:	70fb      	strb	r3, [r7, #3]

}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
	...

080007a4 <main>:

int main() {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af02      	add	r7, sp, #8
    I2C_GPIO_Setup();
 80007aa:	f7ff ff9d 	bl	80006e8 <I2C_GPIO_Setup>

    I2C_Setup();
 80007ae:	f7ff ffd7 	bl	8000760 <I2C_Setup>

    uint8_t is_down = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	71fb      	strb	r3, [r7, #7]

    I2C_Options transaction_options = {
 80007b6:	2300      	movs	r3, #0
 80007b8:	713b      	strb	r3, [r7, #4]
            .repeated_start = 0
    };

    I2C_IRQInterruptConfig(IRQ_NO_I2C1_EVENT, ENABLE);
 80007ba:	2101      	movs	r1, #1
 80007bc:	201f      	movs	r0, #31
 80007be:	f000 fdbf 	bl	8001340 <I2C_IRQInterruptConfig>
    I2C_IRQInterruptConfig(IRQ_NO_I2C1_ERROR, ENABLE);
 80007c2:	2101      	movs	r1, #1
 80007c4:	2020      	movs	r0, #32
 80007c6:	f000 fdbb 	bl	8001340 <I2C_IRQInterruptConfig>

    while (1) {
        uint8_t button_state = GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_N2);
 80007ca:	2102      	movs	r1, #2
 80007cc:	482f      	ldr	r0, [pc, #188]	@ (800088c <main+0xe8>)
 80007ce:	f000 fb29 	bl	8000e24 <GPIO_ReadFromInputPin>
 80007d2:	4603      	mov	r3, r0
 80007d4:	71bb      	strb	r3, [r7, #6]

        if (button_state == 0 && is_down == 0) {
 80007d6:	79bb      	ldrb	r3, [r7, #6]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d14d      	bne.n	8000878 <main+0xd4>
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d14a      	bne.n	8000878 <main+0xd4>
            is_down = 1;
 80007e2:	2301      	movs	r3, #1
 80007e4:	71fb      	strb	r3, [r7, #7]
            delay(50000);
 80007e6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80007ea:	f7ff ff69 	bl	80006c0 <delay>
            // XXX we should check if bus is not busy before we start anything

            // XXX very poor sample of IT's usagse

            // Send over we want to get length
            uint8_t cmd = CMD_GET_LEN;
 80007ee:	2351      	movs	r3, #81	@ 0x51
 80007f0:	70fb      	strb	r3, [r7, #3]
            while (I2C_MasterWriteIT(&handle, &cmd, 1, slave_addr, transaction_options) != I2C_READY)
 80007f2:	bf00      	nop
 80007f4:	4b26      	ldr	r3, [pc, #152]	@ (8000890 <main+0xec>)
 80007f6:	781a      	ldrb	r2, [r3, #0]
 80007f8:	1cf9      	adds	r1, r7, #3
 80007fa:	793b      	ldrb	r3, [r7, #4]
 80007fc:	f88d 3000 	strb.w	r3, [sp]
 8000800:	4613      	mov	r3, r2
 8000802:	2201      	movs	r2, #1
 8000804:	4823      	ldr	r0, [pc, #140]	@ (8000894 <main+0xf0>)
 8000806:	f000 fc4d 	bl	80010a4 <I2C_MasterWriteIT>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d1f1      	bne.n	80007f4 <main+0x50>
                ;

            // Read message length
            uint8_t byte_count = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	70bb      	strb	r3, [r7, #2]
            while(I2C_MasterReadIT(&handle, &byte_count, 1, slave_addr, transaction_options) != I2C_READY);
 8000814:	bf00      	nop
 8000816:	4b1e      	ldr	r3, [pc, #120]	@ (8000890 <main+0xec>)
 8000818:	781a      	ldrb	r2, [r3, #0]
 800081a:	1cb9      	adds	r1, r7, #2
 800081c:	793b      	ldrb	r3, [r7, #4]
 800081e:	f88d 3000 	strb.w	r3, [sp]
 8000822:	4613      	mov	r3, r2
 8000824:	2201      	movs	r2, #1
 8000826:	481b      	ldr	r0, [pc, #108]	@ (8000894 <main+0xf0>)
 8000828:	f000 fcd4 	bl	80011d4 <I2C_MasterReadIT>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d1f1      	bne.n	8000816 <main+0x72>

            cmd = CMD_GET_DATA;
 8000832:	2352      	movs	r3, #82	@ 0x52
 8000834:	70fb      	strb	r3, [r7, #3]
            while(I2C_MasterWriteIT(&handle, &cmd, 1, slave_addr, transaction_options) != I2C_READY);
 8000836:	bf00      	nop
 8000838:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <main+0xec>)
 800083a:	781a      	ldrb	r2, [r3, #0]
 800083c:	1cf9      	adds	r1, r7, #3
 800083e:	793b      	ldrb	r3, [r7, #4]
 8000840:	f88d 3000 	strb.w	r3, [sp]
 8000844:	4613      	mov	r3, r2
 8000846:	2201      	movs	r2, #1
 8000848:	4812      	ldr	r0, [pc, #72]	@ (8000894 <main+0xf0>)
 800084a:	f000 fc2b 	bl	80010a4 <I2C_MasterWriteIT>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d1f1      	bne.n	8000838 <main+0x94>

            // Read the message of length
            transaction_options.repeated_start = 0; // Must end on this one
 8000854:	2300      	movs	r3, #0
 8000856:	713b      	strb	r3, [r7, #4]
            while(I2C_MasterReadIT(&handle, data, byte_count, slave_addr, transaction_options) != I2C_READY);
 8000858:	bf00      	nop
 800085a:	78ba      	ldrb	r2, [r7, #2]
 800085c:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <main+0xec>)
 800085e:	7819      	ldrb	r1, [r3, #0]
 8000860:	793b      	ldrb	r3, [r7, #4]
 8000862:	f88d 3000 	strb.w	r3, [sp]
 8000866:	460b      	mov	r3, r1
 8000868:	490b      	ldr	r1, [pc, #44]	@ (8000898 <main+0xf4>)
 800086a:	480a      	ldr	r0, [pc, #40]	@ (8000894 <main+0xf0>)
 800086c:	f000 fcb2 	bl	80011d4 <I2C_MasterReadIT>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d1f1      	bne.n	800085a <main+0xb6>
        if (button_state == 0 && is_down == 0) {
 8000876:	e007      	b.n	8000888 <main+0xe4>
        } else if (button_state == 1 && is_down != 0) {
 8000878:	79bb      	ldrb	r3, [r7, #6]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d1a5      	bne.n	80007ca <main+0x26>
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d0a2      	beq.n	80007ca <main+0x26>
            is_down = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	71fb      	strb	r3, [r7, #7]
    while (1) {
 8000888:	e79f      	b.n	80007ca <main+0x26>
 800088a:	bf00      	nop
 800088c:	48000800 	.word	0x48000800
 8000890:	20000000 	.word	0x20000000
 8000894:	20000004 	.word	0x20000004
 8000898:	2000003c 	.word	0x2000003c

0800089c <I2C1_EV_IRQHandler>:
    }

    return 0;
}

void I2C1_EV_IRQHandler(void) {
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
    I2C_EV_IRQ_Handle(&handle);
 80008a0:	4802      	ldr	r0, [pc, #8]	@ (80008ac <I2C1_EV_IRQHandler+0x10>)
 80008a2:	f000 fdd1 	bl	8001448 <I2C_EV_IRQ_Handle>
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000004 	.word	0x20000004

080008b0 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
    I2C_ER_IRQ_Handle(&handle);
 80008b4:	4802      	ldr	r0, [pc, #8]	@ (80008c0 <I2C1_ER_IRQHandler+0x10>)
 80008b6:	f000 fed5 	bl	8001664 <I2C_ER_IRQ_Handle>
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000004 	.word	0x20000004

080008c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008c4:	480d      	ldr	r0, [pc, #52]	@ (80008fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008cc:	480c      	ldr	r0, [pc, #48]	@ (8000900 <LoopForever+0x6>)
  ldr r1, =_edata
 80008ce:	490d      	ldr	r1, [pc, #52]	@ (8000904 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000908 <LoopForever+0xe>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d4:	e002      	b.n	80008dc <LoopCopyDataInit>

080008d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008da:	3304      	adds	r3, #4

080008dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e0:	d3f9      	bcc.n	80008d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e2:	4a0a      	ldr	r2, [pc, #40]	@ (800090c <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000910 <LoopForever+0x16>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e8:	e001      	b.n	80008ee <LoopFillZerobss>

080008ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008ec:	3204      	adds	r2, #4

080008ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f0:	d3fb      	bcc.n	80008ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008f2:	f000 fec1 	bl	8001678 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008f6:	f7ff ff55 	bl	80007a4 <main>

080008fa <LoopForever>:

LoopForever:
  b LoopForever
 80008fa:	e7fe      	b.n	80008fa <LoopForever>
  ldr   r0, =_estack
 80008fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000904:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000908:	080016ec 	.word	0x080016ec
  ldr r2, =_sbss
 800090c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000910:	2000013c 	.word	0x2000013c

08000914 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000914:	e7fe      	b.n	8000914 <ADC1_2_IRQHandler>
	...

08000918 <GPIO_PCLK>:
#include "stm32l476xx_gpio_driver.h"

void GPIO_PCLK(GPIO_RegDef_t *pGPIOx, uint8_t isEnable) {
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	70fb      	strb	r3, [r7, #3]
	if (isEnable == ENABLE) {
 8000924:	78fb      	ldrb	r3, [r7, #3]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d157      	bne.n	80009da <GPIO_PCLK+0xc2>
		if (pGPIOx == GPIOA) {
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000930:	d106      	bne.n	8000940 <GPIO_PCLK+0x28>
			GPIOA_PCLK_EN();
 8000932:	4b58      	ldr	r3, [pc, #352]	@ (8000a94 <GPIO_PCLK+0x17c>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000936:	4a57      	ldr	r2, [pc, #348]	@ (8000a94 <GPIO_PCLK+0x17c>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	64d3      	str	r3, [r2, #76]	@ 0x4c
			GPIOG_PCLK_DI();
		} else if (pGPIOx == GPIOH) {
			GPIOH_PCLK_DI();
		}
	}
}
 800093e:	e0a3      	b.n	8000a88 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOB) {
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4a55      	ldr	r2, [pc, #340]	@ (8000a98 <GPIO_PCLK+0x180>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d106      	bne.n	8000956 <GPIO_PCLK+0x3e>
			GPIOB_PCLK_EN();
 8000948:	4b52      	ldr	r3, [pc, #328]	@ (8000a94 <GPIO_PCLK+0x17c>)
 800094a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094c:	4a51      	ldr	r2, [pc, #324]	@ (8000a94 <GPIO_PCLK+0x17c>)
 800094e:	f043 0302 	orr.w	r3, r3, #2
 8000952:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000954:	e098      	b.n	8000a88 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOC) {
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a50      	ldr	r2, [pc, #320]	@ (8000a9c <GPIO_PCLK+0x184>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d106      	bne.n	800096c <GPIO_PCLK+0x54>
			GPIOC_PCLK_EN();
 800095e:	4b4d      	ldr	r3, [pc, #308]	@ (8000a94 <GPIO_PCLK+0x17c>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000962:	4a4c      	ldr	r2, [pc, #304]	@ (8000a94 <GPIO_PCLK+0x17c>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800096a:	e08d      	b.n	8000a88 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOD) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a4c      	ldr	r2, [pc, #304]	@ (8000aa0 <GPIO_PCLK+0x188>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d106      	bne.n	8000982 <GPIO_PCLK+0x6a>
			GPIOD_PCLK_EN();
 8000974:	4b47      	ldr	r3, [pc, #284]	@ (8000a94 <GPIO_PCLK+0x17c>)
 8000976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000978:	4a46      	ldr	r2, [pc, #280]	@ (8000a94 <GPIO_PCLK+0x17c>)
 800097a:	f043 0308 	orr.w	r3, r3, #8
 800097e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000980:	e082      	b.n	8000a88 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOE) {
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a47      	ldr	r2, [pc, #284]	@ (8000aa4 <GPIO_PCLK+0x18c>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d106      	bne.n	8000998 <GPIO_PCLK+0x80>
			GPIOE_PCLK_EN();
 800098a:	4b42      	ldr	r3, [pc, #264]	@ (8000a94 <GPIO_PCLK+0x17c>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098e:	4a41      	ldr	r2, [pc, #260]	@ (8000a94 <GPIO_PCLK+0x17c>)
 8000990:	f043 0310 	orr.w	r3, r3, #16
 8000994:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000996:	e077      	b.n	8000a88 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOF) {
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a43      	ldr	r2, [pc, #268]	@ (8000aa8 <GPIO_PCLK+0x190>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d106      	bne.n	80009ae <GPIO_PCLK+0x96>
			GPIOF_PCLK_EN();
 80009a0:	4b3c      	ldr	r3, [pc, #240]	@ (8000a94 <GPIO_PCLK+0x17c>)
 80009a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a4:	4a3b      	ldr	r2, [pc, #236]	@ (8000a94 <GPIO_PCLK+0x17c>)
 80009a6:	f043 0320 	orr.w	r3, r3, #32
 80009aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80009ac:	e06c      	b.n	8000a88 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOG) {
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a3e      	ldr	r2, [pc, #248]	@ (8000aac <GPIO_PCLK+0x194>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d106      	bne.n	80009c4 <GPIO_PCLK+0xac>
			GPIOG_PCLK_EN();
 80009b6:	4b37      	ldr	r3, [pc, #220]	@ (8000a94 <GPIO_PCLK+0x17c>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ba:	4a36      	ldr	r2, [pc, #216]	@ (8000a94 <GPIO_PCLK+0x17c>)
 80009bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80009c2:	e061      	b.n	8000a88 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOH) {
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a3a      	ldr	r2, [pc, #232]	@ (8000ab0 <GPIO_PCLK+0x198>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d15d      	bne.n	8000a88 <GPIO_PCLK+0x170>
			GPIOH_PCLK_EN();
 80009cc:	4b31      	ldr	r3, [pc, #196]	@ (8000a94 <GPIO_PCLK+0x17c>)
 80009ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d0:	4a30      	ldr	r2, [pc, #192]	@ (8000a94 <GPIO_PCLK+0x17c>)
 80009d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80009d8:	e056      	b.n	8000a88 <GPIO_PCLK+0x170>
		if (pGPIOx == GPIOA) {
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80009e0:	d106      	bne.n	80009f0 <GPIO_PCLK+0xd8>
			GPIOA_PCLK_DI();
 80009e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000a94 <GPIO_PCLK+0x17c>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	4a2b      	ldr	r2, [pc, #172]	@ (8000a94 <GPIO_PCLK+0x17c>)
 80009e8:	f023 0301 	bic.w	r3, r3, #1
 80009ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80009ee:	e04b      	b.n	8000a88 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOB) {
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a29      	ldr	r2, [pc, #164]	@ (8000a98 <GPIO_PCLK+0x180>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d106      	bne.n	8000a06 <GPIO_PCLK+0xee>
			GPIOB_PCLK_DI();
 80009f8:	4b26      	ldr	r3, [pc, #152]	@ (8000a94 <GPIO_PCLK+0x17c>)
 80009fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fc:	4a25      	ldr	r2, [pc, #148]	@ (8000a94 <GPIO_PCLK+0x17c>)
 80009fe:	f023 0302 	bic.w	r3, r3, #2
 8000a02:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000a04:	e040      	b.n	8000a88 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOC) {
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a24      	ldr	r2, [pc, #144]	@ (8000a9c <GPIO_PCLK+0x184>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d106      	bne.n	8000a1c <GPIO_PCLK+0x104>
			GPIOC_PCLK_DI();
 8000a0e:	4b21      	ldr	r3, [pc, #132]	@ (8000a94 <GPIO_PCLK+0x17c>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a12:	4a20      	ldr	r2, [pc, #128]	@ (8000a94 <GPIO_PCLK+0x17c>)
 8000a14:	f023 0304 	bic.w	r3, r3, #4
 8000a18:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000a1a:	e035      	b.n	8000a88 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOD) {
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a20      	ldr	r2, [pc, #128]	@ (8000aa0 <GPIO_PCLK+0x188>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d106      	bne.n	8000a32 <GPIO_PCLK+0x11a>
			GPIOD_PCLK_DI();
 8000a24:	4b1b      	ldr	r3, [pc, #108]	@ (8000a94 <GPIO_PCLK+0x17c>)
 8000a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a28:	4a1a      	ldr	r2, [pc, #104]	@ (8000a94 <GPIO_PCLK+0x17c>)
 8000a2a:	f023 0308 	bic.w	r3, r3, #8
 8000a2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000a30:	e02a      	b.n	8000a88 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOE) {
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa4 <GPIO_PCLK+0x18c>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d106      	bne.n	8000a48 <GPIO_PCLK+0x130>
			GPIOE_PCLK_DI();
 8000a3a:	4b16      	ldr	r3, [pc, #88]	@ (8000a94 <GPIO_PCLK+0x17c>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	4a15      	ldr	r2, [pc, #84]	@ (8000a94 <GPIO_PCLK+0x17c>)
 8000a40:	f023 0310 	bic.w	r3, r3, #16
 8000a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000a46:	e01f      	b.n	8000a88 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOF) {
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a17      	ldr	r2, [pc, #92]	@ (8000aa8 <GPIO_PCLK+0x190>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d106      	bne.n	8000a5e <GPIO_PCLK+0x146>
			GPIOF_PCLK_DI();
 8000a50:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <GPIO_PCLK+0x17c>)
 8000a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a54:	4a0f      	ldr	r2, [pc, #60]	@ (8000a94 <GPIO_PCLK+0x17c>)
 8000a56:	f023 0320 	bic.w	r3, r3, #32
 8000a5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000a5c:	e014      	b.n	8000a88 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOG) {
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a12      	ldr	r2, [pc, #72]	@ (8000aac <GPIO_PCLK+0x194>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d106      	bne.n	8000a74 <GPIO_PCLK+0x15c>
			GPIOG_PCLK_DI();
 8000a66:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <GPIO_PCLK+0x17c>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a94 <GPIO_PCLK+0x17c>)
 8000a6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000a70:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000a72:	e009      	b.n	8000a88 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOH) {
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab0 <GPIO_PCLK+0x198>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d105      	bne.n	8000a88 <GPIO_PCLK+0x170>
			GPIOH_PCLK_DI();
 8000a7c:	4b05      	ldr	r3, [pc, #20]	@ (8000a94 <GPIO_PCLK+0x17c>)
 8000a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a80:	4a04      	ldr	r2, [pc, #16]	@ (8000a94 <GPIO_PCLK+0x17c>)
 8000a82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000a86:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000
 8000a98:	48000400 	.word	0x48000400
 8000a9c:	48000800 	.word	0x48000800
 8000aa0:	48000c00 	.word	0x48000c00
 8000aa4:	48001000 	.word	0x48001000
 8000aa8:	48001400 	.word	0x48001400
 8000aac:	48001800 	.word	0x48001800
 8000ab0:	48001c00 	.word	0x48001c00

08000ab4 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000ab4:	b480      	push	{r7}
 8000ab6:	b091      	sub	sp, #68	@ 0x44
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	// Configure mode
	GPIO_PinConfig_t pinConfig = pGPIOHandle->GPIO_PinConfig;
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	3204      	adds	r2, #4
 8000ac4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ac8:	6018      	str	r0, [r3, #0]
 8000aca:	3304      	adds	r3, #4
 8000acc:	8019      	strh	r1, [r3, #0]
	uint32_t mode = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c

	uint8_t pin_mode = pinConfig.GPIO_PinMode;
 8000ad2:	7b7b      	ldrb	r3, [r7, #13]
 8000ad4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t pin_number = pinConfig.GPIO_PinNumber;
 8000ad8:	7b3b      	ldrb	r3, [r7, #12]
 8000ada:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	// non IT
	if (pin_mode <= GPIO_MODE_ANALOG) {
 8000ade:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000ae2:	2b03      	cmp	r3, #3
 8000ae4:	d81d      	bhi.n	8000b22 <GPIO_Init+0x6e>
		// Mode takes 2 bits, all go consecutively so we can do 2 * pin number
		mode = pinConfig.GPIO_PinMode << (2 * pinConfig.GPIO_PinNumber);
 8000ae6:	7b7b      	ldrb	r3, [r7, #13]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	7b3b      	ldrb	r3, [r7, #12]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	63fb      	str	r3, [r7, #60]	@ 0x3c

		// Must clear before set!
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	7b3b      	ldrb	r3, [r7, #12]
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	2103      	movs	r1, #3
 8000b00:	fa01 f303 	lsl.w	r3, r1, r3
 8000b04:	43db      	mvns	r3, r3
 8000b06:	4619      	mov	r1, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	400a      	ands	r2, r1
 8000b0e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= mode;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	6819      	ldr	r1, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	e0e6      	b.n	8000cf0 <GPIO_Init+0x23c>
	} else {
	    // On reset mode will be analog, mode cant be analog for IT to work
        pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	7b3b      	ldrb	r3, [r7, #12]
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	2103      	movs	r1, #3
 8000b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b32:	43db      	mvns	r3, r3
 8000b34:	4619      	mov	r1, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	400a      	ands	r2, r1
 8000b3c:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= GPIO_MODE_INPUT;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	6812      	ldr	r2, [r2, #0]
 8000b48:	601a      	str	r2, [r3, #0]
	    // PA1, PB1 etc are connected to EXTI1
	    // ...
	    // PA15, PB15 are connected to EXTI15
	    // Lines 0-15 are for GPIO's

	    volatile uint32_t *FTSR = &EXTI->FTSR1;
 8000b4a:	4baa      	ldr	r3, [pc, #680]	@ (8000df4 <GPIO_Init+0x340>)
 8000b4c:	637b      	str	r3, [r7, #52]	@ 0x34
	    volatile uint32_t *RTSR = &EXTI->RTSR1;
 8000b4e:	4baa      	ldr	r3, [pc, #680]	@ (8000df8 <GPIO_Init+0x344>)
 8000b50:	633b      	str	r3, [r7, #48]	@ 0x30
	    volatile uint32_t *IMR = &EXTI->IMR1;
 8000b52:	4baa      	ldr	r3, [pc, #680]	@ (8000dfc <GPIO_Init+0x348>)
 8000b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    // GPIO => EXTI(Edge detection, interupt delivery) => NVIC(Enable and configure IRQ) => CPU
	    // IRQ - interupt request
	    // NVIC - nested vectored interupt controler
        if (pin_mode == GPIO_MODE_IR_FT) {
 8000b56:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	d115      	bne.n	8000b8a <GPIO_Init+0xd6>
            // Configure falling edge control register (FTSR)
            *FTSR |= (1 << pin_number);
 8000b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000b66:	2101      	movs	r1, #1
 8000b68:	fa01 f202 	lsl.w	r2, r1, r2
 8000b6c:	431a      	orrs	r2, r3
 8000b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b70:	601a      	str	r2, [r3, #0]
            *RTSR &= ~(1 << pin_number); // Reset RTSR just in case
 8000b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b80:	43d2      	mvns	r2, r2
 8000b82:	401a      	ands	r2, r3
 8000b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	e031      	b.n	8000bee <GPIO_Init+0x13a>
        } else if (pin_mode == GPIO_MODE_IR_RT) {
 8000b8a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000b8e:	2b05      	cmp	r3, #5
 8000b90:	d115      	bne.n	8000bbe <GPIO_Init+0x10a>
            // Configure rising edge control register (RTSR)
            *RTSR |= (1 << pin_number);
 8000b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba0:	431a      	orrs	r2, r3
 8000ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ba4:	601a      	str	r2, [r3, #0]
            *FTSR &= ~(1 << pin_number); // Reset FTSR just in case
 8000ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000bae:	2101      	movs	r1, #1
 8000bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb4:	43d2      	mvns	r2, r2
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	e017      	b.n	8000bee <GPIO_Init+0x13a>
        } else if (pin_mode == GPIO_MODE_IR_RFT) {
 8000bbe:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000bc2:	2b06      	cmp	r3, #6
 8000bc4:	d113      	bne.n	8000bee <GPIO_Init+0x13a>
            // Configure both registers
            *RTSR |= (1 << pin_number);
 8000bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000bce:	2101      	movs	r1, #1
 8000bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bd8:	601a      	str	r2, [r3, #0]
            *FTSR |= (1 << pin_number);
 8000bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000be2:	2101      	movs	r1, #1
 8000be4:	fa01 f202 	lsl.w	r2, r1, r2
 8000be8:	431a      	orrs	r2, r3
 8000bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bec:	601a      	str	r2, [r3, #0]
        }

        // Configure GPIO port in SYSCFG_EXTIR
        uint8_t index = pin_number / 4;
 8000bee:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000bf2:	089b      	lsrs	r3, r3, #2
 8000bf4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        uint8_t offset = pin_number % 4;
 8000bf8:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000bfc:	f003 0303 	and.w	r3, r3, #3
 8000c00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

        uint8_t portcode = GPIO_ADR_TO_CODE(pGPIOHandle->pGPIOx);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c0c:	d032      	beq.n	8000c74 <GPIO_Init+0x1c0>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a7b      	ldr	r2, [pc, #492]	@ (8000e00 <GPIO_Init+0x34c>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d02b      	beq.n	8000c70 <GPIO_Init+0x1bc>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a79      	ldr	r2, [pc, #484]	@ (8000e04 <GPIO_Init+0x350>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d024      	beq.n	8000c6c <GPIO_Init+0x1b8>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a78      	ldr	r2, [pc, #480]	@ (8000e08 <GPIO_Init+0x354>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d01d      	beq.n	8000c68 <GPIO_Init+0x1b4>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a76      	ldr	r2, [pc, #472]	@ (8000e0c <GPIO_Init+0x358>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d016      	beq.n	8000c64 <GPIO_Init+0x1b0>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a75      	ldr	r2, [pc, #468]	@ (8000e10 <GPIO_Init+0x35c>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d00f      	beq.n	8000c60 <GPIO_Init+0x1ac>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a73      	ldr	r2, [pc, #460]	@ (8000e14 <GPIO_Init+0x360>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d008      	beq.n	8000c5c <GPIO_Init+0x1a8>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a72      	ldr	r2, [pc, #456]	@ (8000e18 <GPIO_Init+0x364>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d101      	bne.n	8000c58 <GPIO_Init+0x1a4>
 8000c54:	2307      	movs	r3, #7
 8000c56:	e00e      	b.n	8000c76 <GPIO_Init+0x1c2>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	e00c      	b.n	8000c76 <GPIO_Init+0x1c2>
 8000c5c:	2306      	movs	r3, #6
 8000c5e:	e00a      	b.n	8000c76 <GPIO_Init+0x1c2>
 8000c60:	2305      	movs	r3, #5
 8000c62:	e008      	b.n	8000c76 <GPIO_Init+0x1c2>
 8000c64:	2304      	movs	r3, #4
 8000c66:	e006      	b.n	8000c76 <GPIO_Init+0x1c2>
 8000c68:	2303      	movs	r3, #3
 8000c6a:	e004      	b.n	8000c76 <GPIO_Init+0x1c2>
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	e002      	b.n	8000c76 <GPIO_Init+0x1c2>
 8000c70:	2301      	movs	r3, #1
 8000c72:	e000      	b.n	8000c76 <GPIO_Init+0x1c2>
 8000c74:	2300      	movs	r3, #0
 8000c76:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

        SYSCFG_PCLK_EN();
 8000c7a:	4b68      	ldr	r3, [pc, #416]	@ (8000e1c <GPIO_Init+0x368>)
 8000c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c7e:	4a67      	ldr	r2, [pc, #412]	@ (8000e1c <GPIO_Init+0x368>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6613      	str	r3, [r2, #96]	@ 0x60
        SYSCFG->EXTICR[index] &= ~(portcode << (offset * 4));
 8000c86:	4a66      	ldr	r2, [pc, #408]	@ (8000e20 <GPIO_Init+0x36c>)
 8000c88:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000c8c:	3302      	adds	r3, #2
 8000c8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c92:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8000c96:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	495e      	ldr	r1, [pc, #376]	@ (8000e20 <GPIO_Init+0x36c>)
 8000ca6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000caa:	4002      	ands	r2, r0
 8000cac:	3302      	adds	r3, #2
 8000cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        SYSCFG->EXTICR[index] |= portcode << (offset * 4);
 8000cb2:	4a5b      	ldr	r2, [pc, #364]	@ (8000e20 <GPIO_Init+0x36c>)
 8000cb4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000cb8:	3302      	adds	r3, #2
 8000cba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cbe:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8000cc2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ccc:	4618      	mov	r0, r3
 8000cce:	4954      	ldr	r1, [pc, #336]	@ (8000e20 <GPIO_Init+0x36c>)
 8000cd0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000cd4:	4302      	orrs	r2, r0
 8000cd6:	3302      	adds	r3, #2
 8000cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Enable EXTI interupt delivery using IMR (Interupt mask register)
        *IMR |= (1 << pin_number);
 8000cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cea:	431a      	orrs	r2, r3
 8000cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cee:	601a      	str	r2, [r3, #0]
	}
	// Configure speed
	uint32_t speed = pinConfig.GPIO_PinSpeed << (2 * pinConfig.GPIO_PinNumber);
 8000cf0:	7bbb      	ldrb	r3, [r7, #14]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	7b3b      	ldrb	r3, [r7, #12]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	627b      	str	r3, [r7, #36]	@ 0x24
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	689a      	ldr	r2, [r3, #8]
 8000d04:	7b3b      	ldrb	r3, [r7, #12]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	2103      	movs	r1, #3
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	4619      	mov	r1, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	400a      	ands	r2, r1
 8000d18:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= speed;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	6899      	ldr	r1, [r3, #8]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d26:	430a      	orrs	r2, r1
 8000d28:	609a      	str	r2, [r3, #8]

	// Configure pull up/down
	uint32_t pull = pinConfig.GPIO_PinPuPdControl << (2 * pinConfig.GPIO_PinNumber);
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	7b3b      	ldrb	r3, [r7, #12]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	623b      	str	r3, [r7, #32]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	68da      	ldr	r2, [r3, #12]
 8000d3e:	7b3b      	ldrb	r3, [r7, #12]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	2103      	movs	r1, #3
 8000d44:	fa01 f303 	lsl.w	r3, r1, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	400a      	ands	r2, r1
 8000d52:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= pull;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	68d9      	ldr	r1, [r3, #12]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	6a3a      	ldr	r2, [r7, #32]
 8000d60:	430a      	orrs	r2, r1
 8000d62:	60da      	str	r2, [r3, #12]

	// Configure otype, output type
	uint32_t o_type = pinConfig.GPIO_PinOPType << pinConfig.GPIO_PinNumber;
 8000d64:	7c3b      	ldrb	r3, [r7, #16]
 8000d66:	461a      	mov	r2, r3
 8000d68:	7b3b      	ldrb	r3, [r7, #12]
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIOx->OTYPER |= o_type;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	6859      	ldr	r1, [r3, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	69fa      	ldr	r2, [r7, #28]
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	605a      	str	r2, [r3, #4]

	// Configure alt function
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	795b      	ldrb	r3, [r3, #5]
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d12f      	bne.n	8000de8 <GPIO_Init+0x334>

		uint32_t index = pinConfig.GPIO_PinNumber / 8;
 8000d88:	7b3b      	ldrb	r3, [r7, #12]
 8000d8a:	08db      	lsrs	r3, r3, #3
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	61bb      	str	r3, [r7, #24]
		uint32_t offset = pinConfig.GPIO_PinNumber % 8;
 8000d90:	7b3b      	ldrb	r3, [r7, #12]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	617b      	str	r3, [r7, #20]

		pGPIOHandle->pGPIOx->AFR[index] &= ~(0xF << (4 * offset));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	3208      	adds	r2, #8
 8000da0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	210f      	movs	r1, #15
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	4619      	mov	r1, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4011      	ands	r1, r2
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	3208      	adds	r2, #8
 8000dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[index] |= pinConfig.GPIO_PinAltFunMode << (4 * offset);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	3208      	adds	r2, #8
 8000dc8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000dcc:	7c7b      	ldrb	r3, [r7, #17]
 8000dce:	4619      	mov	r1, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd8:	4619      	mov	r1, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4311      	orrs	r1, r2
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	3208      	adds	r2, #8
 8000de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000de8:	bf00      	nop
 8000dea:	3744      	adds	r7, #68	@ 0x44
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	4001040c 	.word	0x4001040c
 8000df8:	40010408 	.word	0x40010408
 8000dfc:	40010400 	.word	0x40010400
 8000e00:	48000400 	.word	0x48000400
 8000e04:	48000800 	.word	0x48000800
 8000e08:	48000c00 	.word	0x48000c00
 8000e0c:	48001000 	.word	0x48001000
 8000e10:	48001400 	.word	0x48001400
 8000e14:	48001800 	.word	0x48001800
 8000e18:	48001c00 	.word	0x48001c00
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40010000 	.word	0x40010000

08000e24 <GPIO_ReadFromInputPin>:
	} else if (pGPIOx == GPIOH) {
		GPIOH_REG_RESET();
	}
}

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber) {
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	70fb      	strb	r3, [r7, #3]
	return (uint8_t) (pGPIOx->IDR >> pinNumber) & 0x00000001;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	691a      	ldr	r2, [r3, #16]
 8000e34:	78fb      	ldrb	r3, [r7, #3]
 8000e36:	fa22 f303 	lsr.w	r3, r2, r3
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	b2db      	uxtb	r3, r3
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <I2C_PCLK>:
#include "stm32l4xx_i2c_driver.h"

void I2C_PCLK(I2C_RegDef_t *pI2Cx, uint8_t isEnable) {
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	70fb      	strb	r3, [r7, #3]
    if (pI2Cx == I2C1) {
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ea4 <I2C_PCLK+0x58>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d106      	bne.n	8000e6e <I2C_PCLK+0x22>
        I2C1_PCLK_EN();
 8000e60:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <I2C_PCLK+0x5c>)
 8000e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e64:	4a10      	ldr	r2, [pc, #64]	@ (8000ea8 <I2C_PCLK+0x5c>)
 8000e66:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e6a:	6593      	str	r3, [r2, #88]	@ 0x58
    } else if (pI2Cx == I2C2) {
        I2C2_PCLK_EN();
    } else if (pI2Cx == I2C3) {
        I2C3_PCLK_EN();
    }
}
 8000e6c:	e014      	b.n	8000e98 <I2C_PCLK+0x4c>
    } else if (pI2Cx == I2C2) {
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a0e      	ldr	r2, [pc, #56]	@ (8000eac <I2C_PCLK+0x60>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d106      	bne.n	8000e84 <I2C_PCLK+0x38>
        I2C2_PCLK_EN();
 8000e76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <I2C_PCLK+0x5c>)
 8000e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea8 <I2C_PCLK+0x5c>)
 8000e7c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e80:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000e82:	e009      	b.n	8000e98 <I2C_PCLK+0x4c>
    } else if (pI2Cx == I2C3) {
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb0 <I2C_PCLK+0x64>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d105      	bne.n	8000e98 <I2C_PCLK+0x4c>
        I2C3_PCLK_EN();
 8000e8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <I2C_PCLK+0x5c>)
 8000e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e90:	4a05      	ldr	r2, [pc, #20]	@ (8000ea8 <I2C_PCLK+0x5c>)
 8000e92:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e96:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40005400 	.word	0x40005400
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40005800 	.word	0x40005800
 8000eb0:	40005c00 	.word	0x40005c00

08000eb4 <I2C_Init>:

// XXX Note: MSI 4 Mhz as SYSCLK is the reset value
void I2C_Init(I2C_Handle_t *pI2CHandle) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	@ 0x28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    // XXX We need 16 Mhz for this to all to work for now
    // XXX It is a side effect, should be commented as such and seperate function created
    RCC->CR |= (1 << RCC_CR_MSIRGSEL);
 8000ebc:	4b71      	ldr	r3, [pc, #452]	@ (8001084 <I2C_Init+0x1d0>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a70      	ldr	r2, [pc, #448]	@ (8001084 <I2C_Init+0x1d0>)
 8000ec2:	f043 0308 	orr.w	r3, r3, #8
 8000ec6:	6013      	str	r3, [r2, #0]

    // Set 16 Mhz
    RCC->CR &= ~(0xF << RCC_CR_MSIRANGE);
 8000ec8:	4b6e      	ldr	r3, [pc, #440]	@ (8001084 <I2C_Init+0x1d0>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a6d      	ldr	r2, [pc, #436]	@ (8001084 <I2C_Init+0x1d0>)
 8000ece:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000ed2:	6013      	str	r3, [r2, #0]
    RCC->CR |= (RCC_CR_MSIRANGE_16M << RCC_CR_MSIRANGE);
 8000ed4:	4b6b      	ldr	r3, [pc, #428]	@ (8001084 <I2C_Init+0x1d0>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a6a      	ldr	r2, [pc, #424]	@ (8001084 <I2C_Init+0x1d0>)
 8000eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ede:	6013      	str	r3, [r2, #0]

    I2C_Config_t config = pI2CHandle->I2C_Config;
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	f107 030c 	add.w	r3, r7, #12
 8000ee6:	3204      	adds	r2, #4
 8000ee8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eec:	e883 0003 	stmia.w	r3, {r0, r1}

    // These values are from DS timing examples
    uint8_t sda_del = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t scl_del = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    // XXX We could check RCC->SW for clock source.
    // XXX Afterward process MSI possibilities ans HSI16. And propably PLL as well.
    float tick_period = (float)1 / 16000000UL;
 8000efc:	4b62      	ldr	r3, [pc, #392]	@ (8001088 <I2C_Init+0x1d4>)
 8000efe:	61fb      	str	r3, [r7, #28]
    float i2c_period = 0;
 8000f00:	f04f 0300 	mov.w	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]

    // Set prescaler to DIV2
    pI2CHandle->pI2Cx->TIMINGR &= ~(0x7 << I2C_TIMINGR_PRESC);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	691a      	ldr	r2, [r3, #16]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f022 42e0 	bic.w	r2, r2, #1879048192	@ 0x70000000
 8000f14:	611a      	str	r2, [r3, #16]
    pI2CHandle->pI2Cx->TIMINGR |= (1 << I2C_TIMINGR_PRESC);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	691a      	ldr	r2, [r3, #16]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000f24:	611a      	str	r2, [r3, #16]

    // Must set SCLH and SCLL bits in TIMINGR for master clock config
    if (config.I2C_SCLSpeed == I2C_SCL_SPEED_SM) {
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4a58      	ldr	r2, [pc, #352]	@ (800108c <I2C_Init+0x1d8>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d108      	bne.n	8000f40 <I2C_Init+0x8c>
        sda_del = 0x2;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        scl_del = 0x4;
 8000f34:	2304      	movs	r3, #4
 8000f36:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        i2c_period = (float) 1 / 100000UL;
 8000f3a:	4b55      	ldr	r3, [pc, #340]	@ (8001090 <I2C_Init+0x1dc>)
 8000f3c:	623b      	str	r3, [r7, #32]
 8000f3e:	e018      	b.n	8000f72 <I2C_Init+0xbe>
    } else if (config.I2C_SCLSpeed == I2C_SCL_SPEED_FM2K) {
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4a54      	ldr	r2, [pc, #336]	@ (8001094 <I2C_Init+0x1e0>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d108      	bne.n	8000f5a <I2C_Init+0xa6>
        sda_del = 0x2;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        scl_del = 0x3;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        i2c_period = (float) 1 / 200000UL;
 8000f54:	4b50      	ldr	r3, [pc, #320]	@ (8001098 <I2C_Init+0x1e4>)
 8000f56:	623b      	str	r3, [r7, #32]
 8000f58:	e00b      	b.n	8000f72 <I2C_Init+0xbe>
    } else if (config.I2C_SCLSpeed == I2C_SCL_SPEED_FM4K) {
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4a4f      	ldr	r2, [pc, #316]	@ (800109c <I2C_Init+0x1e8>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d107      	bne.n	8000f72 <I2C_Init+0xbe>
        sda_del = 0x1;
 8000f62:	2301      	movs	r3, #1
 8000f64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        scl_del = 0x3;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        i2c_period = (float) 1 / 400000UL;
 8000f6e:	4b4c      	ldr	r3, [pc, #304]	@ (80010a0 <I2C_Init+0x1ec>)
 8000f70:	623b      	str	r3, [r7, #32]
    } else {
        // TODO do a crash
    }

    // Calculate clock high/low time
    float half_period = i2c_period / 2;
 8000f72:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000f76:	6a38      	ldr	r0, [r7, #32]
 8000f78:	f7ff fae6 	bl	8000548 <__aeabi_fdiv>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	61bb      	str	r3, [r7, #24]
    uint8_t duty_cycle = (uint8_t) half_period / tick_period;
 8000f80:	69b8      	ldr	r0, [r7, #24]
 8000f82:	f7ff fb7d 	bl	8000680 <__aeabi_f2uiz>
 8000f86:	4603      	mov	r3, r0
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff f9d4 	bl	8000338 <__aeabi_i2f>
 8000f90:	4603      	mov	r3, r0
 8000f92:	69f9      	ldr	r1, [r7, #28]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fad7 	bl	8000548 <__aeabi_fdiv>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fb6f 	bl	8000680 <__aeabi_f2uiz>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	75fb      	strb	r3, [r7, #23]

    pI2CHandle->pI2Cx->TIMINGR &= ~(0xFF << I2C_TIMINGR_SCLL);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	691a      	ldr	r2, [r3, #16]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000fb4:	611a      	str	r2, [r3, #16]
    pI2CHandle->pI2Cx->TIMINGR &= ~(0xFF << I2C_TIMINGR_SCLH);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	691a      	ldr	r2, [r3, #16]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8000fc4:	611a      	str	r2, [r3, #16]

    pI2CHandle->pI2Cx->TIMINGR |= (duty_cycle << I2C_TIMINGR_SCLL);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	6919      	ldr	r1, [r3, #16]
 8000fcc:	7dfa      	ldrb	r2, [r7, #23]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	611a      	str	r2, [r3, #16]
    pI2CHandle->pI2Cx->TIMINGR |= (duty_cycle << I2C_TIMINGR_SCLH);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6919      	ldr	r1, [r3, #16]
 8000fdc:	7dfb      	ldrb	r3, [r7, #23]
 8000fde:	021a      	lsls	r2, r3, #8
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	611a      	str	r2, [r3, #16]

    // Clear delays
    pI2CHandle->pI2Cx->TIMINGR &= ~(0x7 << I2C_TIMINGR_SDADEL);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	691a      	ldr	r2, [r3, #16]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8000ff6:	611a      	str	r2, [r3, #16]
    pI2CHandle->pI2Cx->TIMINGR &= ~(0x7 << I2C_TIMINGR_SCLDEL);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	691a      	ldr	r2, [r3, #16]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f422 02e0 	bic.w	r2, r2, #7340032	@ 0x700000
 8001006:	611a      	str	r2, [r3, #16]

    // Setdelays
    pI2CHandle->pI2Cx->TIMINGR |= sda_del << I2C_TIMINGR_SDADEL;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6919      	ldr	r1, [r3, #16]
 800100e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001012:	041a      	lsls	r2, r3, #16
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	430a      	orrs	r2, r1
 800101a:	611a      	str	r2, [r3, #16]
    pI2CHandle->pI2Cx->TIMINGR |= scl_del << I2C_TIMINGR_SCLDEL;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	6919      	ldr	r1, [r3, #16]
 8001022:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001026:	051a      	lsls	r2, r3, #20
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	430a      	orrs	r2, r1
 800102e:	611a      	str	r2, [r3, #16]

    // Assuming non-zero is a proper address, doing the slave way
    if (config.I2C_DeviceAddress != 0x0) {
 8001030:	7c3b      	ldrb	r3, [r7, #16]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d01b      	beq.n	800106e <I2C_Init+0x1ba>
        pI2CHandle->pI2Cx->OAR1 &= ~0x3FF;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	6812      	ldr	r2, [r2, #0]
 8001040:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001044:	f023 0303 	bic.w	r3, r3, #3
 8001048:	6093      	str	r3, [r2, #8]

        pI2CHandle->pI2Cx->OAR1 |= (config.I2C_DeviceAddress << 1);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6899      	ldr	r1, [r3, #8]
 8001050:	7c3b      	ldrb	r3, [r7, #16]
 8001052:	005a      	lsls	r2, r3, #1
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	430a      	orrs	r2, r1
 800105a:	609a      	str	r2, [r3, #8]
        pI2CHandle->pI2Cx->OAR1 |= (1 << I2C_OA1_EN);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	689a      	ldr	r2, [r3, #8]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800106a:	609a      	str	r2, [r3, #8]
    } else {
        pI2CHandle->pI2Cx->OAR1 &= !(1 << I2C_OA1_EN);
    }
}
 800106c:	e006      	b.n	800107c <I2C_Init+0x1c8>
        pI2CHandle->pI2Cx->OAR1 &= !(1 << I2C_OA1_EN);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
}
 800107c:	bf00      	nop
 800107e:	3728      	adds	r7, #40	@ 0x28
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40021000 	.word	0x40021000
 8001088:	338637bd 	.word	0x338637bd
 800108c:	000186a0 	.word	0x000186a0
 8001090:	3727c5ac 	.word	0x3727c5ac
 8001094:	00030d40 	.word	0x00030d40
 8001098:	36a7c5ac 	.word	0x36a7c5ac
 800109c:	00061a80 	.word	0x00061a80
 80010a0:	3627c5ac 	.word	0x3627c5ac

080010a4 <I2C_MasterWriteIT>:
        while (((pI2CHandle->pI2Cx->ISR >> I2C_ISR_TC) & 0x1) == 0)
            ;
    }
}

uint8_t I2C_MasterWriteIT(I2C_Handle_t *pI2CHandle, uint8_t *source, uint8_t size, uint8_t slave_addr, I2C_Options options) {
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	4611      	mov	r1, r2
 80010b0:	461a      	mov	r2, r3
 80010b2:	460b      	mov	r3, r1
 80010b4:	71fb      	strb	r3, [r7, #7]
 80010b6:	4613      	mov	r3, r2
 80010b8:	71bb      	strb	r3, [r7, #6]
    if (pI2CHandle->i2c_state == I2C_READY) {
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	7d9b      	ldrb	r3, [r3, #22]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d178      	bne.n	80011b4 <I2C_MasterWriteIT+0x110>
        // Set to 7 bit addressing
        pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ADD10);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80010d0:	605a      	str	r2, [r3, #4]

        // Set byte count to send
        pI2CHandle->pI2Cx->CR2 &= ~(0x7F << I2C_CR2_NBYTES);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f422 02fe 	bic.w	r2, r2, #8323072	@ 0x7f0000
 80010e0:	605a      	str	r2, [r3, #4]
        pI2CHandle->pI2Cx->CR2 |= (size << I2C_CR2_NBYTES);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6859      	ldr	r1, [r3, #4]
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	041a      	lsls	r2, r3, #16
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	430a      	orrs	r2, r1
 80010f2:	605a      	str	r2, [r3, #4]

        // Must auto end for IT for such an API
        pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_AUTOEND);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8001102:	605a      	str	r2, [r3, #4]

        // Master requests a write
        pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_RD_WRN);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001112:	605a      	str	r2, [r3, #4]

        // Configure slave address, assume 7 bit
        pI2CHandle->pI2Cx->CR2 &= ~(0x3FF << I2C_CR2_SADD);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	6812      	ldr	r2, [r2, #0]
 800111e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001122:	f023 0303 	bic.w	r3, r3, #3
 8001126:	6053      	str	r3, [r2, #4]
        pI2CHandle->pI2Cx->CR2 |= ((slave_addr << 1) << I2C_CR2_SADD);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6859      	ldr	r1, [r3, #4]
 800112e:	79bb      	ldrb	r3, [r7, #6]
 8001130:	005a      	lsls	r2, r3, #1
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	430a      	orrs	r2, r1
 8001138:	605a      	str	r2, [r3, #4]

        // Enable STOP interrupt
        pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_STOPIE);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f042 0220 	orr.w	r2, r2, #32
 8001148:	601a      	str	r2, [r3, #0]

        // Enable TX buff empty interrupt
        pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_TXIE);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f042 0202 	orr.w	r2, r2, #2
 8001158:	601a      	str	r2, [r3, #0]

        // We want to hear about your experiences
        pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_ERRIE);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001168:	601a      	str	r2, [r3, #0]

        // NBytes transferred IE
        pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_TCIE);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001178:	601a      	str	r2, [r3, #0]

        // Generate start condition
        pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_START);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001188:	605a      	str	r2, [r3, #4]

        // Store the data
        pI2CHandle->pTxBuffer = source;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	60da      	str	r2, [r3, #12]
        pI2CHandle->addr = slave_addr;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	79ba      	ldrb	r2, [r7, #6]
 8001194:	75da      	strb	r2, [r3, #23]
        pI2CHandle->i2c_state = I2C_TX;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2202      	movs	r2, #2
 800119a:	759a      	strb	r2, [r3, #22]
        pI2CHandle->tx_len = size;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	79fa      	ldrb	r2, [r7, #7]
 80011a0:	751a      	strb	r2, [r3, #20]
        pI2CHandle->sr = options.repeated_start == 1;
 80011a2:	7e3b      	ldrb	r3, [r7, #24]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	bf0c      	ite	eq
 80011a8:	2301      	moveq	r3, #1
 80011aa:	2300      	movne	r3, #0
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	461a      	mov	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	761a      	strb	r2, [r3, #24]
    }

    // IRQ will set state as done so we done reexecute and just return ready
    if (pI2CHandle->i2c_state == I2C_DONE) {
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	7d9b      	ldrb	r3, [r3, #22]
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	d104      	bne.n	80011c6 <I2C_MasterWriteIT+0x122>
        pI2CHandle->i2c_state = I2C_READY;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2200      	movs	r2, #0
 80011c0:	759a      	strb	r2, [r3, #22]
        return I2C_READY;
 80011c2:	2300      	movs	r3, #0
 80011c4:	e001      	b.n	80011ca <I2C_MasterWriteIT+0x126>
    }

    return pI2CHandle->i2c_state;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	7d9b      	ldrb	r3, [r3, #22]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr

080011d4 <I2C_MasterReadIT>:

uint8_t I2C_MasterReadIT(I2C_Handle_t *pI2CHandle, uint8_t *destination, uint8_t size, uint8_t slave_addr, I2C_Options options) {
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	4611      	mov	r1, r2
 80011e0:	461a      	mov	r2, r3
 80011e2:	460b      	mov	r3, r1
 80011e4:	71fb      	strb	r3, [r7, #7]
 80011e6:	4613      	mov	r3, r2
 80011e8:	71bb      	strb	r3, [r7, #6]
    if (pI2CHandle->i2c_state == I2C_READY) {
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	7d9b      	ldrb	r3, [r3, #22]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d17a      	bne.n	80012e8 <I2C_MasterReadIT+0x114>
        // Must have cleared before address phase
        pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_AUTOEND);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8001200:	605a      	str	r2, [r3, #4]

        // Set to 7 bit addressing
        pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ADD10);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001210:	605a      	str	r2, [r3, #4]

        // Set byte count to read
        pI2CHandle->pI2Cx->CR2 &= ~(0x7F << I2C_CR2_NBYTES);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f422 02fe 	bic.w	r2, r2, #8323072	@ 0x7f0000
 8001220:	605a      	str	r2, [r3, #4]
        pI2CHandle->pI2Cx->CR2 |= (size << I2C_CR2_NBYTES);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6859      	ldr	r1, [r3, #4]
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	041a      	lsls	r2, r3, #16
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	430a      	orrs	r2, r1
 8001232:	605a      	str	r2, [r3, #4]

        // Configure slave address, assume 7 bit
        pI2CHandle->pI2Cx->CR2 &= ~(0x3FF << I2C_CR2_SADD);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	6812      	ldr	r2, [r2, #0]
 800123e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001242:	f023 0303 	bic.w	r3, r3, #3
 8001246:	6053      	str	r3, [r2, #4]
        pI2CHandle->pI2Cx->CR2 |= ((slave_addr << 1) << I2C_CR2_SADD);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6859      	ldr	r1, [r3, #4]
 800124e:	79bb      	ldrb	r3, [r7, #6]
 8001250:	005a      	lsls	r2, r3, #1
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	430a      	orrs	r2, r1
 8001258:	605a      	str	r2, [r3, #4]

        // Master requests a read
        pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_RD_WRN);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001268:	605a      	str	r2, [r3, #4]

        // Enable STOP interrupt
        pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_STOPIE);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f042 0220 	orr.w	r2, r2, #32
 8001278:	601a      	str	r2, [r3, #0]

        // Enable TX buff empty interrupt
        pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_RXIE);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f042 0204 	orr.w	r2, r2, #4
 8001288:	601a      	str	r2, [r3, #0]

        // We want to hear about your experiences
        pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_ERRIE);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001298:	601a      	str	r2, [r3, #0]

        // NBytes transferred IE
        pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_TCIE);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80012a8:	601a      	str	r2, [r3, #0]

        // Generate start condition
        pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_START);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80012b8:	605a      	str	r2, [r3, #4]

        pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_AUTOEND);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80012c8:	605a      	str	r2, [r3, #4]

        // Store the data
        pI2CHandle->pRxBuffer = destination;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	611a      	str	r2, [r3, #16]
        pI2CHandle->addr = slave_addr;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	79ba      	ldrb	r2, [r7, #6]
 80012d4:	75da      	strb	r2, [r3, #23]
        pI2CHandle->i2c_state = I2C_RX;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2201      	movs	r2, #1
 80012da:	759a      	strb	r2, [r3, #22]
        pI2CHandle->rx_len = size;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	79fa      	ldrb	r2, [r7, #7]
 80012e0:	755a      	strb	r2, [r3, #21]
        pI2CHandle->sr = 0;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2200      	movs	r2, #0
 80012e6:	761a      	strb	r2, [r3, #24]
    }

    if (pI2CHandle->i2c_state == I2C_DONE) {
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	7d9b      	ldrb	r3, [r3, #22]
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	d104      	bne.n	80012fa <I2C_MasterReadIT+0x126>
        pI2CHandle->i2c_state = I2C_READY;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2200      	movs	r2, #0
 80012f4:	759a      	strb	r2, [r3, #22]
        return I2C_READY;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e001      	b.n	80012fe <I2C_MasterReadIT+0x12a>
    }

    return pI2CHandle->i2c_state;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	7d9b      	ldrb	r3, [r3, #22]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <I2C_Enable>:

void I2C_Enable(I2C_RegDef_t *pI2Cx, uint8_t isEnable) {
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	70fb      	strb	r3, [r7, #3]
    if (isEnable) {
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d006      	beq.n	8001328 <I2C_Enable+0x20>
        pI2Cx->CR1 |= 1 << I2C_CR1_PE;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f043 0201 	orr.w	r2, r3, #1
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	601a      	str	r2, [r3, #0]
    } else {
        pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
    }
}
 8001326:	e005      	b.n	8001334 <I2C_Enable+0x2c>
        pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f023 0201 	bic.w	r2, r3, #1
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	601a      	str	r2, [r3, #0]
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
	...

08001340 <I2C_IRQInterruptConfig>:

void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t isEnable) {
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	460a      	mov	r2, r1
 800134a:	71fb      	strb	r3, [r7, #7]
 800134c:	4613      	mov	r3, r2
 800134e:	71bb      	strb	r3, [r7, #6]
    if (isEnable == ENABLE) {
 8001350:	79bb      	ldrb	r3, [r7, #6]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d133      	bne.n	80013be <I2C_IRQInterruptConfig+0x7e>
        if (IRQNumber <= 31) {
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	2b1f      	cmp	r3, #31
 800135a:	d80a      	bhi.n	8001372 <I2C_IRQInterruptConfig+0x32>
            // ISER0
            *NVIC_ISER0 |= (1 << IRQNumber);
 800135c:	4b34      	ldr	r3, [pc, #208]	@ (8001430 <I2C_IRQInterruptConfig+0xf0>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	79fa      	ldrb	r2, [r7, #7]
 8001362:	2101      	movs	r1, #1
 8001364:	fa01 f202 	lsl.w	r2, r1, r2
 8001368:	4611      	mov	r1, r2
 800136a:	4a31      	ldr	r2, [pc, #196]	@ (8001430 <I2C_IRQInterruptConfig+0xf0>)
 800136c:	430b      	orrs	r3, r1
 800136e:	6013      	str	r3, [r2, #0]
        } else if (IRQNumber >= 64 && IRQNumber < 96) {
            // ICER2
            *NVIC_ICER2 |= (1 << (IRQNumber % 32));
        }
    }
}
 8001370:	e059      	b.n	8001426 <I2C_IRQInterruptConfig+0xe6>
        } else if (IRQNumber > 32 && IRQNumber < 64) {
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	2b20      	cmp	r3, #32
 8001376:	d90f      	bls.n	8001398 <I2C_IRQInterruptConfig+0x58>
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	2b3f      	cmp	r3, #63	@ 0x3f
 800137c:	d80c      	bhi.n	8001398 <I2C_IRQInterruptConfig+0x58>
            *NVIC_ISER1 |= (1 << (IRQNumber % 32));
 800137e:	4b2d      	ldr	r3, [pc, #180]	@ (8001434 <I2C_IRQInterruptConfig+0xf4>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	79fa      	ldrb	r2, [r7, #7]
 8001384:	f002 021f 	and.w	r2, r2, #31
 8001388:	2101      	movs	r1, #1
 800138a:	fa01 f202 	lsl.w	r2, r1, r2
 800138e:	4611      	mov	r1, r2
 8001390:	4a28      	ldr	r2, [pc, #160]	@ (8001434 <I2C_IRQInterruptConfig+0xf4>)
 8001392:	430b      	orrs	r3, r1
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	e046      	b.n	8001426 <I2C_IRQInterruptConfig+0xe6>
        } else if (IRQNumber >= 64 && IRQNumber < 96) {
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	2b3f      	cmp	r3, #63	@ 0x3f
 800139c:	d943      	bls.n	8001426 <I2C_IRQInterruptConfig+0xe6>
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	2b5f      	cmp	r3, #95	@ 0x5f
 80013a2:	d840      	bhi.n	8001426 <I2C_IRQInterruptConfig+0xe6>
            *NVIC_ISER2 |= (1 << IRQNumber % 32);
 80013a4:	4b24      	ldr	r3, [pc, #144]	@ (8001438 <I2C_IRQInterruptConfig+0xf8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	79fa      	ldrb	r2, [r7, #7]
 80013aa:	f002 021f 	and.w	r2, r2, #31
 80013ae:	2101      	movs	r1, #1
 80013b0:	fa01 f202 	lsl.w	r2, r1, r2
 80013b4:	4611      	mov	r1, r2
 80013b6:	4a20      	ldr	r2, [pc, #128]	@ (8001438 <I2C_IRQInterruptConfig+0xf8>)
 80013b8:	430b      	orrs	r3, r1
 80013ba:	6013      	str	r3, [r2, #0]
}
 80013bc:	e033      	b.n	8001426 <I2C_IRQInterruptConfig+0xe6>
        if (IRQNumber <= 31) {
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	2b1f      	cmp	r3, #31
 80013c2:	d80a      	bhi.n	80013da <I2C_IRQInterruptConfig+0x9a>
            *NVIC_ICER0 |= (1 << IRQNumber);
 80013c4:	4b1d      	ldr	r3, [pc, #116]	@ (800143c <I2C_IRQInterruptConfig+0xfc>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	79fa      	ldrb	r2, [r7, #7]
 80013ca:	2101      	movs	r1, #1
 80013cc:	fa01 f202 	lsl.w	r2, r1, r2
 80013d0:	4611      	mov	r1, r2
 80013d2:	4a1a      	ldr	r2, [pc, #104]	@ (800143c <I2C_IRQInterruptConfig+0xfc>)
 80013d4:	430b      	orrs	r3, r1
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	e025      	b.n	8001426 <I2C_IRQInterruptConfig+0xe6>
        } else if (IRQNumber > 32 && IRQNumber < 64) {
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	2b20      	cmp	r3, #32
 80013de:	d90f      	bls.n	8001400 <I2C_IRQInterruptConfig+0xc0>
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80013e4:	d80c      	bhi.n	8001400 <I2C_IRQInterruptConfig+0xc0>
            *NVIC_ICER1 |= (1 << (IRQNumber % 32));
 80013e6:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <I2C_IRQInterruptConfig+0x100>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	79fa      	ldrb	r2, [r7, #7]
 80013ec:	f002 021f 	and.w	r2, r2, #31
 80013f0:	2101      	movs	r1, #1
 80013f2:	fa01 f202 	lsl.w	r2, r1, r2
 80013f6:	4611      	mov	r1, r2
 80013f8:	4a11      	ldr	r2, [pc, #68]	@ (8001440 <I2C_IRQInterruptConfig+0x100>)
 80013fa:	430b      	orrs	r3, r1
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e012      	b.n	8001426 <I2C_IRQInterruptConfig+0xe6>
        } else if (IRQNumber >= 64 && IRQNumber < 96) {
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	2b3f      	cmp	r3, #63	@ 0x3f
 8001404:	d90f      	bls.n	8001426 <I2C_IRQInterruptConfig+0xe6>
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	2b5f      	cmp	r3, #95	@ 0x5f
 800140a:	d80c      	bhi.n	8001426 <I2C_IRQInterruptConfig+0xe6>
            *NVIC_ICER2 |= (1 << (IRQNumber % 32));
 800140c:	4b0d      	ldr	r3, [pc, #52]	@ (8001444 <I2C_IRQInterruptConfig+0x104>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	79fa      	ldrb	r2, [r7, #7]
 8001412:	f002 021f 	and.w	r2, r2, #31
 8001416:	2101      	movs	r1, #1
 8001418:	fa01 f202 	lsl.w	r2, r1, r2
 800141c:	4611      	mov	r1, r2
 800141e:	4a09      	ldr	r2, [pc, #36]	@ (8001444 <I2C_IRQInterruptConfig+0x104>)
 8001420:	430b      	orrs	r3, r1
 8001422:	6013      	str	r3, [r2, #0]
}
 8001424:	e7ff      	b.n	8001426 <I2C_IRQInterruptConfig+0xe6>
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	e000e100 	.word	0xe000e100
 8001434:	e000e104 	.word	0xe000e104
 8001438:	e000e108 	.word	0xe000e108
 800143c:	e000e180 	.word	0xe000e180
 8001440:	e000e184 	.word	0xe000e184
 8001444:	e000e188 	.word	0xe000e188

08001448 <I2C_EV_IRQ_Handle>:
    IRQPriority = IRQPriority << NO_PR_BITS;

    *(NVIC_PR_BASE_ADDR + index) |= IRQPriority << (offset * 8);
}

void I2C_EV_IRQ_Handle(I2C_Handle_t *pI2CHandle) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
    // Process TX IQ
    uint8_t is_tx_iq = pI2CHandle->pI2Cx->CR1 & (1 << I2C_CR1_TXIE);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	73fb      	strb	r3, [r7, #15]
    uint8_t is_tx_clear = (pI2CHandle->pI2Cx->ISR & (1 << I2C_ISR_TXIS));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	73bb      	strb	r3, [r7, #14]

    if (is_tx_iq && is_tx_clear) {
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d01c      	beq.n	80014ac <I2C_EV_IRQ_Handle+0x64>
 8001472:	7bbb      	ldrb	r3, [r7, #14]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d019      	beq.n	80014ac <I2C_EV_IRQ_Handle+0x64>
        if (pI2CHandle->i2c_state == I2C_TX && pI2CHandle->tx_len > 0) {
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	7d9b      	ldrb	r3, [r3, #22]
 800147c:	2b02      	cmp	r3, #2
 800147e:	d115      	bne.n	80014ac <I2C_EV_IRQ_Handle+0x64>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	7d1b      	ldrb	r3, [r3, #20]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d011      	beq.n	80014ac <I2C_EV_IRQ_Handle+0x64>
            *((volatile uint8_t*) &pI2CHandle->pI2Cx->TXDR) = *pI2CHandle->pTxBuffer;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68da      	ldr	r2, [r3, #12]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	3328      	adds	r3, #40	@ 0x28
 8001492:	7812      	ldrb	r2, [r2, #0]
 8001494:	701a      	strb	r2, [r3, #0]
            pI2CHandle->pTxBuffer++;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	60da      	str	r2, [r3, #12]
            pI2CHandle->tx_len--;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	7d1b      	ldrb	r3, [r3, #20]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	751a      	strb	r2, [r3, #20]
        }
    }

    // Process RX IQ
    uint8_t is_rx_iq = pI2CHandle->pI2Cx->CR1 & (1 << I2C_CR1_RXIE);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	737b      	strb	r3, [r7, #13]
    uint8_t is_rx_full = (pI2CHandle->pI2Cx->ISR & (1 << I2C_ISR_RXNE));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	733b      	strb	r3, [r7, #12]

    if (is_rx_iq && is_rx_full) {
 80014c8:	7b7b      	ldrb	r3, [r7, #13]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d01c      	beq.n	8001508 <I2C_EV_IRQ_Handle+0xc0>
 80014ce:	7b3b      	ldrb	r3, [r7, #12]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d019      	beq.n	8001508 <I2C_EV_IRQ_Handle+0xc0>
        if (pI2CHandle->i2c_state == I2C_RX && pI2CHandle->rx_len > 0) {
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	7d9b      	ldrb	r3, [r3, #22]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d115      	bne.n	8001508 <I2C_EV_IRQ_Handle+0xc0>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7d5b      	ldrb	r3, [r3, #21]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d011      	beq.n	8001508 <I2C_EV_IRQ_Handle+0xc0>
            *pI2CHandle->pRxBuffer = (uint8_t) pI2CHandle->pI2Cx->RXDR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	701a      	strb	r2, [r3, #0]
            pI2CHandle->rx_len--;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	7d5b      	ldrb	r3, [r3, #21]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	755a      	strb	r2, [r3, #21]
            pI2CHandle->pRxBuffer++;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	611a      	str	r2, [r3, #16]
        }
    }

    // Process STOP
    uint8_t is_stop_ie = pI2CHandle->pI2Cx->CR1 & (1 << I2C_CR1_STOPIE);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	f003 0320 	and.w	r3, r3, #32
 8001514:	72fb      	strb	r3, [r7, #11]
    uint8_t has_stop = (pI2CHandle->pI2Cx->ISR & (1 << I2C_ISR_STOPF));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	f003 0320 	and.w	r3, r3, #32
 8001522:	72bb      	strb	r3, [r7, #10]

    if (is_stop_ie && has_stop) {
 8001524:	7afb      	ldrb	r3, [r7, #11]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d079      	beq.n	800161e <I2C_EV_IRQ_Handle+0x1d6>
 800152a:	7abb      	ldrb	r3, [r7, #10]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d076      	beq.n	800161e <I2C_EV_IRQ_Handle+0x1d6>
        if (pI2CHandle->i2c_state == I2C_RX) {
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	7d9b      	ldrb	r3, [r3, #22]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d133      	bne.n	80015a0 <I2C_EV_IRQ_Handle+0x158>
            pI2CHandle->pRxBuffer = NULL;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
            pI2CHandle->addr = 0;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	75da      	strb	r2, [r3, #23]
            pI2CHandle->i2c_state = I2C_DONE;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2203      	movs	r2, #3
 8001548:	759a      	strb	r2, [r3, #22]
            pI2CHandle->rx_len = 0;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	755a      	strb	r2, [r3, #21]
            pI2CHandle->sr = 0;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	761a      	strb	r2, [r3, #24]

            // Clear up the interupts
            pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_STOPIE);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 0220 	bic.w	r2, r2, #32
 8001564:	601a      	str	r2, [r3, #0]
            pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_RXIE);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 0204 	bic.w	r2, r2, #4
 8001574:	601a      	str	r2, [r3, #0]
            pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ERRIE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001584:	601a      	str	r2, [r3, #0]
            pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_TCIE);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001594:	601a      	str	r2, [r3, #0]

            I2C_AppEventCallback(pI2CHandle, I2C_EV_RX_COMPLETE);
 8001596:	2101      	movs	r1, #1
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff f8f7 	bl	800078c <I2C_AppEventCallback>
 800159e:	e036      	b.n	800160e <I2C_EV_IRQ_Handle+0x1c6>
        } else if (pI2CHandle->i2c_state == I2C_TX) {
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	7d9b      	ldrb	r3, [r3, #22]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d132      	bne.n	800160e <I2C_EV_IRQ_Handle+0x1c6>

            // Clear up the interupts
            pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_STOPIE);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0220 	bic.w	r2, r2, #32
 80015b6:	601a      	str	r2, [r3, #0]
            pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_TXIE);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0202 	bic.w	r2, r2, #2
 80015c6:	601a      	str	r2, [r3, #0]
            pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ERRIE);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015d6:	601a      	str	r2, [r3, #0]
            pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_TCIE);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80015e6:	601a      	str	r2, [r3, #0]

            pI2CHandle->pTxBuffer = NULL;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
            pI2CHandle->addr = 0;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	75da      	strb	r2, [r3, #23]
            pI2CHandle->i2c_state = I2C_DONE;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2203      	movs	r2, #3
 80015f8:	759a      	strb	r2, [r3, #22]
            pI2CHandle->tx_len = 0;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	751a      	strb	r2, [r3, #20]
            pI2CHandle->sr = 0;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	761a      	strb	r2, [r3, #24]

            I2C_AppEventCallback(pI2CHandle, I2C_EV_TX_COMPLETE);
 8001606:	2100      	movs	r1, #0
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff f8bf 	bl	800078c <I2C_AppEventCallback>
        }

        pI2CHandle->pI2Cx->ICR |= (1 << I2C_ICR_STOPCF);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	69da      	ldr	r2, [r3, #28]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f042 0220 	orr.w	r2, r2, #32
 800161c:	61da      	str	r2, [r3, #28]
    }

    // Process TC (Transfer complere)
    uint8_t is_tc = pI2CHandle->pI2Cx->CR1 & (1 << I2C_CR1_TCIE);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800162a:	727b      	strb	r3, [r7, #9]
    uint8_t has_tc = pI2CHandle->pI2Cx->ISR & (1 << I2C_ISR_TC);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	b2db      	uxtb	r3, r3
 8001634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001638:	723b      	strb	r3, [r7, #8]

    if (is_tc && has_tc) {
 800163a:	7a7b      	ldrb	r3, [r7, #9]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00d      	beq.n	800165c <I2C_EV_IRQ_Handle+0x214>
 8001640:	7a3b      	ldrb	r3, [r7, #8]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00a      	beq.n	800165c <I2C_EV_IRQ_Handle+0x214>
        pI2CHandle->i2c_state = I2C_DONE;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2203      	movs	r2, #3
 800164a:	759a      	strb	r2, [r3, #22]

        // XXX IT does not work with repeated starts

        // Clearing the TC
         pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_STOP);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800165a:	605a      	str	r2, [r3, #4]
    }
}
 800165c:	bf00      	nop
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <I2C_ER_IRQ_Handle>:

void I2C_ER_IRQ_Handle(I2C_Handle_t *pI2CHandle) {
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
    // XXX we should check ISR for errors, clear them and then call the app callback informing of the shenanigans
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
	...

08001678 <__libc_init_array>:
 8001678:	b570      	push	{r4, r5, r6, lr}
 800167a:	4d0d      	ldr	r5, [pc, #52]	@ (80016b0 <__libc_init_array+0x38>)
 800167c:	4c0d      	ldr	r4, [pc, #52]	@ (80016b4 <__libc_init_array+0x3c>)
 800167e:	1b64      	subs	r4, r4, r5
 8001680:	10a4      	asrs	r4, r4, #2
 8001682:	2600      	movs	r6, #0
 8001684:	42a6      	cmp	r6, r4
 8001686:	d109      	bne.n	800169c <__libc_init_array+0x24>
 8001688:	4d0b      	ldr	r5, [pc, #44]	@ (80016b8 <__libc_init_array+0x40>)
 800168a:	4c0c      	ldr	r4, [pc, #48]	@ (80016bc <__libc_init_array+0x44>)
 800168c:	f000 f818 	bl	80016c0 <_init>
 8001690:	1b64      	subs	r4, r4, r5
 8001692:	10a4      	asrs	r4, r4, #2
 8001694:	2600      	movs	r6, #0
 8001696:	42a6      	cmp	r6, r4
 8001698:	d105      	bne.n	80016a6 <__libc_init_array+0x2e>
 800169a:	bd70      	pop	{r4, r5, r6, pc}
 800169c:	f855 3b04 	ldr.w	r3, [r5], #4
 80016a0:	4798      	blx	r3
 80016a2:	3601      	adds	r6, #1
 80016a4:	e7ee      	b.n	8001684 <__libc_init_array+0xc>
 80016a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80016aa:	4798      	blx	r3
 80016ac:	3601      	adds	r6, #1
 80016ae:	e7f2      	b.n	8001696 <__libc_init_array+0x1e>
 80016b0:	080016e4 	.word	0x080016e4
 80016b4:	080016e4 	.word	0x080016e4
 80016b8:	080016e4 	.word	0x080016e4
 80016bc:	080016e8 	.word	0x080016e8

080016c0 <_init>:
 80016c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016c2:	bf00      	nop
 80016c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016c6:	bc08      	pop	{r3}
 80016c8:	469e      	mov	lr, r3
 80016ca:	4770      	bx	lr

080016cc <_fini>:
 80016cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ce:	bf00      	nop
 80016d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016d2:	bc08      	pop	{r3}
 80016d4:	469e      	mov	lr, r3
 80016d6:	4770      	bx	lr
