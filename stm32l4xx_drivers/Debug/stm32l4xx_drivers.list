
stm32l4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006e8  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800086c  08000874  00001874  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800086c  0800086c  00001874  2**0
                  CONTENTS
  4 .ARM          00000000  0800086c  0800086c  00001874  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800086c  08000874  00001874  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800086c  0800086c  0000186c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000870  08000870  00001870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001874  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00001874  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000bad  00000000  00000000  000018a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002aa  00000000  00000000  00002451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d0  00000000  00000000  00002700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000091  00000000  00000000  000027d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001634  00000000  00000000  00002861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000de9  00000000  00000000  00003e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000544d  00000000  00000000  00004c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000a0cb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000270  00000000  00000000  0000a110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0000a380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000000 	.word	0x20000000
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08000854 	.word	0x08000854

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000004 	.word	0x20000004
 80001c0:	08000854 	.word	0x08000854

080001c4 <led_button_toggle>:
            ;
    }
}

// Button is on PC13
void led_button_toggle() {
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b08a      	sub	sp, #40	@ 0x28
 80001c8:	af00      	add	r7, sp, #0
    GPIO_Handle_t led_handle = {
 80001ca:	f107 0310 	add.w	r3, r7, #16
 80001ce:	2200      	movs	r2, #0
 80001d0:	601a      	str	r2, [r3, #0]
 80001d2:	605a      	str	r2, [r3, #4]
 80001d4:	609a      	str	r2, [r3, #8]
 80001d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001da:	613b      	str	r3, [r7, #16]
 80001dc:	2305      	movs	r3, #5
 80001de:	753b      	strb	r3, [r7, #20]
 80001e0:	2301      	movs	r3, #1
 80001e2:	757b      	strb	r3, [r7, #21]
 80001e4:	2302      	movs	r3, #2
 80001e6:	75bb      	strb	r3, [r7, #22]
                .GPIO_PinPuPdControl = GPIO_NO_PUPD,
                .GPIO_PinOPType = GPIO_OP_TYPE_PP,
        }
    };

    GPIO_Handle_t button_handle = {
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	4b28      	ldr	r3, [pc, #160]	@ (8000294 <led_button_toggle+0xd0>)
 80001f4:	607b      	str	r3, [r7, #4]
 80001f6:	230d      	movs	r3, #13
 80001f8:	723b      	strb	r3, [r7, #8]
 80001fa:	2302      	movs	r3, #2
 80001fc:	72bb      	strb	r3, [r7, #10]
 80001fe:	2301      	movs	r3, #1
 8000200:	72fb      	strb	r3, [r7, #11]
                .GPIO_PinPuPdControl = GPIO_PIN_PU,
        }
    };

    // Enable clocks!
    GPIO_PCLK(GPIOA, ENABLE);
 8000202:	2101      	movs	r1, #1
 8000204:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000208:	f000 f878 	bl	80002fc <GPIO_PCLK>
    GPIO_PCLK(GPIOC, ENABLE);
 800020c:	2101      	movs	r1, #1
 800020e:	4821      	ldr	r0, [pc, #132]	@ (8000294 <led_button_toggle+0xd0>)
 8000210:	f000 f874 	bl	80002fc <GPIO_PCLK>

    // Init!
    GPIO_Init(&led_handle);
 8000214:	f107 0310 	add.w	r3, r7, #16
 8000218:	4618      	mov	r0, r3
 800021a:	f000 f93d 	bl	8000498 <GPIO_Init>
    GPIO_Init(&button_handle);
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f939 	bl	8000498 <GPIO_Init>

    uint8_t is_down = 0;
 8000226:	2300      	movs	r3, #0
 8000228:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    while (1) {
        uint8_t button_state = GPIO_ReadFromInputPin(GPIOC, button_handle.GPIO_PinConfig.GPIO_PinNumber);
 800022c:	7a3b      	ldrb	r3, [r7, #8]
 800022e:	4619      	mov	r1, r3
 8000230:	4818      	ldr	r0, [pc, #96]	@ (8000294 <led_button_toggle+0xd0>)
 8000232:	f000 fac1 	bl	80007b8 <GPIO_ReadFromInputPin>
 8000236:	4603      	mov	r3, r0
 8000238:	77fb      	strb	r3, [r7, #31]

        if (button_state == 0 && is_down == 0) {
 800023a:	7ffb      	ldrb	r3, [r7, #31]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d122      	bne.n	8000286 <led_button_toggle+0xc2>
 8000240:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000244:	2b00      	cmp	r3, #0
 8000246:	d11e      	bne.n	8000286 <led_button_toggle+0xc2>
            is_down = 1;
 8000248:	2301      	movs	r3, #1
 800024a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            // Debounce
            for (uint32_t i = 0; i < 50000; i++)
 800024e:	2300      	movs	r3, #0
 8000250:	623b      	str	r3, [r7, #32]
 8000252:	e002      	b.n	800025a <led_button_toggle+0x96>
 8000254:	6a3b      	ldr	r3, [r7, #32]
 8000256:	3301      	adds	r3, #1
 8000258:	623b      	str	r3, [r7, #32]
 800025a:	6a3b      	ldr	r3, [r7, #32]
 800025c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000260:	4293      	cmp	r3, r2
 8000262:	d9f7      	bls.n	8000254 <led_button_toggle+0x90>
                ;

            button_state = GPIO_ReadFromInputPin(GPIOC, button_handle.GPIO_PinConfig.GPIO_PinNumber);
 8000264:	7a3b      	ldrb	r3, [r7, #8]
 8000266:	4619      	mov	r1, r3
 8000268:	480a      	ldr	r0, [pc, #40]	@ (8000294 <led_button_toggle+0xd0>)
 800026a:	f000 faa5 	bl	80007b8 <GPIO_ReadFromInputPin>
 800026e:	4603      	mov	r3, r0
 8000270:	77fb      	strb	r3, [r7, #31]

            if (button_state == 0) {
 8000272:	7ffb      	ldrb	r3, [r7, #31]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d10c      	bne.n	8000292 <led_button_toggle+0xce>
                GPIO_TogglePin(GPIOA, led_handle.GPIO_PinConfig.GPIO_PinNumber);
 8000278:	7d3b      	ldrb	r3, [r7, #20]
 800027a:	4619      	mov	r1, r3
 800027c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000280:	f000 faaf 	bl	80007e2 <GPIO_TogglePin>
            if (button_state == 0) {
 8000284:	e005      	b.n	8000292 <led_button_toggle+0xce>
            }
        } else if (button_state == 1) {
 8000286:	7ffb      	ldrb	r3, [r7, #31]
 8000288:	2b01      	cmp	r3, #1
 800028a:	d1cf      	bne.n	800022c <led_button_toggle+0x68>
            is_down = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while (1) {
 8000292:	e7cb      	b.n	800022c <led_button_toggle+0x68>
 8000294:	48000800 	.word	0x48000800

08000298 <main>:
void button_it() {
    while (1) {
    }
}

int main(void) {
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
    led_button_toggle();
 800029c:	f7ff ff92 	bl	80001c4 <led_button_toggle>
 80002a0:	2300      	movs	r3, #0
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	bd80      	pop	{r7, pc}
	...

080002a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a8:	480d      	ldr	r0, [pc, #52]	@ (80002e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b0:	480c      	ldr	r0, [pc, #48]	@ (80002e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b2:	490d      	ldr	r1, [pc, #52]	@ (80002e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b4:	4a0d      	ldr	r2, [pc, #52]	@ (80002ec <LoopForever+0xe>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b8:	e002      	b.n	80002c0 <LoopCopyDataInit>

080002ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002be:	3304      	adds	r3, #4

080002c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c4:	d3f9      	bcc.n	80002ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c6:	4a0a      	ldr	r2, [pc, #40]	@ (80002f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c8:	4c0a      	ldr	r4, [pc, #40]	@ (80002f4 <LoopForever+0x16>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002cc:	e001      	b.n	80002d2 <LoopFillZerobss>

080002ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d0:	3204      	adds	r2, #4

080002d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d4:	d3fb      	bcc.n	80002ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d6:	f000 fa99 	bl	800080c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002da:	f7ff ffdd 	bl	8000298 <main>

080002de <LoopForever>:

LoopForever:
  b LoopForever
 80002de:	e7fe      	b.n	80002de <LoopForever>
  ldr   r0, =_estack
 80002e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002ec:	08000874 	.word	0x08000874
  ldr r2, =_sbss
 80002f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f4:	2000001c 	.word	0x2000001c

080002f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f8:	e7fe      	b.n	80002f8 <ADC1_2_IRQHandler>
	...

080002fc <GPIO_PCLK>:
#include "stm32l476xx_gpio_driver.h"

void GPIO_PCLK(GPIO_RegDef_t *pGPIOx, uint8_t isEnable) {
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	460b      	mov	r3, r1
 8000306:	70fb      	strb	r3, [r7, #3]
	if (isEnable == ENABLE) {
 8000308:	78fb      	ldrb	r3, [r7, #3]
 800030a:	2b01      	cmp	r3, #1
 800030c:	d157      	bne.n	80003be <GPIO_PCLK+0xc2>
		if (pGPIOx == GPIOA) {
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000314:	d106      	bne.n	8000324 <GPIO_PCLK+0x28>
			GPIOA_PCLK_EN();
 8000316:	4b58      	ldr	r3, [pc, #352]	@ (8000478 <GPIO_PCLK+0x17c>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800031a:	4a57      	ldr	r2, [pc, #348]	@ (8000478 <GPIO_PCLK+0x17c>)
 800031c:	f043 0301 	orr.w	r3, r3, #1
 8000320:	64d3      	str	r3, [r2, #76]	@ 0x4c
			GPIOG_PCLK_DI();
		} else if (pGPIOx == GPIOH) {
			GPIOH_PCLK_DI();
		}
	}
}
 8000322:	e0a3      	b.n	800046c <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOB) {
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4a55      	ldr	r2, [pc, #340]	@ (800047c <GPIO_PCLK+0x180>)
 8000328:	4293      	cmp	r3, r2
 800032a:	d106      	bne.n	800033a <GPIO_PCLK+0x3e>
			GPIOB_PCLK_EN();
 800032c:	4b52      	ldr	r3, [pc, #328]	@ (8000478 <GPIO_PCLK+0x17c>)
 800032e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000330:	4a51      	ldr	r2, [pc, #324]	@ (8000478 <GPIO_PCLK+0x17c>)
 8000332:	f043 0302 	orr.w	r3, r3, #2
 8000336:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000338:	e098      	b.n	800046c <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOC) {
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a50      	ldr	r2, [pc, #320]	@ (8000480 <GPIO_PCLK+0x184>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d106      	bne.n	8000350 <GPIO_PCLK+0x54>
			GPIOC_PCLK_EN();
 8000342:	4b4d      	ldr	r3, [pc, #308]	@ (8000478 <GPIO_PCLK+0x17c>)
 8000344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000346:	4a4c      	ldr	r2, [pc, #304]	@ (8000478 <GPIO_PCLK+0x17c>)
 8000348:	f043 0304 	orr.w	r3, r3, #4
 800034c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800034e:	e08d      	b.n	800046c <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOD) {
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4a4c      	ldr	r2, [pc, #304]	@ (8000484 <GPIO_PCLK+0x188>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d106      	bne.n	8000366 <GPIO_PCLK+0x6a>
			GPIOD_PCLK_EN();
 8000358:	4b47      	ldr	r3, [pc, #284]	@ (8000478 <GPIO_PCLK+0x17c>)
 800035a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800035c:	4a46      	ldr	r2, [pc, #280]	@ (8000478 <GPIO_PCLK+0x17c>)
 800035e:	f043 0308 	orr.w	r3, r3, #8
 8000362:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000364:	e082      	b.n	800046c <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOE) {
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4a47      	ldr	r2, [pc, #284]	@ (8000488 <GPIO_PCLK+0x18c>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d106      	bne.n	800037c <GPIO_PCLK+0x80>
			GPIOE_PCLK_EN();
 800036e:	4b42      	ldr	r3, [pc, #264]	@ (8000478 <GPIO_PCLK+0x17c>)
 8000370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000372:	4a41      	ldr	r2, [pc, #260]	@ (8000478 <GPIO_PCLK+0x17c>)
 8000374:	f043 0310 	orr.w	r3, r3, #16
 8000378:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800037a:	e077      	b.n	800046c <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOF) {
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a43      	ldr	r2, [pc, #268]	@ (800048c <GPIO_PCLK+0x190>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d106      	bne.n	8000392 <GPIO_PCLK+0x96>
			GPIOF_PCLK_EN();
 8000384:	4b3c      	ldr	r3, [pc, #240]	@ (8000478 <GPIO_PCLK+0x17c>)
 8000386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000388:	4a3b      	ldr	r2, [pc, #236]	@ (8000478 <GPIO_PCLK+0x17c>)
 800038a:	f043 0320 	orr.w	r3, r3, #32
 800038e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000390:	e06c      	b.n	800046c <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOG) {
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a3e      	ldr	r2, [pc, #248]	@ (8000490 <GPIO_PCLK+0x194>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d106      	bne.n	80003a8 <GPIO_PCLK+0xac>
			GPIOG_PCLK_EN();
 800039a:	4b37      	ldr	r3, [pc, #220]	@ (8000478 <GPIO_PCLK+0x17c>)
 800039c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800039e:	4a36      	ldr	r2, [pc, #216]	@ (8000478 <GPIO_PCLK+0x17c>)
 80003a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003a6:	e061      	b.n	800046c <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOH) {
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a3a      	ldr	r2, [pc, #232]	@ (8000494 <GPIO_PCLK+0x198>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d15d      	bne.n	800046c <GPIO_PCLK+0x170>
			GPIOH_PCLK_EN();
 80003b0:	4b31      	ldr	r3, [pc, #196]	@ (8000478 <GPIO_PCLK+0x17c>)
 80003b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003b4:	4a30      	ldr	r2, [pc, #192]	@ (8000478 <GPIO_PCLK+0x17c>)
 80003b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003bc:	e056      	b.n	800046c <GPIO_PCLK+0x170>
		if (pGPIOx == GPIOA) {
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80003c4:	d106      	bne.n	80003d4 <GPIO_PCLK+0xd8>
			GPIOA_PCLK_DI();
 80003c6:	4b2c      	ldr	r3, [pc, #176]	@ (8000478 <GPIO_PCLK+0x17c>)
 80003c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ca:	4a2b      	ldr	r2, [pc, #172]	@ (8000478 <GPIO_PCLK+0x17c>)
 80003cc:	f023 0301 	bic.w	r3, r3, #1
 80003d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003d2:	e04b      	b.n	800046c <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOB) {
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a29      	ldr	r2, [pc, #164]	@ (800047c <GPIO_PCLK+0x180>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d106      	bne.n	80003ea <GPIO_PCLK+0xee>
			GPIOB_PCLK_DI();
 80003dc:	4b26      	ldr	r3, [pc, #152]	@ (8000478 <GPIO_PCLK+0x17c>)
 80003de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003e0:	4a25      	ldr	r2, [pc, #148]	@ (8000478 <GPIO_PCLK+0x17c>)
 80003e2:	f023 0302 	bic.w	r3, r3, #2
 80003e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003e8:	e040      	b.n	800046c <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOC) {
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a24      	ldr	r2, [pc, #144]	@ (8000480 <GPIO_PCLK+0x184>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d106      	bne.n	8000400 <GPIO_PCLK+0x104>
			GPIOC_PCLK_DI();
 80003f2:	4b21      	ldr	r3, [pc, #132]	@ (8000478 <GPIO_PCLK+0x17c>)
 80003f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003f6:	4a20      	ldr	r2, [pc, #128]	@ (8000478 <GPIO_PCLK+0x17c>)
 80003f8:	f023 0304 	bic.w	r3, r3, #4
 80003fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003fe:	e035      	b.n	800046c <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOD) {
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a20      	ldr	r2, [pc, #128]	@ (8000484 <GPIO_PCLK+0x188>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d106      	bne.n	8000416 <GPIO_PCLK+0x11a>
			GPIOD_PCLK_DI();
 8000408:	4b1b      	ldr	r3, [pc, #108]	@ (8000478 <GPIO_PCLK+0x17c>)
 800040a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800040c:	4a1a      	ldr	r2, [pc, #104]	@ (8000478 <GPIO_PCLK+0x17c>)
 800040e:	f023 0308 	bic.w	r3, r3, #8
 8000412:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000414:	e02a      	b.n	800046c <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOE) {
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a1b      	ldr	r2, [pc, #108]	@ (8000488 <GPIO_PCLK+0x18c>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d106      	bne.n	800042c <GPIO_PCLK+0x130>
			GPIOE_PCLK_DI();
 800041e:	4b16      	ldr	r3, [pc, #88]	@ (8000478 <GPIO_PCLK+0x17c>)
 8000420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000422:	4a15      	ldr	r2, [pc, #84]	@ (8000478 <GPIO_PCLK+0x17c>)
 8000424:	f023 0310 	bic.w	r3, r3, #16
 8000428:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800042a:	e01f      	b.n	800046c <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOF) {
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a17      	ldr	r2, [pc, #92]	@ (800048c <GPIO_PCLK+0x190>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d106      	bne.n	8000442 <GPIO_PCLK+0x146>
			GPIOF_PCLK_DI();
 8000434:	4b10      	ldr	r3, [pc, #64]	@ (8000478 <GPIO_PCLK+0x17c>)
 8000436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000438:	4a0f      	ldr	r2, [pc, #60]	@ (8000478 <GPIO_PCLK+0x17c>)
 800043a:	f023 0320 	bic.w	r3, r3, #32
 800043e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000440:	e014      	b.n	800046c <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOG) {
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4a12      	ldr	r2, [pc, #72]	@ (8000490 <GPIO_PCLK+0x194>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d106      	bne.n	8000458 <GPIO_PCLK+0x15c>
			GPIOG_PCLK_DI();
 800044a:	4b0b      	ldr	r3, [pc, #44]	@ (8000478 <GPIO_PCLK+0x17c>)
 800044c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800044e:	4a0a      	ldr	r2, [pc, #40]	@ (8000478 <GPIO_PCLK+0x17c>)
 8000450:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000454:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000456:	e009      	b.n	800046c <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOH) {
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a0e      	ldr	r2, [pc, #56]	@ (8000494 <GPIO_PCLK+0x198>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d105      	bne.n	800046c <GPIO_PCLK+0x170>
			GPIOH_PCLK_DI();
 8000460:	4b05      	ldr	r3, [pc, #20]	@ (8000478 <GPIO_PCLK+0x17c>)
 8000462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000464:	4a04      	ldr	r2, [pc, #16]	@ (8000478 <GPIO_PCLK+0x17c>)
 8000466:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800046a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800046c:	bf00      	nop
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr
 8000478:	40021000 	.word	0x40021000
 800047c:	48000400 	.word	0x48000400
 8000480:	48000800 	.word	0x48000800
 8000484:	48000c00 	.word	0x48000c00
 8000488:	48001000 	.word	0x48001000
 800048c:	48001400 	.word	0x48001400
 8000490:	48001800 	.word	0x48001800
 8000494:	48001c00 	.word	0x48001c00

08000498 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000498:	b480      	push	{r7}
 800049a:	b091      	sub	sp, #68	@ 0x44
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	// Configure mode
	GPIO_PinConfig_t pinConfig = pGPIOHandle->GPIO_PinConfig;
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	f107 030c 	add.w	r3, r7, #12
 80004a6:	3204      	adds	r2, #4
 80004a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004ac:	6018      	str	r0, [r3, #0]
 80004ae:	3304      	adds	r3, #4
 80004b0:	8019      	strh	r1, [r3, #0]
	uint32_t mode = 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	63fb      	str	r3, [r7, #60]	@ 0x3c

	uint8_t pin_mode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	795b      	ldrb	r3, [r3, #5]
 80004ba:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t pin_number = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	791b      	ldrb	r3, [r3, #4]
 80004c2:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	// non IT
	if (pin_mode <= GPIO_MODE_ANALOG) {
 80004c6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80004ca:	2b03      	cmp	r3, #3
 80004cc:	d81d      	bhi.n	800050a <GPIO_Init+0x72>
		// Mode takes 2 bits, all go consecutively so we can do 2 * pin number
		mode = pinConfig.GPIO_PinMode << (2 * pinConfig.GPIO_PinNumber);
 80004ce:	7b7b      	ldrb	r3, [r7, #13]
 80004d0:	461a      	mov	r2, r3
 80004d2:	7b3b      	ldrb	r3, [r7, #12]
 80004d4:	005b      	lsls	r3, r3, #1
 80004d6:	fa02 f303 	lsl.w	r3, r2, r3
 80004da:	63fb      	str	r3, [r7, #60]	@ 0x3c

		// Must clear before set!
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	7b3b      	ldrb	r3, [r7, #12]
 80004e4:	005b      	lsls	r3, r3, #1
 80004e6:	2103      	movs	r1, #3
 80004e8:	fa01 f303 	lsl.w	r3, r1, r3
 80004ec:	43db      	mvns	r3, r3
 80004ee:	4619      	mov	r1, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	400a      	ands	r2, r1
 80004f6:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= mode;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	6819      	ldr	r1, [r3, #0]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000504:	430a      	orrs	r2, r1
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	e0bc      	b.n	8000684 <GPIO_Init+0x1ec>
	    // PA1, PB1 etc are connected to EXTI1
	    // ...
	    // PA15, PB15 are connected to EXTI15
	    // Lines 0-15 are for GPIO's

	    volatile uint32_t *FTSR = &EXTI->FTSR1;
 800050a:	4b9f      	ldr	r3, [pc, #636]	@ (8000788 <GPIO_Init+0x2f0>)
 800050c:	637b      	str	r3, [r7, #52]	@ 0x34
	    volatile uint32_t *RTSR = &EXTI->RTSR1;
 800050e:	4b9f      	ldr	r3, [pc, #636]	@ (800078c <GPIO_Init+0x2f4>)
 8000510:	633b      	str	r3, [r7, #48]	@ 0x30
	    volatile uint32_t *IMR = &EXTI->IMR1;
 8000512:	4b9f      	ldr	r3, [pc, #636]	@ (8000790 <GPIO_Init+0x2f8>)
 8000514:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    // GPIO => EXTI(Edge detection, interupt delivery) => NVIC(Enable and configure IRQ) => CPU
	    // IRQ - interupt request
	    // NVIC - nested vectored interupt controler
        if (pin_mode == GPIO_MODE_IR_FT) {
 8000516:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800051a:	2b04      	cmp	r3, #4
 800051c:	d115      	bne.n	800054a <GPIO_Init+0xb2>
            // Configure falling edge control register (FTSR)
            *FTSR |= (1 << pin_number);
 800051e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000526:	2101      	movs	r1, #1
 8000528:	fa01 f202 	lsl.w	r2, r1, r2
 800052c:	431a      	orrs	r2, r3
 800052e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000530:	601a      	str	r2, [r3, #0]
            *RTSR &= ~(1 << pin_number); // Reset RTSR just in case
 8000532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800053a:	2101      	movs	r1, #1
 800053c:	fa01 f202 	lsl.w	r2, r1, r2
 8000540:	43d2      	mvns	r2, r2
 8000542:	401a      	ands	r2, r3
 8000544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	e031      	b.n	80005ae <GPIO_Init+0x116>
        } else if (pin_mode == GPIO_MODE_IR_RT) {
 800054a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800054e:	2b05      	cmp	r3, #5
 8000550:	d115      	bne.n	800057e <GPIO_Init+0xe6>
            // Configure rising edge control register (RTSR)
            *RTSR |= (1 << pin_number);
 8000552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800055a:	2101      	movs	r1, #1
 800055c:	fa01 f202 	lsl.w	r2, r1, r2
 8000560:	431a      	orrs	r2, r3
 8000562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000564:	601a      	str	r2, [r3, #0]
            *FTSR &= ~(1 << pin_number); // Reset FTSR just in case
 8000566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800056e:	2101      	movs	r1, #1
 8000570:	fa01 f202 	lsl.w	r2, r1, r2
 8000574:	43d2      	mvns	r2, r2
 8000576:	401a      	ands	r2, r3
 8000578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	e017      	b.n	80005ae <GPIO_Init+0x116>
        } else if (pin_mode == GPIO_MODE_IR_RFT) {
 800057e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000582:	2b06      	cmp	r3, #6
 8000584:	d113      	bne.n	80005ae <GPIO_Init+0x116>
            // Configure both registers
            *RTSR |= (1 << pin_number);
 8000586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800058e:	2101      	movs	r1, #1
 8000590:	fa01 f202 	lsl.w	r2, r1, r2
 8000594:	431a      	orrs	r2, r3
 8000596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000598:	601a      	str	r2, [r3, #0]
            *FTSR |= (1 << pin_number);
 800059a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 80005a2:	2101      	movs	r1, #1
 80005a4:	fa01 f202 	lsl.w	r2, r1, r2
 80005a8:	431a      	orrs	r2, r3
 80005aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005ac:	601a      	str	r2, [r3, #0]
        }

        // Configure GPIO port in SYSCFG_EXTIR
        uint8_t index = pin_number / 4;
 80005ae:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80005b2:	089b      	lsrs	r3, r3, #2
 80005b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        uint8_t offset = pin_number % 4;
 80005b8:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80005bc:	f003 0303 	and.w	r3, r3, #3
 80005c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

        uint8_t portcode = GPIO_ADR_TO_CODE(pGPIOHandle->pGPIOx);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80005cc:	d032      	beq.n	8000634 <GPIO_Init+0x19c>
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a70      	ldr	r2, [pc, #448]	@ (8000794 <GPIO_Init+0x2fc>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d02b      	beq.n	8000630 <GPIO_Init+0x198>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a6e      	ldr	r2, [pc, #440]	@ (8000798 <GPIO_Init+0x300>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d024      	beq.n	800062c <GPIO_Init+0x194>
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a6d      	ldr	r2, [pc, #436]	@ (800079c <GPIO_Init+0x304>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d01d      	beq.n	8000628 <GPIO_Init+0x190>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a6b      	ldr	r2, [pc, #428]	@ (80007a0 <GPIO_Init+0x308>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d016      	beq.n	8000624 <GPIO_Init+0x18c>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a6a      	ldr	r2, [pc, #424]	@ (80007a4 <GPIO_Init+0x30c>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d00f      	beq.n	8000620 <GPIO_Init+0x188>
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a68      	ldr	r2, [pc, #416]	@ (80007a8 <GPIO_Init+0x310>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d008      	beq.n	800061c <GPIO_Init+0x184>
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a67      	ldr	r2, [pc, #412]	@ (80007ac <GPIO_Init+0x314>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d101      	bne.n	8000618 <GPIO_Init+0x180>
 8000614:	2307      	movs	r3, #7
 8000616:	e00e      	b.n	8000636 <GPIO_Init+0x19e>
 8000618:	2300      	movs	r3, #0
 800061a:	e00c      	b.n	8000636 <GPIO_Init+0x19e>
 800061c:	2306      	movs	r3, #6
 800061e:	e00a      	b.n	8000636 <GPIO_Init+0x19e>
 8000620:	2305      	movs	r3, #5
 8000622:	e008      	b.n	8000636 <GPIO_Init+0x19e>
 8000624:	2304      	movs	r3, #4
 8000626:	e006      	b.n	8000636 <GPIO_Init+0x19e>
 8000628:	2303      	movs	r3, #3
 800062a:	e004      	b.n	8000636 <GPIO_Init+0x19e>
 800062c:	2302      	movs	r3, #2
 800062e:	e002      	b.n	8000636 <GPIO_Init+0x19e>
 8000630:	2301      	movs	r3, #1
 8000632:	e000      	b.n	8000636 <GPIO_Init+0x19e>
 8000634:	2300      	movs	r3, #0
 8000636:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

        SYSCFG_PCLK_EN();
 800063a:	4b5d      	ldr	r3, [pc, #372]	@ (80007b0 <GPIO_Init+0x318>)
 800063c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800063e:	4a5c      	ldr	r2, [pc, #368]	@ (80007b0 <GPIO_Init+0x318>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6613      	str	r3, [r2, #96]	@ 0x60
        SYSCFG->EXTICR[index] |= portcode << (offset * 4);
 8000646:	4a5b      	ldr	r2, [pc, #364]	@ (80007b4 <GPIO_Init+0x31c>)
 8000648:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800064c:	3302      	adds	r3, #2
 800064e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000652:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8000656:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	fa01 f303 	lsl.w	r3, r1, r3
 8000660:	4618      	mov	r0, r3
 8000662:	4954      	ldr	r1, [pc, #336]	@ (80007b4 <GPIO_Init+0x31c>)
 8000664:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000668:	4302      	orrs	r2, r0
 800066a:	3302      	adds	r3, #2
 800066c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Enable EXTI interupt delivery using IMR (Interupt mask register)
        *IMR |= (1 << pin_number);
 8000670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000678:	2101      	movs	r1, #1
 800067a:	fa01 f202 	lsl.w	r2, r1, r2
 800067e:	431a      	orrs	r2, r3
 8000680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000682:	601a      	str	r2, [r3, #0]
	}
	// Configure speed
	uint32_t speed = pinConfig.GPIO_PinSpeed << (2 * pinConfig.GPIO_PinNumber);
 8000684:	7bbb      	ldrb	r3, [r7, #14]
 8000686:	461a      	mov	r2, r3
 8000688:	7b3b      	ldrb	r3, [r7, #12]
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	fa02 f303 	lsl.w	r3, r2, r3
 8000690:	627b      	str	r3, [r7, #36]	@ 0x24
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	689a      	ldr	r2, [r3, #8]
 8000698:	7b3b      	ldrb	r3, [r7, #12]
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	2103      	movs	r1, #3
 800069e:	fa01 f303 	lsl.w	r3, r1, r3
 80006a2:	43db      	mvns	r3, r3
 80006a4:	4619      	mov	r1, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	400a      	ands	r2, r1
 80006ac:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= speed;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	6899      	ldr	r1, [r3, #8]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006ba:	430a      	orrs	r2, r1
 80006bc:	609a      	str	r2, [r3, #8]

	// Configure pull up/down
	uint32_t pull = pinConfig.GPIO_PinPuPdControl << (2 * pinConfig.GPIO_PinNumber);
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	461a      	mov	r2, r3
 80006c2:	7b3b      	ldrb	r3, [r7, #12]
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ca:	623b      	str	r3, [r7, #32]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	68da      	ldr	r2, [r3, #12]
 80006d2:	7b3b      	ldrb	r3, [r7, #12]
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	2103      	movs	r1, #3
 80006d8:	fa01 f303 	lsl.w	r3, r1, r3
 80006dc:	43db      	mvns	r3, r3
 80006de:	4619      	mov	r1, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	400a      	ands	r2, r1
 80006e6:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= pull;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	68d9      	ldr	r1, [r3, #12]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	6a3a      	ldr	r2, [r7, #32]
 80006f4:	430a      	orrs	r2, r1
 80006f6:	60da      	str	r2, [r3, #12]

	// Configure otype, output type
	uint32_t o_type = pinConfig.GPIO_PinOPType << pinConfig.GPIO_PinNumber;
 80006f8:	7c3b      	ldrb	r3, [r7, #16]
 80006fa:	461a      	mov	r2, r3
 80006fc:	7b3b      	ldrb	r3, [r7, #12]
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIOx->OTYPER |= o_type;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	6859      	ldr	r1, [r3, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	69fa      	ldr	r2, [r7, #28]
 8000710:	430a      	orrs	r2, r1
 8000712:	605a      	str	r2, [r3, #4]

	// Configure alt function
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	795b      	ldrb	r3, [r3, #5]
 8000718:	2b02      	cmp	r3, #2
 800071a:	d12f      	bne.n	800077c <GPIO_Init+0x2e4>

		uint32_t index = pinConfig.GPIO_PinNumber / 8;
 800071c:	7b3b      	ldrb	r3, [r7, #12]
 800071e:	08db      	lsrs	r3, r3, #3
 8000720:	b2db      	uxtb	r3, r3
 8000722:	61bb      	str	r3, [r7, #24]
		uint32_t offset = pinConfig.GPIO_PinNumber % 8;
 8000724:	7b3b      	ldrb	r3, [r7, #12]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	617b      	str	r3, [r7, #20]

		pGPIOHandle->pGPIOx->AFR[index] &= ~(0xF << (4 * offset));
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	69ba      	ldr	r2, [r7, #24]
 8000732:	3208      	adds	r2, #8
 8000734:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	210f      	movs	r1, #15
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	43db      	mvns	r3, r3
 8000744:	4619      	mov	r1, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4011      	ands	r1, r2
 800074c:	69ba      	ldr	r2, [r7, #24]
 800074e:	3208      	adds	r2, #8
 8000750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[index] |= pinConfig.GPIO_PinAltFunMode << (4 * offset);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	69ba      	ldr	r2, [r7, #24]
 800075a:	3208      	adds	r2, #8
 800075c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000760:	7c7b      	ldrb	r3, [r7, #17]
 8000762:	4619      	mov	r1, r3
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	fa01 f303 	lsl.w	r3, r1, r3
 800076c:	4619      	mov	r1, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4311      	orrs	r1, r2
 8000774:	69ba      	ldr	r2, [r7, #24]
 8000776:	3208      	adds	r2, #8
 8000778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800077c:	bf00      	nop
 800077e:	3744      	adds	r7, #68	@ 0x44
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	4001040c 	.word	0x4001040c
 800078c:	40010408 	.word	0x40010408
 8000790:	40010400 	.word	0x40010400
 8000794:	48000400 	.word	0x48000400
 8000798:	48000800 	.word	0x48000800
 800079c:	48000c00 	.word	0x48000c00
 80007a0:	48001000 	.word	0x48001000
 80007a4:	48001400 	.word	0x48001400
 80007a8:	48001800 	.word	0x48001800
 80007ac:	48001c00 	.word	0x48001c00
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40010000 	.word	0x40010000

080007b8 <GPIO_ReadFromInputPin>:
	} else if (pGPIOx == GPIOH) {
		GPIOH_REG_RESET();
	}
}

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber) {
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	70fb      	strb	r3, [r7, #3]
	return (uint8_t) (pGPIOx->IDR >> pinNumber) & 0x00000001;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	691a      	ldr	r2, [r3, #16]
 80007c8:	78fb      	ldrb	r3, [r7, #3]
 80007ca:	fa22 f303 	lsr.w	r3, r2, r3
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	f003 0301 	and.w	r3, r3, #1
 80007d4:	b2db      	uxtb	r3, r3
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <GPIO_TogglePin>:

void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t value) {
	pGPIOx->ODR |= value;
}

void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber) {
 80007e2:	b480      	push	{r7}
 80007e4:	b083      	sub	sp, #12
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
 80007ea:	460b      	mov	r3, r1
 80007ec:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR = pGPIOx->ODR ^ (1 << pinNumber);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	78fa      	ldrb	r2, [r7, #3]
 80007f4:	2101      	movs	r1, #1
 80007f6:	fa01 f202 	lsl.w	r2, r1, r2
 80007fa:	405a      	eors	r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	615a      	str	r2, [r3, #20]
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <__libc_init_array>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	4d0d      	ldr	r5, [pc, #52]	@ (8000844 <__libc_init_array+0x38>)
 8000810:	4c0d      	ldr	r4, [pc, #52]	@ (8000848 <__libc_init_array+0x3c>)
 8000812:	1b64      	subs	r4, r4, r5
 8000814:	10a4      	asrs	r4, r4, #2
 8000816:	2600      	movs	r6, #0
 8000818:	42a6      	cmp	r6, r4
 800081a:	d109      	bne.n	8000830 <__libc_init_array+0x24>
 800081c:	4d0b      	ldr	r5, [pc, #44]	@ (800084c <__libc_init_array+0x40>)
 800081e:	4c0c      	ldr	r4, [pc, #48]	@ (8000850 <__libc_init_array+0x44>)
 8000820:	f000 f818 	bl	8000854 <_init>
 8000824:	1b64      	subs	r4, r4, r5
 8000826:	10a4      	asrs	r4, r4, #2
 8000828:	2600      	movs	r6, #0
 800082a:	42a6      	cmp	r6, r4
 800082c:	d105      	bne.n	800083a <__libc_init_array+0x2e>
 800082e:	bd70      	pop	{r4, r5, r6, pc}
 8000830:	f855 3b04 	ldr.w	r3, [r5], #4
 8000834:	4798      	blx	r3
 8000836:	3601      	adds	r6, #1
 8000838:	e7ee      	b.n	8000818 <__libc_init_array+0xc>
 800083a:	f855 3b04 	ldr.w	r3, [r5], #4
 800083e:	4798      	blx	r3
 8000840:	3601      	adds	r6, #1
 8000842:	e7f2      	b.n	800082a <__libc_init_array+0x1e>
 8000844:	0800086c 	.word	0x0800086c
 8000848:	0800086c 	.word	0x0800086c
 800084c:	0800086c 	.word	0x0800086c
 8000850:	08000870 	.word	0x08000870

08000854 <_init>:
 8000854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000856:	bf00      	nop
 8000858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800085a:	bc08      	pop	{r3}
 800085c:	469e      	mov	lr, r3
 800085e:	4770      	bx	lr

08000860 <_fini>:
 8000860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000862:	bf00      	nop
 8000864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000866:	bc08      	pop	{r3}
 8000868:	469e      	mov	lr, r3
 800086a:	4770      	bx	lr
