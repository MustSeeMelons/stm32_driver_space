
stm32l4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000052c  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006b0  080006b8  000016b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006b0  080006b0  000016b8  2**0
                  CONTENTS
  4 .ARM          00000000  080006b0  080006b0  000016b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006b0  080006b8  000016b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006b0  080006b0  000016b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080006b4  080006b4  000016b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000016b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  000016b8  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000009b6  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000278  00000000  00000000  0000209e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  00002318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000008b  00000000  00000000  000023e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000015fa  00000000  00000000  0000246b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c95  00000000  00000000  00003a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005284  00000000  00000000  000046fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000997e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000258  00000000  00000000  000099c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00009c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000000 	.word	0x20000000
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08000698 	.word	0x08000698

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000004 	.word	0x20000004
 80001c0:	08000698 	.word	0x08000698

080001c4 <led_button_toggle>:
            ;
    }
}

// Button is on PC13
void led_button_toggle() {
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b08a      	sub	sp, #40	@ 0x28
 80001c8:	af00      	add	r7, sp, #0
    GPIO_Handle_t led_handle = {
 80001ca:	f107 0310 	add.w	r3, r7, #16
 80001ce:	2200      	movs	r2, #0
 80001d0:	601a      	str	r2, [r3, #0]
 80001d2:	605a      	str	r2, [r3, #4]
 80001d4:	609a      	str	r2, [r3, #8]
 80001d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001da:	613b      	str	r3, [r7, #16]
 80001dc:	2305      	movs	r3, #5
 80001de:	753b      	strb	r3, [r7, #20]
 80001e0:	2301      	movs	r3, #1
 80001e2:	757b      	strb	r3, [r7, #21]
 80001e4:	2302      	movs	r3, #2
 80001e6:	75bb      	strb	r3, [r7, #22]
                .GPIO_PinPuPdControl = GPIO_NO_PUPD,
                .GPIO_PinOPType = GPIO_OP_TYPE_PP,
        }
    };

    GPIO_Handle_t button_handle = {
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	4b28      	ldr	r3, [pc, #160]	@ (8000294 <led_button_toggle+0xd0>)
 80001f4:	607b      	str	r3, [r7, #4]
 80001f6:	230d      	movs	r3, #13
 80001f8:	723b      	strb	r3, [r7, #8]
 80001fa:	2302      	movs	r3, #2
 80001fc:	72bb      	strb	r3, [r7, #10]
 80001fe:	2301      	movs	r3, #1
 8000200:	72fb      	strb	r3, [r7, #11]
                .GPIO_PinPuPdControl = GPIO_PIN_PU,
        }
    };

    // Enable clocks!
    GPIO_PCLK(GPIOA, ENABLE);
 8000202:	2101      	movs	r1, #1
 8000204:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000208:	f000 f878 	bl	80002fc <GPIO_PCLK>
    GPIO_PCLK(GPIOC, ENABLE);
 800020c:	2101      	movs	r1, #1
 800020e:	4821      	ldr	r0, [pc, #132]	@ (8000294 <led_button_toggle+0xd0>)
 8000210:	f000 f874 	bl	80002fc <GPIO_PCLK>

    // Init!
    GPIO_Init(&led_handle);
 8000214:	f107 0310 	add.w	r3, r7, #16
 8000218:	4618      	mov	r0, r3
 800021a:	f000 f93d 	bl	8000498 <GPIO_Init>
    GPIO_Init(&button_handle);
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f939 	bl	8000498 <GPIO_Init>

    uint8_t is_down = 0;
 8000226:	2300      	movs	r3, #0
 8000228:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    while (1) {
        uint8_t button_state = GPIO_ReadFromInputPin(GPIOC, button_handle.GPIO_PinConfig.GPIO_PinNumber);
 800022c:	7a3b      	ldrb	r3, [r7, #8]
 800022e:	4619      	mov	r1, r3
 8000230:	4818      	ldr	r0, [pc, #96]	@ (8000294 <led_button_toggle+0xd0>)
 8000232:	f000 f9e3 	bl	80005fc <GPIO_ReadFromInputPin>
 8000236:	4603      	mov	r3, r0
 8000238:	77fb      	strb	r3, [r7, #31]

        if (button_state == 0 && is_down == 0) {
 800023a:	7ffb      	ldrb	r3, [r7, #31]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d122      	bne.n	8000286 <led_button_toggle+0xc2>
 8000240:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000244:	2b00      	cmp	r3, #0
 8000246:	d11e      	bne.n	8000286 <led_button_toggle+0xc2>
            is_down = 1;
 8000248:	2301      	movs	r3, #1
 800024a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            // Debounce
            for (uint32_t i = 0; i < 50000; i++)
 800024e:	2300      	movs	r3, #0
 8000250:	623b      	str	r3, [r7, #32]
 8000252:	e002      	b.n	800025a <led_button_toggle+0x96>
 8000254:	6a3b      	ldr	r3, [r7, #32]
 8000256:	3301      	adds	r3, #1
 8000258:	623b      	str	r3, [r7, #32]
 800025a:	6a3b      	ldr	r3, [r7, #32]
 800025c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000260:	4293      	cmp	r3, r2
 8000262:	d9f7      	bls.n	8000254 <led_button_toggle+0x90>
                ;

            button_state = GPIO_ReadFromInputPin(GPIOC, button_handle.GPIO_PinConfig.GPIO_PinNumber);
 8000264:	7a3b      	ldrb	r3, [r7, #8]
 8000266:	4619      	mov	r1, r3
 8000268:	480a      	ldr	r0, [pc, #40]	@ (8000294 <led_button_toggle+0xd0>)
 800026a:	f000 f9c7 	bl	80005fc <GPIO_ReadFromInputPin>
 800026e:	4603      	mov	r3, r0
 8000270:	77fb      	strb	r3, [r7, #31]

            if (button_state == 0) {
 8000272:	7ffb      	ldrb	r3, [r7, #31]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d10c      	bne.n	8000292 <led_button_toggle+0xce>
                GPIO_TogglePin(GPIOA, led_handle.GPIO_PinConfig.GPIO_PinNumber);
 8000278:	7d3b      	ldrb	r3, [r7, #20]
 800027a:	4619      	mov	r1, r3
 800027c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000280:	f000 f9d1 	bl	8000626 <GPIO_TogglePin>
            if (button_state == 0) {
 8000284:	e005      	b.n	8000292 <led_button_toggle+0xce>
            }
        } else if (button_state == 1) {
 8000286:	7ffb      	ldrb	r3, [r7, #31]
 8000288:	2b01      	cmp	r3, #1
 800028a:	d1cf      	bne.n	800022c <led_button_toggle+0x68>
            is_down = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while (1) {
 8000292:	e7cb      	b.n	800022c <led_button_toggle+0x68>
 8000294:	48000800 	.word	0x48000800

08000298 <main>:
        }
    }
}

int main(void) {
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
    led_button_toggle();
 800029c:	f7ff ff92 	bl	80001c4 <led_button_toggle>
 80002a0:	2300      	movs	r3, #0
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	bd80      	pop	{r7, pc}
	...

080002a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a8:	480d      	ldr	r0, [pc, #52]	@ (80002e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b0:	480c      	ldr	r0, [pc, #48]	@ (80002e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b2:	490d      	ldr	r1, [pc, #52]	@ (80002e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b4:	4a0d      	ldr	r2, [pc, #52]	@ (80002ec <LoopForever+0xe>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b8:	e002      	b.n	80002c0 <LoopCopyDataInit>

080002ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002be:	3304      	adds	r3, #4

080002c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c4:	d3f9      	bcc.n	80002ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c6:	4a0a      	ldr	r2, [pc, #40]	@ (80002f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c8:	4c0a      	ldr	r4, [pc, #40]	@ (80002f4 <LoopForever+0x16>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002cc:	e001      	b.n	80002d2 <LoopFillZerobss>

080002ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d0:	3204      	adds	r2, #4

080002d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d4:	d3fb      	bcc.n	80002ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d6:	f000 f9bb 	bl	8000650 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002da:	f7ff ffdd 	bl	8000298 <main>

080002de <LoopForever>:

LoopForever:
  b LoopForever
 80002de:	e7fe      	b.n	80002de <LoopForever>
  ldr   r0, =_estack
 80002e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002ec:	080006b8 	.word	0x080006b8
  ldr r2, =_sbss
 80002f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f4:	2000001c 	.word	0x2000001c

080002f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f8:	e7fe      	b.n	80002f8 <ADC1_2_IRQHandler>
	...

080002fc <GPIO_PCLK>:
#include "stm32l476xx_gpio_driver.h"

void GPIO_PCLK(GPIO_RegDef_t *pGPIOx, uint8_t isEnable) {
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	460b      	mov	r3, r1
 8000306:	70fb      	strb	r3, [r7, #3]
	if (isEnable == ENABLE) {
 8000308:	78fb      	ldrb	r3, [r7, #3]
 800030a:	2b01      	cmp	r3, #1
 800030c:	d157      	bne.n	80003be <GPIO_PCLK+0xc2>
		if (pGPIOx == GPIOA) {
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000314:	d106      	bne.n	8000324 <GPIO_PCLK+0x28>
			GPIOA_PCLK_EN();
 8000316:	4b58      	ldr	r3, [pc, #352]	@ (8000478 <GPIO_PCLK+0x17c>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800031a:	4a57      	ldr	r2, [pc, #348]	@ (8000478 <GPIO_PCLK+0x17c>)
 800031c:	f043 0301 	orr.w	r3, r3, #1
 8000320:	64d3      	str	r3, [r2, #76]	@ 0x4c
			GPIOG_PCLK_DI();
		} else if (pGPIOx == GPIOH) {
			GPIOH_PCLK_DI();
		}
	}
}
 8000322:	e0a3      	b.n	800046c <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOB) {
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4a55      	ldr	r2, [pc, #340]	@ (800047c <GPIO_PCLK+0x180>)
 8000328:	4293      	cmp	r3, r2
 800032a:	d106      	bne.n	800033a <GPIO_PCLK+0x3e>
			GPIOB_PCLK_EN();
 800032c:	4b52      	ldr	r3, [pc, #328]	@ (8000478 <GPIO_PCLK+0x17c>)
 800032e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000330:	4a51      	ldr	r2, [pc, #324]	@ (8000478 <GPIO_PCLK+0x17c>)
 8000332:	f043 0302 	orr.w	r3, r3, #2
 8000336:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000338:	e098      	b.n	800046c <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOC) {
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a50      	ldr	r2, [pc, #320]	@ (8000480 <GPIO_PCLK+0x184>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d106      	bne.n	8000350 <GPIO_PCLK+0x54>
			GPIOC_PCLK_EN();
 8000342:	4b4d      	ldr	r3, [pc, #308]	@ (8000478 <GPIO_PCLK+0x17c>)
 8000344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000346:	4a4c      	ldr	r2, [pc, #304]	@ (8000478 <GPIO_PCLK+0x17c>)
 8000348:	f043 0304 	orr.w	r3, r3, #4
 800034c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800034e:	e08d      	b.n	800046c <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOD) {
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4a4c      	ldr	r2, [pc, #304]	@ (8000484 <GPIO_PCLK+0x188>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d106      	bne.n	8000366 <GPIO_PCLK+0x6a>
			GPIOD_PCLK_EN();
 8000358:	4b47      	ldr	r3, [pc, #284]	@ (8000478 <GPIO_PCLK+0x17c>)
 800035a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800035c:	4a46      	ldr	r2, [pc, #280]	@ (8000478 <GPIO_PCLK+0x17c>)
 800035e:	f043 0308 	orr.w	r3, r3, #8
 8000362:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000364:	e082      	b.n	800046c <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOE) {
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4a47      	ldr	r2, [pc, #284]	@ (8000488 <GPIO_PCLK+0x18c>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d106      	bne.n	800037c <GPIO_PCLK+0x80>
			GPIOE_PCLK_EN();
 800036e:	4b42      	ldr	r3, [pc, #264]	@ (8000478 <GPIO_PCLK+0x17c>)
 8000370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000372:	4a41      	ldr	r2, [pc, #260]	@ (8000478 <GPIO_PCLK+0x17c>)
 8000374:	f043 0310 	orr.w	r3, r3, #16
 8000378:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800037a:	e077      	b.n	800046c <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOF) {
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a43      	ldr	r2, [pc, #268]	@ (800048c <GPIO_PCLK+0x190>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d106      	bne.n	8000392 <GPIO_PCLK+0x96>
			GPIOF_PCLK_EN();
 8000384:	4b3c      	ldr	r3, [pc, #240]	@ (8000478 <GPIO_PCLK+0x17c>)
 8000386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000388:	4a3b      	ldr	r2, [pc, #236]	@ (8000478 <GPIO_PCLK+0x17c>)
 800038a:	f043 0320 	orr.w	r3, r3, #32
 800038e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000390:	e06c      	b.n	800046c <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOG) {
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a3e      	ldr	r2, [pc, #248]	@ (8000490 <GPIO_PCLK+0x194>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d106      	bne.n	80003a8 <GPIO_PCLK+0xac>
			GPIOG_PCLK_EN();
 800039a:	4b37      	ldr	r3, [pc, #220]	@ (8000478 <GPIO_PCLK+0x17c>)
 800039c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800039e:	4a36      	ldr	r2, [pc, #216]	@ (8000478 <GPIO_PCLK+0x17c>)
 80003a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003a6:	e061      	b.n	800046c <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOH) {
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a3a      	ldr	r2, [pc, #232]	@ (8000494 <GPIO_PCLK+0x198>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d15d      	bne.n	800046c <GPIO_PCLK+0x170>
			GPIOH_PCLK_EN();
 80003b0:	4b31      	ldr	r3, [pc, #196]	@ (8000478 <GPIO_PCLK+0x17c>)
 80003b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003b4:	4a30      	ldr	r2, [pc, #192]	@ (8000478 <GPIO_PCLK+0x17c>)
 80003b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003bc:	e056      	b.n	800046c <GPIO_PCLK+0x170>
		if (pGPIOx == GPIOA) {
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80003c4:	d106      	bne.n	80003d4 <GPIO_PCLK+0xd8>
			GPIOA_PCLK_DI();
 80003c6:	4b2c      	ldr	r3, [pc, #176]	@ (8000478 <GPIO_PCLK+0x17c>)
 80003c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ca:	4a2b      	ldr	r2, [pc, #172]	@ (8000478 <GPIO_PCLK+0x17c>)
 80003cc:	f023 0301 	bic.w	r3, r3, #1
 80003d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003d2:	e04b      	b.n	800046c <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOB) {
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a29      	ldr	r2, [pc, #164]	@ (800047c <GPIO_PCLK+0x180>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d106      	bne.n	80003ea <GPIO_PCLK+0xee>
			GPIOB_PCLK_DI();
 80003dc:	4b26      	ldr	r3, [pc, #152]	@ (8000478 <GPIO_PCLK+0x17c>)
 80003de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003e0:	4a25      	ldr	r2, [pc, #148]	@ (8000478 <GPIO_PCLK+0x17c>)
 80003e2:	f023 0302 	bic.w	r3, r3, #2
 80003e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003e8:	e040      	b.n	800046c <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOC) {
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a24      	ldr	r2, [pc, #144]	@ (8000480 <GPIO_PCLK+0x184>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d106      	bne.n	8000400 <GPIO_PCLK+0x104>
			GPIOC_PCLK_DI();
 80003f2:	4b21      	ldr	r3, [pc, #132]	@ (8000478 <GPIO_PCLK+0x17c>)
 80003f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003f6:	4a20      	ldr	r2, [pc, #128]	@ (8000478 <GPIO_PCLK+0x17c>)
 80003f8:	f023 0304 	bic.w	r3, r3, #4
 80003fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003fe:	e035      	b.n	800046c <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOD) {
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a20      	ldr	r2, [pc, #128]	@ (8000484 <GPIO_PCLK+0x188>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d106      	bne.n	8000416 <GPIO_PCLK+0x11a>
			GPIOD_PCLK_DI();
 8000408:	4b1b      	ldr	r3, [pc, #108]	@ (8000478 <GPIO_PCLK+0x17c>)
 800040a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800040c:	4a1a      	ldr	r2, [pc, #104]	@ (8000478 <GPIO_PCLK+0x17c>)
 800040e:	f023 0308 	bic.w	r3, r3, #8
 8000412:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000414:	e02a      	b.n	800046c <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOE) {
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a1b      	ldr	r2, [pc, #108]	@ (8000488 <GPIO_PCLK+0x18c>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d106      	bne.n	800042c <GPIO_PCLK+0x130>
			GPIOE_PCLK_DI();
 800041e:	4b16      	ldr	r3, [pc, #88]	@ (8000478 <GPIO_PCLK+0x17c>)
 8000420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000422:	4a15      	ldr	r2, [pc, #84]	@ (8000478 <GPIO_PCLK+0x17c>)
 8000424:	f023 0310 	bic.w	r3, r3, #16
 8000428:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800042a:	e01f      	b.n	800046c <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOF) {
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a17      	ldr	r2, [pc, #92]	@ (800048c <GPIO_PCLK+0x190>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d106      	bne.n	8000442 <GPIO_PCLK+0x146>
			GPIOF_PCLK_DI();
 8000434:	4b10      	ldr	r3, [pc, #64]	@ (8000478 <GPIO_PCLK+0x17c>)
 8000436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000438:	4a0f      	ldr	r2, [pc, #60]	@ (8000478 <GPIO_PCLK+0x17c>)
 800043a:	f023 0320 	bic.w	r3, r3, #32
 800043e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000440:	e014      	b.n	800046c <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOG) {
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4a12      	ldr	r2, [pc, #72]	@ (8000490 <GPIO_PCLK+0x194>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d106      	bne.n	8000458 <GPIO_PCLK+0x15c>
			GPIOG_PCLK_DI();
 800044a:	4b0b      	ldr	r3, [pc, #44]	@ (8000478 <GPIO_PCLK+0x17c>)
 800044c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800044e:	4a0a      	ldr	r2, [pc, #40]	@ (8000478 <GPIO_PCLK+0x17c>)
 8000450:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000454:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000456:	e009      	b.n	800046c <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOH) {
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a0e      	ldr	r2, [pc, #56]	@ (8000494 <GPIO_PCLK+0x198>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d105      	bne.n	800046c <GPIO_PCLK+0x170>
			GPIOH_PCLK_DI();
 8000460:	4b05      	ldr	r3, [pc, #20]	@ (8000478 <GPIO_PCLK+0x17c>)
 8000462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000464:	4a04      	ldr	r2, [pc, #16]	@ (8000478 <GPIO_PCLK+0x17c>)
 8000466:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800046a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800046c:	bf00      	nop
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr
 8000478:	40021000 	.word	0x40021000
 800047c:	48000400 	.word	0x48000400
 8000480:	48000800 	.word	0x48000800
 8000484:	48000c00 	.word	0x48000c00
 8000488:	48001000 	.word	0x48001000
 800048c:	48001400 	.word	0x48001400
 8000490:	48001800 	.word	0x48001800
 8000494:	48001c00 	.word	0x48001c00

08000498 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000498:	b480      	push	{r7}
 800049a:	b08b      	sub	sp, #44	@ 0x2c
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	// Configure mode
	GPIO_PinConfig_t pinConfig = pGPIOHandle->GPIO_PinConfig;
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	f107 0308 	add.w	r3, r7, #8
 80004a6:	3204      	adds	r2, #4
 80004a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004ac:	6018      	str	r0, [r3, #0]
 80004ae:	3304      	adds	r3, #4
 80004b0:	8019      	strh	r1, [r3, #0]
	uint32_t mode = 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	627b      	str	r3, [r7, #36]	@ 0x24

	// non IT
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	795b      	ldrb	r3, [r3, #5]
 80004ba:	2b03      	cmp	r3, #3
 80004bc:	d81c      	bhi.n	80004f8 <GPIO_Init+0x60>
		// Mode takes 2 bits, all go consecutively so we can do 2 * pin number
		mode = pinConfig.GPIO_PinMode << (2 * pinConfig.GPIO_PinNumber);
 80004be:	7a7b      	ldrb	r3, [r7, #9]
 80004c0:	461a      	mov	r2, r3
 80004c2:	7a3b      	ldrb	r3, [r7, #8]
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ca:	627b      	str	r3, [r7, #36]	@ 0x24

		// Must clear before set!
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	7a3b      	ldrb	r3, [r7, #8]
 80004d4:	005b      	lsls	r3, r3, #1
 80004d6:	2103      	movs	r1, #3
 80004d8:	fa01 f303 	lsl.w	r3, r1, r3
 80004dc:	43db      	mvns	r3, r3
 80004de:	4619      	mov	r1, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	400a      	ands	r2, r1
 80004e6:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= mode;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	6819      	ldr	r1, [r3, #0]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80004f4:	430a      	orrs	r2, r1
 80004f6:	601a      	str	r2, [r3, #0]
	} else {
		// TODO IT later
	}
	// Configure speed
	uint32_t speed = pinConfig.GPIO_PinSpeed << (2 * pinConfig.GPIO_PinNumber);
 80004f8:	7abb      	ldrb	r3, [r7, #10]
 80004fa:	461a      	mov	r2, r3
 80004fc:	7a3b      	ldrb	r3, [r7, #8]
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	fa02 f303 	lsl.w	r3, r2, r3
 8000504:	623b      	str	r3, [r7, #32]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	689a      	ldr	r2, [r3, #8]
 800050c:	7a3b      	ldrb	r3, [r7, #8]
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	2103      	movs	r1, #3
 8000512:	fa01 f303 	lsl.w	r3, r1, r3
 8000516:	43db      	mvns	r3, r3
 8000518:	4619      	mov	r1, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	400a      	ands	r2, r1
 8000520:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= speed;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	6899      	ldr	r1, [r3, #8]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	6a3a      	ldr	r2, [r7, #32]
 800052e:	430a      	orrs	r2, r1
 8000530:	609a      	str	r2, [r3, #8]

	// Configure pull up/down
	uint32_t pull = pinConfig.GPIO_PinPuPdControl << (2 * pinConfig.GPIO_PinNumber);
 8000532:	7afb      	ldrb	r3, [r7, #11]
 8000534:	461a      	mov	r2, r3
 8000536:	7a3b      	ldrb	r3, [r7, #8]
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	fa02 f303 	lsl.w	r3, r2, r3
 800053e:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	68da      	ldr	r2, [r3, #12]
 8000546:	7a3b      	ldrb	r3, [r7, #8]
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	2103      	movs	r1, #3
 800054c:	fa01 f303 	lsl.w	r3, r1, r3
 8000550:	43db      	mvns	r3, r3
 8000552:	4619      	mov	r1, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	400a      	ands	r2, r1
 800055a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= pull;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	68d9      	ldr	r1, [r3, #12]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	69fa      	ldr	r2, [r7, #28]
 8000568:	430a      	orrs	r2, r1
 800056a:	60da      	str	r2, [r3, #12]

	// Configure otype, output type
	uint32_t o_type = pinConfig.GPIO_PinOPType << pinConfig.GPIO_PinNumber;
 800056c:	7b3b      	ldrb	r3, [r7, #12]
 800056e:	461a      	mov	r2, r3
 8000570:	7a3b      	ldrb	r3, [r7, #8]
 8000572:	fa02 f303 	lsl.w	r3, r2, r3
 8000576:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->OTYPER |= o_type;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	6859      	ldr	r1, [r3, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	69ba      	ldr	r2, [r7, #24]
 8000584:	430a      	orrs	r2, r1
 8000586:	605a      	str	r2, [r3, #4]

	// Configure alt function
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	795b      	ldrb	r3, [r3, #5]
 800058c:	2b02      	cmp	r3, #2
 800058e:	d12f      	bne.n	80005f0 <GPIO_Init+0x158>

		uint32_t index = pinConfig.GPIO_PinNumber / 8;
 8000590:	7a3b      	ldrb	r3, [r7, #8]
 8000592:	08db      	lsrs	r3, r3, #3
 8000594:	b2db      	uxtb	r3, r3
 8000596:	617b      	str	r3, [r7, #20]
		uint32_t offset = pinConfig.GPIO_PinNumber % 8;
 8000598:	7a3b      	ldrb	r3, [r7, #8]
 800059a:	f003 0307 	and.w	r3, r3, #7
 800059e:	613b      	str	r3, [r7, #16]

		pGPIOHandle->pGPIOx->AFR[index] &= ~(0xF << (4 * offset));
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	697a      	ldr	r2, [r7, #20]
 80005a6:	3208      	adds	r2, #8
 80005a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005ac:	693b      	ldr	r3, [r7, #16]
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	210f      	movs	r1, #15
 80005b2:	fa01 f303 	lsl.w	r3, r1, r3
 80005b6:	43db      	mvns	r3, r3
 80005b8:	4619      	mov	r1, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4011      	ands	r1, r2
 80005c0:	697a      	ldr	r2, [r7, #20]
 80005c2:	3208      	adds	r2, #8
 80005c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[index] |= pinConfig.GPIO_PinAltFunMode << (4 * offset);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	697a      	ldr	r2, [r7, #20]
 80005ce:	3208      	adds	r2, #8
 80005d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005d4:	7b7b      	ldrb	r3, [r7, #13]
 80005d6:	4619      	mov	r1, r3
 80005d8:	693b      	ldr	r3, [r7, #16]
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	fa01 f303 	lsl.w	r3, r1, r3
 80005e0:	4619      	mov	r1, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4311      	orrs	r1, r2
 80005e8:	697a      	ldr	r2, [r7, #20]
 80005ea:	3208      	adds	r2, #8
 80005ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80005f0:	bf00      	nop
 80005f2:	372c      	adds	r7, #44	@ 0x2c
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <GPIO_ReadFromInputPin>:
	} else if (pGPIOx == GPIOH) {
		GPIOH_REG_RESET();
	}
}

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber) {
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	460b      	mov	r3, r1
 8000606:	70fb      	strb	r3, [r7, #3]
	return (uint8_t) (pGPIOx->IDR >> pinNumber) & 0x00000001;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	691a      	ldr	r2, [r3, #16]
 800060c:	78fb      	ldrb	r3, [r7, #3]
 800060e:	fa22 f303 	lsr.w	r3, r2, r3
 8000612:	b2db      	uxtb	r3, r3
 8000614:	f003 0301 	and.w	r3, r3, #1
 8000618:	b2db      	uxtb	r3, r3
}
 800061a:	4618      	mov	r0, r3
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <GPIO_TogglePin>:

void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t value) {
	pGPIOx->ODR |= value;
}

void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber) {
 8000626:	b480      	push	{r7}
 8000628:	b083      	sub	sp, #12
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
 800062e:	460b      	mov	r3, r1
 8000630:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR = pGPIOx->ODR ^ (1 << pinNumber);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	78fa      	ldrb	r2, [r7, #3]
 8000638:	2101      	movs	r1, #1
 800063a:	fa01 f202 	lsl.w	r2, r1, r2
 800063e:	405a      	eors	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	615a      	str	r2, [r3, #20]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <__libc_init_array>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	4d0d      	ldr	r5, [pc, #52]	@ (8000688 <__libc_init_array+0x38>)
 8000654:	4c0d      	ldr	r4, [pc, #52]	@ (800068c <__libc_init_array+0x3c>)
 8000656:	1b64      	subs	r4, r4, r5
 8000658:	10a4      	asrs	r4, r4, #2
 800065a:	2600      	movs	r6, #0
 800065c:	42a6      	cmp	r6, r4
 800065e:	d109      	bne.n	8000674 <__libc_init_array+0x24>
 8000660:	4d0b      	ldr	r5, [pc, #44]	@ (8000690 <__libc_init_array+0x40>)
 8000662:	4c0c      	ldr	r4, [pc, #48]	@ (8000694 <__libc_init_array+0x44>)
 8000664:	f000 f818 	bl	8000698 <_init>
 8000668:	1b64      	subs	r4, r4, r5
 800066a:	10a4      	asrs	r4, r4, #2
 800066c:	2600      	movs	r6, #0
 800066e:	42a6      	cmp	r6, r4
 8000670:	d105      	bne.n	800067e <__libc_init_array+0x2e>
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f855 3b04 	ldr.w	r3, [r5], #4
 8000678:	4798      	blx	r3
 800067a:	3601      	adds	r6, #1
 800067c:	e7ee      	b.n	800065c <__libc_init_array+0xc>
 800067e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000682:	4798      	blx	r3
 8000684:	3601      	adds	r6, #1
 8000686:	e7f2      	b.n	800066e <__libc_init_array+0x1e>
 8000688:	080006b0 	.word	0x080006b0
 800068c:	080006b0 	.word	0x080006b0
 8000690:	080006b0 	.word	0x080006b0
 8000694:	080006b4 	.word	0x080006b4

08000698 <_init>:
 8000698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800069a:	bf00      	nop
 800069c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800069e:	bc08      	pop	{r3}
 80006a0:	469e      	mov	lr, r3
 80006a2:	4770      	bx	lr

080006a4 <_fini>:
 80006a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006a6:	bf00      	nop
 80006a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006aa:	bc08      	pop	{r3}
 80006ac:	469e      	mov	lr, r3
 80006ae:	4770      	bx	lr
