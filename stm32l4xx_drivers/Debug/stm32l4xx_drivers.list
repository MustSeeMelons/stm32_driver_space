
stm32l4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001240  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080013c4  080013c4  000023c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013d0  080013d0  0000311c  2**0
                  CONTENTS
  4 .ARM          00000008  080013d0  080013d0  000023d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080013d8  080013d8  0000311c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013d8  080013d8  000023d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080013dc  080013dc  000023dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000011c  20000000  080013e0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000311c  2**0
                  CONTENTS
 10 .bss          00000020  2000011c  2000011c  0000311c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000013c  2000013c  0000311c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000311c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000173c  00000000  00000000  00003146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000496  00000000  00000000  00004882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  00004d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000113  00000000  00000000  00004e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000284e  00000000  00000000  00004fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001f23  00000000  00000000  000077f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009816  00000000  00000000  00009714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00012f2a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005fc  00000000  00000000  00012f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  0001356c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000011c 	.word	0x2000011c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080013ac 	.word	0x080013ac

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000120 	.word	0x20000120
 80001c0:	080013ac 	.word	0x080013ac

080001c4 <strlen>:
 80001c4:	4603      	mov	r3, r0
 80001c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ca:	2a00      	cmp	r2, #0
 80001cc:	d1fb      	bne.n	80001c6 <strlen+0x2>
 80001ce:	1a18      	subs	r0, r3, r0
 80001d0:	3801      	subs	r0, #1
 80001d2:	4770      	bx	lr

080001d4 <__aeabi_frsub>:
 80001d4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80001d8:	e002      	b.n	80001e0 <__addsf3>
 80001da:	bf00      	nop

080001dc <__aeabi_fsub>:
 80001dc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080001e0 <__addsf3>:
 80001e0:	0042      	lsls	r2, r0, #1
 80001e2:	bf1f      	itttt	ne
 80001e4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001e8:	ea92 0f03 	teqne	r2, r3
 80001ec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001f0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001f4:	d06a      	beq.n	80002cc <__addsf3+0xec>
 80001f6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001fa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001fe:	bfc1      	itttt	gt
 8000200:	18d2      	addgt	r2, r2, r3
 8000202:	4041      	eorgt	r1, r0
 8000204:	4048      	eorgt	r0, r1
 8000206:	4041      	eorgt	r1, r0
 8000208:	bfb8      	it	lt
 800020a:	425b      	neglt	r3, r3
 800020c:	2b19      	cmp	r3, #25
 800020e:	bf88      	it	hi
 8000210:	4770      	bxhi	lr
 8000212:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000216:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800021a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800021e:	bf18      	it	ne
 8000220:	4240      	negne	r0, r0
 8000222:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000226:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800022a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800022e:	bf18      	it	ne
 8000230:	4249      	negne	r1, r1
 8000232:	ea92 0f03 	teq	r2, r3
 8000236:	d03f      	beq.n	80002b8 <__addsf3+0xd8>
 8000238:	f1a2 0201 	sub.w	r2, r2, #1
 800023c:	fa41 fc03 	asr.w	ip, r1, r3
 8000240:	eb10 000c 	adds.w	r0, r0, ip
 8000244:	f1c3 0320 	rsb	r3, r3, #32
 8000248:	fa01 f103 	lsl.w	r1, r1, r3
 800024c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000250:	d502      	bpl.n	8000258 <__addsf3+0x78>
 8000252:	4249      	negs	r1, r1
 8000254:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000258:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800025c:	d313      	bcc.n	8000286 <__addsf3+0xa6>
 800025e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000262:	d306      	bcc.n	8000272 <__addsf3+0x92>
 8000264:	0840      	lsrs	r0, r0, #1
 8000266:	ea4f 0131 	mov.w	r1, r1, rrx
 800026a:	f102 0201 	add.w	r2, r2, #1
 800026e:	2afe      	cmp	r2, #254	@ 0xfe
 8000270:	d251      	bcs.n	8000316 <__addsf3+0x136>
 8000272:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000276:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800027a:	bf08      	it	eq
 800027c:	f020 0001 	biceq.w	r0, r0, #1
 8000280:	ea40 0003 	orr.w	r0, r0, r3
 8000284:	4770      	bx	lr
 8000286:	0049      	lsls	r1, r1, #1
 8000288:	eb40 0000 	adc.w	r0, r0, r0
 800028c:	3a01      	subs	r2, #1
 800028e:	bf28      	it	cs
 8000290:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000294:	d2ed      	bcs.n	8000272 <__addsf3+0x92>
 8000296:	fab0 fc80 	clz	ip, r0
 800029a:	f1ac 0c08 	sub.w	ip, ip, #8
 800029e:	ebb2 020c 	subs.w	r2, r2, ip
 80002a2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002a6:	bfaa      	itet	ge
 80002a8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002ac:	4252      	neglt	r2, r2
 80002ae:	4318      	orrge	r0, r3
 80002b0:	bfbc      	itt	lt
 80002b2:	40d0      	lsrlt	r0, r2
 80002b4:	4318      	orrlt	r0, r3
 80002b6:	4770      	bx	lr
 80002b8:	f092 0f00 	teq	r2, #0
 80002bc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80002c0:	bf06      	itte	eq
 80002c2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80002c6:	3201      	addeq	r2, #1
 80002c8:	3b01      	subne	r3, #1
 80002ca:	e7b5      	b.n	8000238 <__addsf3+0x58>
 80002cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002d4:	bf18      	it	ne
 80002d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002da:	d021      	beq.n	8000320 <__addsf3+0x140>
 80002dc:	ea92 0f03 	teq	r2, r3
 80002e0:	d004      	beq.n	80002ec <__addsf3+0x10c>
 80002e2:	f092 0f00 	teq	r2, #0
 80002e6:	bf08      	it	eq
 80002e8:	4608      	moveq	r0, r1
 80002ea:	4770      	bx	lr
 80002ec:	ea90 0f01 	teq	r0, r1
 80002f0:	bf1c      	itt	ne
 80002f2:	2000      	movne	r0, #0
 80002f4:	4770      	bxne	lr
 80002f6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80002fa:	d104      	bne.n	8000306 <__addsf3+0x126>
 80002fc:	0040      	lsls	r0, r0, #1
 80002fe:	bf28      	it	cs
 8000300:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000304:	4770      	bx	lr
 8000306:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800030a:	bf3c      	itt	cc
 800030c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000310:	4770      	bxcc	lr
 8000312:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000316:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800031a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800031e:	4770      	bx	lr
 8000320:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000324:	bf16      	itet	ne
 8000326:	4608      	movne	r0, r1
 8000328:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800032c:	4601      	movne	r1, r0
 800032e:	0242      	lsls	r2, r0, #9
 8000330:	bf06      	itte	eq
 8000332:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000336:	ea90 0f01 	teqeq	r0, r1
 800033a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800033e:	4770      	bx	lr

08000340 <__aeabi_ui2f>:
 8000340:	f04f 0300 	mov.w	r3, #0
 8000344:	e004      	b.n	8000350 <__aeabi_i2f+0x8>
 8000346:	bf00      	nop

08000348 <__aeabi_i2f>:
 8000348:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800034c:	bf48      	it	mi
 800034e:	4240      	negmi	r0, r0
 8000350:	ea5f 0c00 	movs.w	ip, r0
 8000354:	bf08      	it	eq
 8000356:	4770      	bxeq	lr
 8000358:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800035c:	4601      	mov	r1, r0
 800035e:	f04f 0000 	mov.w	r0, #0
 8000362:	e01c      	b.n	800039e <__aeabi_l2f+0x2a>

08000364 <__aeabi_ul2f>:
 8000364:	ea50 0201 	orrs.w	r2, r0, r1
 8000368:	bf08      	it	eq
 800036a:	4770      	bxeq	lr
 800036c:	f04f 0300 	mov.w	r3, #0
 8000370:	e00a      	b.n	8000388 <__aeabi_l2f+0x14>
 8000372:	bf00      	nop

08000374 <__aeabi_l2f>:
 8000374:	ea50 0201 	orrs.w	r2, r0, r1
 8000378:	bf08      	it	eq
 800037a:	4770      	bxeq	lr
 800037c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000380:	d502      	bpl.n	8000388 <__aeabi_l2f+0x14>
 8000382:	4240      	negs	r0, r0
 8000384:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000388:	ea5f 0c01 	movs.w	ip, r1
 800038c:	bf02      	ittt	eq
 800038e:	4684      	moveq	ip, r0
 8000390:	4601      	moveq	r1, r0
 8000392:	2000      	moveq	r0, #0
 8000394:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000398:	bf08      	it	eq
 800039a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800039e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80003a2:	fabc f28c 	clz	r2, ip
 80003a6:	3a08      	subs	r2, #8
 80003a8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003ac:	db10      	blt.n	80003d0 <__aeabi_l2f+0x5c>
 80003ae:	fa01 fc02 	lsl.w	ip, r1, r2
 80003b2:	4463      	add	r3, ip
 80003b4:	fa00 fc02 	lsl.w	ip, r0, r2
 80003b8:	f1c2 0220 	rsb	r2, r2, #32
 80003bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c0:	fa20 f202 	lsr.w	r2, r0, r2
 80003c4:	eb43 0002 	adc.w	r0, r3, r2
 80003c8:	bf08      	it	eq
 80003ca:	f020 0001 	biceq.w	r0, r0, #1
 80003ce:	4770      	bx	lr
 80003d0:	f102 0220 	add.w	r2, r2, #32
 80003d4:	fa01 fc02 	lsl.w	ip, r1, r2
 80003d8:	f1c2 0220 	rsb	r2, r2, #32
 80003dc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003e0:	fa21 f202 	lsr.w	r2, r1, r2
 80003e4:	eb43 0002 	adc.w	r0, r3, r2
 80003e8:	bf08      	it	eq
 80003ea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_fmul>:
 80003f0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80003f4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003f8:	bf1e      	ittt	ne
 80003fa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003fe:	ea92 0f0c 	teqne	r2, ip
 8000402:	ea93 0f0c 	teqne	r3, ip
 8000406:	d06f      	beq.n	80004e8 <__aeabi_fmul+0xf8>
 8000408:	441a      	add	r2, r3
 800040a:	ea80 0c01 	eor.w	ip, r0, r1
 800040e:	0240      	lsls	r0, r0, #9
 8000410:	bf18      	it	ne
 8000412:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000416:	d01e      	beq.n	8000456 <__aeabi_fmul+0x66>
 8000418:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800041c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000420:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000424:	fba0 3101 	umull	r3, r1, r0, r1
 8000428:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800042c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000430:	bf3e      	ittt	cc
 8000432:	0049      	lslcc	r1, r1, #1
 8000434:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000438:	005b      	lslcc	r3, r3, #1
 800043a:	ea40 0001 	orr.w	r0, r0, r1
 800043e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000442:	2afd      	cmp	r2, #253	@ 0xfd
 8000444:	d81d      	bhi.n	8000482 <__aeabi_fmul+0x92>
 8000446:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800044a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800044e:	bf08      	it	eq
 8000450:	f020 0001 	biceq.w	r0, r0, #1
 8000454:	4770      	bx	lr
 8000456:	f090 0f00 	teq	r0, #0
 800045a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800045e:	bf08      	it	eq
 8000460:	0249      	lsleq	r1, r1, #9
 8000462:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000466:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800046a:	3a7f      	subs	r2, #127	@ 0x7f
 800046c:	bfc2      	ittt	gt
 800046e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000472:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000476:	4770      	bxgt	lr
 8000478:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800047c:	f04f 0300 	mov.w	r3, #0
 8000480:	3a01      	subs	r2, #1
 8000482:	dc5d      	bgt.n	8000540 <__aeabi_fmul+0x150>
 8000484:	f112 0f19 	cmn.w	r2, #25
 8000488:	bfdc      	itt	le
 800048a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800048e:	4770      	bxle	lr
 8000490:	f1c2 0200 	rsb	r2, r2, #0
 8000494:	0041      	lsls	r1, r0, #1
 8000496:	fa21 f102 	lsr.w	r1, r1, r2
 800049a:	f1c2 0220 	rsb	r2, r2, #32
 800049e:	fa00 fc02 	lsl.w	ip, r0, r2
 80004a2:	ea5f 0031 	movs.w	r0, r1, rrx
 80004a6:	f140 0000 	adc.w	r0, r0, #0
 80004aa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004ae:	bf08      	it	eq
 80004b0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004b4:	4770      	bx	lr
 80004b6:	f092 0f00 	teq	r2, #0
 80004ba:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80004be:	bf02      	ittt	eq
 80004c0:	0040      	lsleq	r0, r0, #1
 80004c2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80004c6:	3a01      	subeq	r2, #1
 80004c8:	d0f9      	beq.n	80004be <__aeabi_fmul+0xce>
 80004ca:	ea40 000c 	orr.w	r0, r0, ip
 80004ce:	f093 0f00 	teq	r3, #0
 80004d2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80004d6:	bf02      	ittt	eq
 80004d8:	0049      	lsleq	r1, r1, #1
 80004da:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80004de:	3b01      	subeq	r3, #1
 80004e0:	d0f9      	beq.n	80004d6 <__aeabi_fmul+0xe6>
 80004e2:	ea41 010c 	orr.w	r1, r1, ip
 80004e6:	e78f      	b.n	8000408 <__aeabi_fmul+0x18>
 80004e8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004ec:	ea92 0f0c 	teq	r2, ip
 80004f0:	bf18      	it	ne
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d00a      	beq.n	800050e <__aeabi_fmul+0x11e>
 80004f8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80004fc:	bf18      	it	ne
 80004fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000502:	d1d8      	bne.n	80004b6 <__aeabi_fmul+0xc6>
 8000504:	ea80 0001 	eor.w	r0, r0, r1
 8000508:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800050c:	4770      	bx	lr
 800050e:	f090 0f00 	teq	r0, #0
 8000512:	bf17      	itett	ne
 8000514:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000518:	4608      	moveq	r0, r1
 800051a:	f091 0f00 	teqne	r1, #0
 800051e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000522:	d014      	beq.n	800054e <__aeabi_fmul+0x15e>
 8000524:	ea92 0f0c 	teq	r2, ip
 8000528:	d101      	bne.n	800052e <__aeabi_fmul+0x13e>
 800052a:	0242      	lsls	r2, r0, #9
 800052c:	d10f      	bne.n	800054e <__aeabi_fmul+0x15e>
 800052e:	ea93 0f0c 	teq	r3, ip
 8000532:	d103      	bne.n	800053c <__aeabi_fmul+0x14c>
 8000534:	024b      	lsls	r3, r1, #9
 8000536:	bf18      	it	ne
 8000538:	4608      	movne	r0, r1
 800053a:	d108      	bne.n	800054e <__aeabi_fmul+0x15e>
 800053c:	ea80 0001 	eor.w	r0, r0, r1
 8000540:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000544:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000548:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800054c:	4770      	bx	lr
 800054e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000552:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000556:	4770      	bx	lr

08000558 <__aeabi_fdiv>:
 8000558:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000560:	bf1e      	ittt	ne
 8000562:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000566:	ea92 0f0c 	teqne	r2, ip
 800056a:	ea93 0f0c 	teqne	r3, ip
 800056e:	d069      	beq.n	8000644 <__aeabi_fdiv+0xec>
 8000570:	eba2 0203 	sub.w	r2, r2, r3
 8000574:	ea80 0c01 	eor.w	ip, r0, r1
 8000578:	0249      	lsls	r1, r1, #9
 800057a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800057e:	d037      	beq.n	80005f0 <__aeabi_fdiv+0x98>
 8000580:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000584:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000588:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800058c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000590:	428b      	cmp	r3, r1
 8000592:	bf38      	it	cc
 8000594:	005b      	lslcc	r3, r3, #1
 8000596:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800059a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800059e:	428b      	cmp	r3, r1
 80005a0:	bf24      	itt	cs
 80005a2:	1a5b      	subcs	r3, r3, r1
 80005a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80005a8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005ac:	bf24      	itt	cs
 80005ae:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80005b2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80005b6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80005ba:	bf24      	itt	cs
 80005bc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80005c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80005c4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80005c8:	bf24      	itt	cs
 80005ca:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80005ce:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80005d2:	011b      	lsls	r3, r3, #4
 80005d4:	bf18      	it	ne
 80005d6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80005da:	d1e0      	bne.n	800059e <__aeabi_fdiv+0x46>
 80005dc:	2afd      	cmp	r2, #253	@ 0xfd
 80005de:	f63f af50 	bhi.w	8000482 <__aeabi_fmul+0x92>
 80005e2:	428b      	cmp	r3, r1
 80005e4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005e8:	bf08      	it	eq
 80005ea:	f020 0001 	biceq.w	r0, r0, #1
 80005ee:	4770      	bx	lr
 80005f0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80005f4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005f8:	327f      	adds	r2, #127	@ 0x7f
 80005fa:	bfc2      	ittt	gt
 80005fc:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000600:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000604:	4770      	bxgt	lr
 8000606:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800060a:	f04f 0300 	mov.w	r3, #0
 800060e:	3a01      	subs	r2, #1
 8000610:	e737      	b.n	8000482 <__aeabi_fmul+0x92>
 8000612:	f092 0f00 	teq	r2, #0
 8000616:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800061a:	bf02      	ittt	eq
 800061c:	0040      	lsleq	r0, r0, #1
 800061e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000622:	3a01      	subeq	r2, #1
 8000624:	d0f9      	beq.n	800061a <__aeabi_fdiv+0xc2>
 8000626:	ea40 000c 	orr.w	r0, r0, ip
 800062a:	f093 0f00 	teq	r3, #0
 800062e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000632:	bf02      	ittt	eq
 8000634:	0049      	lsleq	r1, r1, #1
 8000636:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800063a:	3b01      	subeq	r3, #1
 800063c:	d0f9      	beq.n	8000632 <__aeabi_fdiv+0xda>
 800063e:	ea41 010c 	orr.w	r1, r1, ip
 8000642:	e795      	b.n	8000570 <__aeabi_fdiv+0x18>
 8000644:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000648:	ea92 0f0c 	teq	r2, ip
 800064c:	d108      	bne.n	8000660 <__aeabi_fdiv+0x108>
 800064e:	0242      	lsls	r2, r0, #9
 8000650:	f47f af7d 	bne.w	800054e <__aeabi_fmul+0x15e>
 8000654:	ea93 0f0c 	teq	r3, ip
 8000658:	f47f af70 	bne.w	800053c <__aeabi_fmul+0x14c>
 800065c:	4608      	mov	r0, r1
 800065e:	e776      	b.n	800054e <__aeabi_fmul+0x15e>
 8000660:	ea93 0f0c 	teq	r3, ip
 8000664:	d104      	bne.n	8000670 <__aeabi_fdiv+0x118>
 8000666:	024b      	lsls	r3, r1, #9
 8000668:	f43f af4c 	beq.w	8000504 <__aeabi_fmul+0x114>
 800066c:	4608      	mov	r0, r1
 800066e:	e76e      	b.n	800054e <__aeabi_fmul+0x15e>
 8000670:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000674:	bf18      	it	ne
 8000676:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800067a:	d1ca      	bne.n	8000612 <__aeabi_fdiv+0xba>
 800067c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000680:	f47f af5c 	bne.w	800053c <__aeabi_fmul+0x14c>
 8000684:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000688:	f47f af3c 	bne.w	8000504 <__aeabi_fmul+0x114>
 800068c:	e75f      	b.n	800054e <__aeabi_fmul+0x15e>
 800068e:	bf00      	nop

08000690 <__aeabi_f2uiz>:
 8000690:	0042      	lsls	r2, r0, #1
 8000692:	d20e      	bcs.n	80006b2 <__aeabi_f2uiz+0x22>
 8000694:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000698:	d30b      	bcc.n	80006b2 <__aeabi_f2uiz+0x22>
 800069a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800069e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80006a2:	d409      	bmi.n	80006b8 <__aeabi_f2uiz+0x28>
 80006a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80006a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80006ac:	fa23 f002 	lsr.w	r0, r3, r2
 80006b0:	4770      	bx	lr
 80006b2:	f04f 0000 	mov.w	r0, #0
 80006b6:	4770      	bx	lr
 80006b8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80006bc:	d101      	bne.n	80006c2 <__aeabi_f2uiz+0x32>
 80006be:	0242      	lsls	r2, r0, #9
 80006c0:	d102      	bne.n	80006c8 <__aeabi_f2uiz+0x38>
 80006c2:	f04f 30ff 	mov.w	r0, #4294967295
 80006c6:	4770      	bx	lr
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop

080006d0 <I2C_GPIO_Setup>:
void delay(uint32_t time) {
    for (uint32_t i = 0; i < time; i++)
        ;
}

void I2C_GPIO_Setup() {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
    // White wire
    GPIO_Handle_t i2c_handle = {
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	4b16      	ldr	r3, [pc, #88]	@ (800073c <I2C_GPIO_Setup+0x6c>)
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	2302      	movs	r3, #2
 80006e8:	747b      	strb	r3, [r7, #17]
 80006ea:	2302      	movs	r3, #2
 80006ec:	74bb      	strb	r3, [r7, #18]
 80006ee:	2301      	movs	r3, #1
 80006f0:	753b      	strb	r3, [r7, #20]
 80006f2:	2304      	movs	r3, #4
 80006f4:	757b      	strb	r3, [r7, #21]
            .GPIO_PinOPType = GPIO_OP_TYPE_OD,
            .GPIO_PinAltFunMode = GPIO_AF_4
        }
    };

    GPIO_PCLK(GPIOB, ENABLE);
 80006f6:	2101      	movs	r1, #1
 80006f8:	4810      	ldr	r0, [pc, #64]	@ (800073c <I2C_GPIO_Setup+0x6c>)
 80006fa:	f000 f905 	bl	8000908 <GPIO_PCLK>

    // SCL
    i2c_handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_N6;
 80006fe:	2306      	movs	r3, #6
 8000700:	743b      	strb	r3, [r7, #16]
    GPIO_Init(&i2c_handle);
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	4618      	mov	r0, r3
 8000708:	f000 f9cc 	bl	8000aa4 <GPIO_Init>

    // SDA
    i2c_handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_N7;
 800070c:	2307      	movs	r3, #7
 800070e:	743b      	strb	r3, [r7, #16]
    GPIO_Init(&i2c_handle);
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	4618      	mov	r0, r3
 8000716:	f000 f9c5 	bl	8000aa4 <GPIO_Init>

    GPIO_Handle_t btn_handle = {
 800071a:	4a09      	ldr	r2, [pc, #36]	@ (8000740 <I2C_GPIO_Setup+0x70>)
 800071c:	463b      	mov	r3, r7
 800071e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000720:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            .GPIO_PinOPType = GPIO_OP_TYPE_PP,
            .GPIO_PinAltFunMode = 0
        }
    };

    GPIO_PCLK(GPIOC, ENABLE);
 8000724:	2101      	movs	r1, #1
 8000726:	4807      	ldr	r0, [pc, #28]	@ (8000744 <I2C_GPIO_Setup+0x74>)
 8000728:	f000 f8ee 	bl	8000908 <GPIO_PCLK>

    GPIO_Init(&btn_handle);
 800072c:	463b      	mov	r3, r7
 800072e:	4618      	mov	r0, r3
 8000730:	f000 f9b8 	bl	8000aa4 <GPIO_Init>
}
 8000734:	bf00      	nop
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	48000400 	.word	0x48000400
 8000740:	080013c4 	.word	0x080013c4
 8000744:	48000800 	.word	0x48000800

08000748 <I2C_Setup>:

void I2C_Setup() {
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
    I2C_PCLK(handle.pI2Cx, ENABLE);
 800074c:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <I2C_Setup+0x28>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2101      	movs	r1, #1
 8000752:	4618      	mov	r0, r3
 8000754:	f000 fb5e 	bl	8000e14 <I2C_PCLK>

    I2C_Init(&handle);
 8000758:	4805      	ldr	r0, [pc, #20]	@ (8000770 <I2C_Setup+0x28>)
 800075a:	f000 fb8f 	bl	8000e7c <I2C_Init>

    I2C_Enable(handle.pI2Cx, ENABLE);
 800075e:	4b04      	ldr	r3, [pc, #16]	@ (8000770 <I2C_Setup+0x28>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2101      	movs	r1, #1
 8000764:	4618      	mov	r0, r3
 8000766:	f000 fcaf 	bl	80010c8 <I2C_Enable>
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000100 	.word	0x20000100

08000774 <I2C_AppEventCallback>:

void I2C_AppEventCallback(I2C_Handle_t *pHandle, uint8_t event) {
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	70fb      	strb	r3, [r7, #3]

}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr
	...

0800078c <main>:

int main() {
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
    I2C_GPIO_Setup();
 8000792:	f7ff ff9d 	bl	80006d0 <I2C_GPIO_Setup>

    I2C_Setup();
 8000796:	f7ff ffd7 	bl	8000748 <I2C_Setup>

    while (1) {
        // Wait for address match, or setup ADDRIE
        while ((handle.pI2Cx->ISR & (1 << I2C_ISR_ADDR)) == 0)
 800079a:	bf00      	nop
 800079c:	4b38      	ldr	r3, [pc, #224]	@ (8000880 <main+0xf4>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	f003 0308 	and.w	r3, r3, #8
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d0f8      	beq.n	800079c <main+0x10>
            ;

        // Should we write or read from the bus
        uint8_t transfer_direction = (handle.pI2Cx->ISR >> I2C_ISR_DIR) & 0x1;
 80007aa:	4b35      	ldr	r3, [pc, #212]	@ (8000880 <main+0xf4>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	0c1b      	lsrs	r3, r3, #16
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	71fb      	strb	r3, [r7, #7]
        // uint8_t add_code = (handle.pI2Cx->ISR >> I2C_ISR_ADDCODE) & 0x7F;

        // If we should read, then it is the command
        if (transfer_direction == 1) {
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d10e      	bne.n	80007de <main+0x52>
            while (((handle.pI2Cx->ISR >> I2C_ISR_RXNE) & 0x1) == 0)
 80007c0:	bf00      	nop
 80007c2:	4b2f      	ldr	r3, [pc, #188]	@ (8000880 <main+0xf4>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f003 0304 	and.w	r3, r3, #4
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d0f8      	beq.n	80007c2 <main+0x36>
                ;

            command = I2C_SlaverRead(&handle);
 80007d0:	482b      	ldr	r0, [pc, #172]	@ (8000880 <main+0xf4>)
 80007d2:	f000 fdba 	bl	800134a <I2C_SlaverRead>
 80007d6:	4603      	mov	r3, r0
 80007d8:	461a      	mov	r2, r3
 80007da:	4b2a      	ldr	r3, [pc, #168]	@ (8000884 <main+0xf8>)
 80007dc:	701a      	strb	r2, [r3, #0]
            // Technically we should continue the loop, but doing so
            // fails to get ADDR on the data lenght read, SCL stetched on read
        }

        // Clear flag
        handle.pI2Cx->ICR |= (1 << I2C_ICR_ADDRCF);
 80007de:	4b28      	ldr	r3, [pc, #160]	@ (8000880 <main+0xf4>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	69da      	ldr	r2, [r3, #28]
 80007e4:	4b26      	ldr	r3, [pc, #152]	@ (8000880 <main+0xf4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f042 0208 	orr.w	r2, r2, #8
 80007ec:	61da      	str	r2, [r3, #28]

        // Flush transmit buffer
        handle.pI2Cx->ISR |= (1 << I2C_ISR_TXE);
 80007ee:	4b24      	ldr	r3, [pc, #144]	@ (8000880 <main+0xf4>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	699a      	ldr	r2, [r3, #24]
 80007f4:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <main+0xf4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f042 0201 	orr.w	r2, r2, #1
 80007fc:	619a      	str	r2, [r3, #24]

        switch (command) {
 80007fe:	4b21      	ldr	r3, [pc, #132]	@ (8000884 <main+0xf8>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b51      	cmp	r3, #81	@ 0x51
 8000804:	d002      	beq.n	800080c <main+0x80>
 8000806:	2b52      	cmp	r3, #82	@ 0x52
 8000808:	d015      	beq.n	8000836 <main+0xaa>
                }

                command = 0x0;
                break;
            default:
                break;
 800080a:	e037      	b.n	800087c <main+0xf0>
                while (((handle.pI2Cx->ISR >> I2C_ISR_TXIS) & 0x1) == 0)
 800080c:	bf00      	nop
 800080e:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <main+0xf4>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0302 	and.w	r3, r3, #2
 8000818:	2b00      	cmp	r3, #0
 800081a:	d0f8      	beq.n	800080e <main+0x82>
                I2C_SlaveWrite(&handle, strlen((char*) data));
 800081c:	481a      	ldr	r0, [pc, #104]	@ (8000888 <main+0xfc>)
 800081e:	f7ff fcd1 	bl	80001c4 <strlen>
 8000822:	4603      	mov	r3, r0
 8000824:	b2db      	uxtb	r3, r3
 8000826:	4619      	mov	r1, r3
 8000828:	4815      	ldr	r0, [pc, #84]	@ (8000880 <main+0xf4>)
 800082a:	f000 fd7f 	bl	800132c <I2C_SlaveWrite>
                command = 0x0;
 800082e:	4b15      	ldr	r3, [pc, #84]	@ (8000884 <main+0xf8>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
                break;
 8000834:	e022      	b.n	800087c <main+0xf0>
                uint8_t size = strlen((char*) data);
 8000836:	4814      	ldr	r0, [pc, #80]	@ (8000888 <main+0xfc>)
 8000838:	f7ff fcc4 	bl	80001c4 <strlen>
 800083c:	4603      	mov	r3, r0
 800083e:	73fb      	strb	r3, [r7, #15]
                uint8_t *pData = data;
 8000840:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <main+0xfc>)
 8000842:	60bb      	str	r3, [r7, #8]
                while (size > 0) {
 8000844:	e013      	b.n	800086e <main+0xe2>
                    while (((handle.pI2Cx->ISR >> I2C_ISR_TXIS) & 0x1) == 0)
 8000846:	bf00      	nop
 8000848:	4b0d      	ldr	r3, [pc, #52]	@ (8000880 <main+0xf4>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0f8      	beq.n	8000848 <main+0xbc>
                    I2C_SlaveWrite(&handle, (uint8_t)*pData);
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	4619      	mov	r1, r3
 800085c:	4808      	ldr	r0, [pc, #32]	@ (8000880 <main+0xf4>)
 800085e:	f000 fd65 	bl	800132c <I2C_SlaveWrite>
                    pData++;
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	3301      	adds	r3, #1
 8000866:	60bb      	str	r3, [r7, #8]
                    size--;
 8000868:	7bfb      	ldrb	r3, [r7, #15]
 800086a:	3b01      	subs	r3, #1
 800086c:	73fb      	strb	r3, [r7, #15]
                while (size > 0) {
 800086e:	7bfb      	ldrb	r3, [r7, #15]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d1e8      	bne.n	8000846 <main+0xba>
                command = 0x0;
 8000874:	4b03      	ldr	r3, [pc, #12]	@ (8000884 <main+0xf8>)
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
                break;
 800087a:	bf00      	nop
    while (1) {
 800087c:	e78d      	b.n	800079a <main+0xe>
 800087e:	bf00      	nop
 8000880:	20000100 	.word	0x20000100
 8000884:	20000138 	.word	0x20000138
 8000888:	20000000 	.word	0x20000000

0800088c <I2C1_EV_IRQHandler>:
    }

    return 0;
}

void I2C1_EV_IRQHandler(void) {
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
    I2C_EV_IRQ_Handle(&handle);
 8000890:	4802      	ldr	r0, [pc, #8]	@ (800089c <I2C1_EV_IRQHandler+0x10>)
 8000892:	f000 fc34 	bl	80010fe <I2C_EV_IRQ_Handle>
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000100 	.word	0x20000100

080008a0 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
    I2C_ER_IRQ_Handle(&handle);
 80008a4:	4802      	ldr	r0, [pc, #8]	@ (80008b0 <I2C1_ER_IRQHandler+0x10>)
 80008a6:	f000 fd38 	bl	800131a <I2C_ER_IRQ_Handle>
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000100 	.word	0x20000100

080008b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008b4:	480d      	ldr	r0, [pc, #52]	@ (80008ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008bc:	480c      	ldr	r0, [pc, #48]	@ (80008f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80008be:	490d      	ldr	r1, [pc, #52]	@ (80008f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008c0:	4a0d      	ldr	r2, [pc, #52]	@ (80008f8 <LoopForever+0xe>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c4:	e002      	b.n	80008cc <LoopCopyDataInit>

080008c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ca:	3304      	adds	r3, #4

080008cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d0:	d3f9      	bcc.n	80008c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008d2:	4a0a      	ldr	r2, [pc, #40]	@ (80008fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80008d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000900 <LoopForever+0x16>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d8:	e001      	b.n	80008de <LoopFillZerobss>

080008da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008dc:	3204      	adds	r2, #4

080008de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e0:	d3fb      	bcc.n	80008da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008e2:	f000 fd3f 	bl	8001364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008e6:	f7ff ff51 	bl	800078c <main>

080008ea <LoopForever>:

LoopForever:
  b LoopForever
 80008ea:	e7fe      	b.n	80008ea <LoopForever>
  ldr   r0, =_estack
 80008ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f4:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 80008f8:	080013e0 	.word	0x080013e0
  ldr r2, =_sbss
 80008fc:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 8000900:	2000013c 	.word	0x2000013c

08000904 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000904:	e7fe      	b.n	8000904 <ADC1_2_IRQHandler>
	...

08000908 <GPIO_PCLK>:
#include "stm32l476xx_gpio_driver.h"

void GPIO_PCLK(GPIO_RegDef_t *pGPIOx, uint8_t isEnable) {
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	460b      	mov	r3, r1
 8000912:	70fb      	strb	r3, [r7, #3]
	if (isEnable == ENABLE) {
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d157      	bne.n	80009ca <GPIO_PCLK+0xc2>
		if (pGPIOx == GPIOA) {
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000920:	d106      	bne.n	8000930 <GPIO_PCLK+0x28>
			GPIOA_PCLK_EN();
 8000922:	4b58      	ldr	r3, [pc, #352]	@ (8000a84 <GPIO_PCLK+0x17c>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	4a57      	ldr	r2, [pc, #348]	@ (8000a84 <GPIO_PCLK+0x17c>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	64d3      	str	r3, [r2, #76]	@ 0x4c
			GPIOG_PCLK_DI();
		} else if (pGPIOx == GPIOH) {
			GPIOH_PCLK_DI();
		}
	}
}
 800092e:	e0a3      	b.n	8000a78 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOB) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a55      	ldr	r2, [pc, #340]	@ (8000a88 <GPIO_PCLK+0x180>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d106      	bne.n	8000946 <GPIO_PCLK+0x3e>
			GPIOB_PCLK_EN();
 8000938:	4b52      	ldr	r3, [pc, #328]	@ (8000a84 <GPIO_PCLK+0x17c>)
 800093a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093c:	4a51      	ldr	r2, [pc, #324]	@ (8000a84 <GPIO_PCLK+0x17c>)
 800093e:	f043 0302 	orr.w	r3, r3, #2
 8000942:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000944:	e098      	b.n	8000a78 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOC) {
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a50      	ldr	r2, [pc, #320]	@ (8000a8c <GPIO_PCLK+0x184>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d106      	bne.n	800095c <GPIO_PCLK+0x54>
			GPIOC_PCLK_EN();
 800094e:	4b4d      	ldr	r3, [pc, #308]	@ (8000a84 <GPIO_PCLK+0x17c>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000952:	4a4c      	ldr	r2, [pc, #304]	@ (8000a84 <GPIO_PCLK+0x17c>)
 8000954:	f043 0304 	orr.w	r3, r3, #4
 8000958:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800095a:	e08d      	b.n	8000a78 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOD) {
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a4c      	ldr	r2, [pc, #304]	@ (8000a90 <GPIO_PCLK+0x188>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d106      	bne.n	8000972 <GPIO_PCLK+0x6a>
			GPIOD_PCLK_EN();
 8000964:	4b47      	ldr	r3, [pc, #284]	@ (8000a84 <GPIO_PCLK+0x17c>)
 8000966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000968:	4a46      	ldr	r2, [pc, #280]	@ (8000a84 <GPIO_PCLK+0x17c>)
 800096a:	f043 0308 	orr.w	r3, r3, #8
 800096e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000970:	e082      	b.n	8000a78 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOE) {
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a47      	ldr	r2, [pc, #284]	@ (8000a94 <GPIO_PCLK+0x18c>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d106      	bne.n	8000988 <GPIO_PCLK+0x80>
			GPIOE_PCLK_EN();
 800097a:	4b42      	ldr	r3, [pc, #264]	@ (8000a84 <GPIO_PCLK+0x17c>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097e:	4a41      	ldr	r2, [pc, #260]	@ (8000a84 <GPIO_PCLK+0x17c>)
 8000980:	f043 0310 	orr.w	r3, r3, #16
 8000984:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000986:	e077      	b.n	8000a78 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOF) {
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a43      	ldr	r2, [pc, #268]	@ (8000a98 <GPIO_PCLK+0x190>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d106      	bne.n	800099e <GPIO_PCLK+0x96>
			GPIOF_PCLK_EN();
 8000990:	4b3c      	ldr	r3, [pc, #240]	@ (8000a84 <GPIO_PCLK+0x17c>)
 8000992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000994:	4a3b      	ldr	r2, [pc, #236]	@ (8000a84 <GPIO_PCLK+0x17c>)
 8000996:	f043 0320 	orr.w	r3, r3, #32
 800099a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800099c:	e06c      	b.n	8000a78 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOG) {
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a3e      	ldr	r2, [pc, #248]	@ (8000a9c <GPIO_PCLK+0x194>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d106      	bne.n	80009b4 <GPIO_PCLK+0xac>
			GPIOG_PCLK_EN();
 80009a6:	4b37      	ldr	r3, [pc, #220]	@ (8000a84 <GPIO_PCLK+0x17c>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	4a36      	ldr	r2, [pc, #216]	@ (8000a84 <GPIO_PCLK+0x17c>)
 80009ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80009b2:	e061      	b.n	8000a78 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOH) {
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a3a      	ldr	r2, [pc, #232]	@ (8000aa0 <GPIO_PCLK+0x198>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d15d      	bne.n	8000a78 <GPIO_PCLK+0x170>
			GPIOH_PCLK_EN();
 80009bc:	4b31      	ldr	r3, [pc, #196]	@ (8000a84 <GPIO_PCLK+0x17c>)
 80009be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c0:	4a30      	ldr	r2, [pc, #192]	@ (8000a84 <GPIO_PCLK+0x17c>)
 80009c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80009c8:	e056      	b.n	8000a78 <GPIO_PCLK+0x170>
		if (pGPIOx == GPIOA) {
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80009d0:	d106      	bne.n	80009e0 <GPIO_PCLK+0xd8>
			GPIOA_PCLK_DI();
 80009d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000a84 <GPIO_PCLK+0x17c>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d6:	4a2b      	ldr	r2, [pc, #172]	@ (8000a84 <GPIO_PCLK+0x17c>)
 80009d8:	f023 0301 	bic.w	r3, r3, #1
 80009dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80009de:	e04b      	b.n	8000a78 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOB) {
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a29      	ldr	r2, [pc, #164]	@ (8000a88 <GPIO_PCLK+0x180>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d106      	bne.n	80009f6 <GPIO_PCLK+0xee>
			GPIOB_PCLK_DI();
 80009e8:	4b26      	ldr	r3, [pc, #152]	@ (8000a84 <GPIO_PCLK+0x17c>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ec:	4a25      	ldr	r2, [pc, #148]	@ (8000a84 <GPIO_PCLK+0x17c>)
 80009ee:	f023 0302 	bic.w	r3, r3, #2
 80009f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80009f4:	e040      	b.n	8000a78 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOC) {
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a24      	ldr	r2, [pc, #144]	@ (8000a8c <GPIO_PCLK+0x184>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d106      	bne.n	8000a0c <GPIO_PCLK+0x104>
			GPIOC_PCLK_DI();
 80009fe:	4b21      	ldr	r3, [pc, #132]	@ (8000a84 <GPIO_PCLK+0x17c>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a02:	4a20      	ldr	r2, [pc, #128]	@ (8000a84 <GPIO_PCLK+0x17c>)
 8000a04:	f023 0304 	bic.w	r3, r3, #4
 8000a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000a0a:	e035      	b.n	8000a78 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOD) {
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a20      	ldr	r2, [pc, #128]	@ (8000a90 <GPIO_PCLK+0x188>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d106      	bne.n	8000a22 <GPIO_PCLK+0x11a>
			GPIOD_PCLK_DI();
 8000a14:	4b1b      	ldr	r3, [pc, #108]	@ (8000a84 <GPIO_PCLK+0x17c>)
 8000a16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a18:	4a1a      	ldr	r2, [pc, #104]	@ (8000a84 <GPIO_PCLK+0x17c>)
 8000a1a:	f023 0308 	bic.w	r3, r3, #8
 8000a1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000a20:	e02a      	b.n	8000a78 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOE) {
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a1b      	ldr	r2, [pc, #108]	@ (8000a94 <GPIO_PCLK+0x18c>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d106      	bne.n	8000a38 <GPIO_PCLK+0x130>
			GPIOE_PCLK_DI();
 8000a2a:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <GPIO_PCLK+0x17c>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2e:	4a15      	ldr	r2, [pc, #84]	@ (8000a84 <GPIO_PCLK+0x17c>)
 8000a30:	f023 0310 	bic.w	r3, r3, #16
 8000a34:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000a36:	e01f      	b.n	8000a78 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOF) {
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a17      	ldr	r2, [pc, #92]	@ (8000a98 <GPIO_PCLK+0x190>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d106      	bne.n	8000a4e <GPIO_PCLK+0x146>
			GPIOF_PCLK_DI();
 8000a40:	4b10      	ldr	r3, [pc, #64]	@ (8000a84 <GPIO_PCLK+0x17c>)
 8000a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a44:	4a0f      	ldr	r2, [pc, #60]	@ (8000a84 <GPIO_PCLK+0x17c>)
 8000a46:	f023 0320 	bic.w	r3, r3, #32
 8000a4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000a4c:	e014      	b.n	8000a78 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOG) {
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a12      	ldr	r2, [pc, #72]	@ (8000a9c <GPIO_PCLK+0x194>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d106      	bne.n	8000a64 <GPIO_PCLK+0x15c>
			GPIOG_PCLK_DI();
 8000a56:	4b0b      	ldr	r3, [pc, #44]	@ (8000a84 <GPIO_PCLK+0x17c>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a84 <GPIO_PCLK+0x17c>)
 8000a5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000a60:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000a62:	e009      	b.n	8000a78 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOH) {
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa0 <GPIO_PCLK+0x198>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d105      	bne.n	8000a78 <GPIO_PCLK+0x170>
			GPIOH_PCLK_DI();
 8000a6c:	4b05      	ldr	r3, [pc, #20]	@ (8000a84 <GPIO_PCLK+0x17c>)
 8000a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a70:	4a04      	ldr	r2, [pc, #16]	@ (8000a84 <GPIO_PCLK+0x17c>)
 8000a72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000a76:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000
 8000a88:	48000400 	.word	0x48000400
 8000a8c:	48000800 	.word	0x48000800
 8000a90:	48000c00 	.word	0x48000c00
 8000a94:	48001000 	.word	0x48001000
 8000a98:	48001400 	.word	0x48001400
 8000a9c:	48001800 	.word	0x48001800
 8000aa0:	48001c00 	.word	0x48001c00

08000aa4 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000aa4:	b480      	push	{r7}
 8000aa6:	b091      	sub	sp, #68	@ 0x44
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	// Configure mode
	GPIO_PinConfig_t pinConfig = pGPIOHandle->GPIO_PinConfig;
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	3204      	adds	r2, #4
 8000ab4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ab8:	6018      	str	r0, [r3, #0]
 8000aba:	3304      	adds	r3, #4
 8000abc:	8019      	strh	r1, [r3, #0]
	uint32_t mode = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c

	uint8_t pin_mode = pinConfig.GPIO_PinMode;
 8000ac2:	7b7b      	ldrb	r3, [r7, #13]
 8000ac4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t pin_number = pinConfig.GPIO_PinNumber;
 8000ac8:	7b3b      	ldrb	r3, [r7, #12]
 8000aca:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	// non IT
	if (pin_mode <= GPIO_MODE_ANALOG) {
 8000ace:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000ad2:	2b03      	cmp	r3, #3
 8000ad4:	d81d      	bhi.n	8000b12 <GPIO_Init+0x6e>
		// Mode takes 2 bits, all go consecutively so we can do 2 * pin number
		mode = pinConfig.GPIO_PinMode << (2 * pinConfig.GPIO_PinNumber);
 8000ad6:	7b7b      	ldrb	r3, [r7, #13]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	7b3b      	ldrb	r3, [r7, #12]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c

		// Must clear before set!
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	7b3b      	ldrb	r3, [r7, #12]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	2103      	movs	r1, #3
 8000af0:	fa01 f303 	lsl.w	r3, r1, r3
 8000af4:	43db      	mvns	r3, r3
 8000af6:	4619      	mov	r1, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	400a      	ands	r2, r1
 8000afe:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= mode;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	6819      	ldr	r1, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	e0e6      	b.n	8000ce0 <GPIO_Init+0x23c>
	} else {
	    // On reset mode will be analog, mode cant be analog for IT to work
        pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	7b3b      	ldrb	r3, [r7, #12]
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	2103      	movs	r1, #3
 8000b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b22:	43db      	mvns	r3, r3
 8000b24:	4619      	mov	r1, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	400a      	ands	r2, r1
 8000b2c:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= GPIO_MODE_INPUT;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	6812      	ldr	r2, [r2, #0]
 8000b38:	601a      	str	r2, [r3, #0]
	    // PA1, PB1 etc are connected to EXTI1
	    // ...
	    // PA15, PB15 are connected to EXTI15
	    // Lines 0-15 are for GPIO's

	    volatile uint32_t *FTSR = &EXTI->FTSR1;
 8000b3a:	4baa      	ldr	r3, [pc, #680]	@ (8000de4 <GPIO_Init+0x340>)
 8000b3c:	637b      	str	r3, [r7, #52]	@ 0x34
	    volatile uint32_t *RTSR = &EXTI->RTSR1;
 8000b3e:	4baa      	ldr	r3, [pc, #680]	@ (8000de8 <GPIO_Init+0x344>)
 8000b40:	633b      	str	r3, [r7, #48]	@ 0x30
	    volatile uint32_t *IMR = &EXTI->IMR1;
 8000b42:	4baa      	ldr	r3, [pc, #680]	@ (8000dec <GPIO_Init+0x348>)
 8000b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    // GPIO => EXTI(Edge detection, interupt delivery) => NVIC(Enable and configure IRQ) => CPU
	    // IRQ - interupt request
	    // NVIC - nested vectored interupt controler
        if (pin_mode == GPIO_MODE_IR_FT) {
 8000b46:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	d115      	bne.n	8000b7a <GPIO_Init+0xd6>
            // Configure falling edge control register (FTSR)
            *FTSR |= (1 << pin_number);
 8000b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000b56:	2101      	movs	r1, #1
 8000b58:	fa01 f202 	lsl.w	r2, r1, r2
 8000b5c:	431a      	orrs	r2, r3
 8000b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b60:	601a      	str	r2, [r3, #0]
            *RTSR &= ~(1 << pin_number); // Reset RTSR just in case
 8000b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b70:	43d2      	mvns	r2, r2
 8000b72:	401a      	ands	r2, r3
 8000b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	e031      	b.n	8000bde <GPIO_Init+0x13a>
        } else if (pin_mode == GPIO_MODE_IR_RT) {
 8000b7a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000b7e:	2b05      	cmp	r3, #5
 8000b80:	d115      	bne.n	8000bae <GPIO_Init+0x10a>
            // Configure rising edge control register (RTSR)
            *RTSR |= (1 << pin_number);
 8000b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b90:	431a      	orrs	r2, r3
 8000b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b94:	601a      	str	r2, [r3, #0]
            *FTSR &= ~(1 << pin_number); // Reset FTSR just in case
 8000b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba4:	43d2      	mvns	r2, r2
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	e017      	b.n	8000bde <GPIO_Init+0x13a>
        } else if (pin_mode == GPIO_MODE_IR_RFT) {
 8000bae:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000bb2:	2b06      	cmp	r3, #6
 8000bb4:	d113      	bne.n	8000bde <GPIO_Init+0x13a>
            // Configure both registers
            *RTSR |= (1 << pin_number);
 8000bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bc8:	601a      	str	r2, [r3, #0]
            *FTSR |= (1 << pin_number);
 8000bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd8:	431a      	orrs	r2, r3
 8000bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bdc:	601a      	str	r2, [r3, #0]
        }

        // Configure GPIO port in SYSCFG_EXTIR
        uint8_t index = pin_number / 4;
 8000bde:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000be2:	089b      	lsrs	r3, r3, #2
 8000be4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        uint8_t offset = pin_number % 4;
 8000be8:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000bec:	f003 0303 	and.w	r3, r3, #3
 8000bf0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

        uint8_t portcode = GPIO_ADR_TO_CODE(pGPIOHandle->pGPIOx);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000bfc:	d032      	beq.n	8000c64 <GPIO_Init+0x1c0>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a7b      	ldr	r2, [pc, #492]	@ (8000df0 <GPIO_Init+0x34c>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d02b      	beq.n	8000c60 <GPIO_Init+0x1bc>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a79      	ldr	r2, [pc, #484]	@ (8000df4 <GPIO_Init+0x350>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d024      	beq.n	8000c5c <GPIO_Init+0x1b8>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a78      	ldr	r2, [pc, #480]	@ (8000df8 <GPIO_Init+0x354>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d01d      	beq.n	8000c58 <GPIO_Init+0x1b4>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a76      	ldr	r2, [pc, #472]	@ (8000dfc <GPIO_Init+0x358>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d016      	beq.n	8000c54 <GPIO_Init+0x1b0>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a75      	ldr	r2, [pc, #468]	@ (8000e00 <GPIO_Init+0x35c>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d00f      	beq.n	8000c50 <GPIO_Init+0x1ac>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a73      	ldr	r2, [pc, #460]	@ (8000e04 <GPIO_Init+0x360>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d008      	beq.n	8000c4c <GPIO_Init+0x1a8>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a72      	ldr	r2, [pc, #456]	@ (8000e08 <GPIO_Init+0x364>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d101      	bne.n	8000c48 <GPIO_Init+0x1a4>
 8000c44:	2307      	movs	r3, #7
 8000c46:	e00e      	b.n	8000c66 <GPIO_Init+0x1c2>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	e00c      	b.n	8000c66 <GPIO_Init+0x1c2>
 8000c4c:	2306      	movs	r3, #6
 8000c4e:	e00a      	b.n	8000c66 <GPIO_Init+0x1c2>
 8000c50:	2305      	movs	r3, #5
 8000c52:	e008      	b.n	8000c66 <GPIO_Init+0x1c2>
 8000c54:	2304      	movs	r3, #4
 8000c56:	e006      	b.n	8000c66 <GPIO_Init+0x1c2>
 8000c58:	2303      	movs	r3, #3
 8000c5a:	e004      	b.n	8000c66 <GPIO_Init+0x1c2>
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	e002      	b.n	8000c66 <GPIO_Init+0x1c2>
 8000c60:	2301      	movs	r3, #1
 8000c62:	e000      	b.n	8000c66 <GPIO_Init+0x1c2>
 8000c64:	2300      	movs	r3, #0
 8000c66:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

        SYSCFG_PCLK_EN();
 8000c6a:	4b68      	ldr	r3, [pc, #416]	@ (8000e0c <GPIO_Init+0x368>)
 8000c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c6e:	4a67      	ldr	r2, [pc, #412]	@ (8000e0c <GPIO_Init+0x368>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6613      	str	r3, [r2, #96]	@ 0x60
        SYSCFG->EXTICR[index] &= ~(portcode << (offset * 4));
 8000c76:	4a66      	ldr	r2, [pc, #408]	@ (8000e10 <GPIO_Init+0x36c>)
 8000c78:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000c7c:	3302      	adds	r3, #2
 8000c7e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c82:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8000c86:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	495e      	ldr	r1, [pc, #376]	@ (8000e10 <GPIO_Init+0x36c>)
 8000c96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000c9a:	4002      	ands	r2, r0
 8000c9c:	3302      	adds	r3, #2
 8000c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        SYSCFG->EXTICR[index] |= portcode << (offset * 4);
 8000ca2:	4a5b      	ldr	r2, [pc, #364]	@ (8000e10 <GPIO_Init+0x36c>)
 8000ca4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000ca8:	3302      	adds	r3, #2
 8000caa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cae:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8000cb2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	4954      	ldr	r1, [pc, #336]	@ (8000e10 <GPIO_Init+0x36c>)
 8000cc0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000cc4:	4302      	orrs	r2, r0
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Enable EXTI interupt delivery using IMR (Interupt mask register)
        *IMR |= (1 << pin_number);
 8000ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cda:	431a      	orrs	r2, r3
 8000cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cde:	601a      	str	r2, [r3, #0]
	}
	// Configure speed
	uint32_t speed = pinConfig.GPIO_PinSpeed << (2 * pinConfig.GPIO_PinNumber);
 8000ce0:	7bbb      	ldrb	r3, [r7, #14]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	7b3b      	ldrb	r3, [r7, #12]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	7b3b      	ldrb	r3, [r7, #12]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	2103      	movs	r1, #3
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	4619      	mov	r1, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	400a      	ands	r2, r1
 8000d08:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= speed;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	6899      	ldr	r1, [r3, #8]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d16:	430a      	orrs	r2, r1
 8000d18:	609a      	str	r2, [r3, #8]

	// Configure pull up/down
	uint32_t pull = pinConfig.GPIO_PinPuPdControl << (2 * pinConfig.GPIO_PinNumber);
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	7b3b      	ldrb	r3, [r7, #12]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	623b      	str	r3, [r7, #32]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	68da      	ldr	r2, [r3, #12]
 8000d2e:	7b3b      	ldrb	r3, [r7, #12]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	2103      	movs	r1, #3
 8000d34:	fa01 f303 	lsl.w	r3, r1, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	400a      	ands	r2, r1
 8000d42:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= pull;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	68d9      	ldr	r1, [r3, #12]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	6a3a      	ldr	r2, [r7, #32]
 8000d50:	430a      	orrs	r2, r1
 8000d52:	60da      	str	r2, [r3, #12]

	// Configure otype, output type
	uint32_t o_type = pinConfig.GPIO_PinOPType << pinConfig.GPIO_PinNumber;
 8000d54:	7c3b      	ldrb	r3, [r7, #16]
 8000d56:	461a      	mov	r2, r3
 8000d58:	7b3b      	ldrb	r3, [r7, #12]
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIOx->OTYPER |= o_type;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6859      	ldr	r1, [r3, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	69fa      	ldr	r2, [r7, #28]
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	605a      	str	r2, [r3, #4]

	// Configure alt function
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	795b      	ldrb	r3, [r3, #5]
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d12f      	bne.n	8000dd8 <GPIO_Init+0x334>

		uint32_t index = pinConfig.GPIO_PinNumber / 8;
 8000d78:	7b3b      	ldrb	r3, [r7, #12]
 8000d7a:	08db      	lsrs	r3, r3, #3
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	61bb      	str	r3, [r7, #24]
		uint32_t offset = pinConfig.GPIO_PinNumber % 8;
 8000d80:	7b3b      	ldrb	r3, [r7, #12]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	617b      	str	r3, [r7, #20]

		pGPIOHandle->pGPIOx->AFR[index] &= ~(0xF << (4 * offset));
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	3208      	adds	r2, #8
 8000d90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	210f      	movs	r1, #15
 8000d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	4619      	mov	r1, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4011      	ands	r1, r2
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	3208      	adds	r2, #8
 8000dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[index] |= pinConfig.GPIO_PinAltFunMode << (4 * offset);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	3208      	adds	r2, #8
 8000db8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000dbc:	7c7b      	ldrb	r3, [r7, #17]
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc8:	4619      	mov	r1, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4311      	orrs	r1, r2
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	3208      	adds	r2, #8
 8000dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000dd8:	bf00      	nop
 8000dda:	3744      	adds	r7, #68	@ 0x44
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	4001040c 	.word	0x4001040c
 8000de8:	40010408 	.word	0x40010408
 8000dec:	40010400 	.word	0x40010400
 8000df0:	48000400 	.word	0x48000400
 8000df4:	48000800 	.word	0x48000800
 8000df8:	48000c00 	.word	0x48000c00
 8000dfc:	48001000 	.word	0x48001000
 8000e00:	48001400 	.word	0x48001400
 8000e04:	48001800 	.word	0x48001800
 8000e08:	48001c00 	.word	0x48001c00
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40010000 	.word	0x40010000

08000e14 <I2C_PCLK>:
#include "stm32l4xx_i2c_driver.h"

void I2C_PCLK(I2C_RegDef_t *pI2Cx, uint8_t isEnable) {
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	70fb      	strb	r3, [r7, #3]
    if (pI2Cx == I2C1) {
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a12      	ldr	r2, [pc, #72]	@ (8000e6c <I2C_PCLK+0x58>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d106      	bne.n	8000e36 <I2C_PCLK+0x22>
        I2C1_PCLK_EN();
 8000e28:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <I2C_PCLK+0x5c>)
 8000e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e2c:	4a10      	ldr	r2, [pc, #64]	@ (8000e70 <I2C_PCLK+0x5c>)
 8000e2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e32:	6593      	str	r3, [r2, #88]	@ 0x58
    } else if (pI2Cx == I2C2) {
        I2C2_PCLK_EN();
    } else if (pI2Cx == I2C3) {
        I2C3_PCLK_EN();
    }
}
 8000e34:	e014      	b.n	8000e60 <I2C_PCLK+0x4c>
    } else if (pI2Cx == I2C2) {
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a0e      	ldr	r2, [pc, #56]	@ (8000e74 <I2C_PCLK+0x60>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d106      	bne.n	8000e4c <I2C_PCLK+0x38>
        I2C2_PCLK_EN();
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <I2C_PCLK+0x5c>)
 8000e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e42:	4a0b      	ldr	r2, [pc, #44]	@ (8000e70 <I2C_PCLK+0x5c>)
 8000e44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e48:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000e4a:	e009      	b.n	8000e60 <I2C_PCLK+0x4c>
    } else if (pI2Cx == I2C3) {
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <I2C_PCLK+0x64>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d105      	bne.n	8000e60 <I2C_PCLK+0x4c>
        I2C3_PCLK_EN();
 8000e54:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <I2C_PCLK+0x5c>)
 8000e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e58:	4a05      	ldr	r2, [pc, #20]	@ (8000e70 <I2C_PCLK+0x5c>)
 8000e5a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e5e:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40005400 	.word	0x40005400
 8000e70:	40021000 	.word	0x40021000
 8000e74:	40005800 	.word	0x40005800
 8000e78:	40005c00 	.word	0x40005c00

08000e7c <I2C_Init>:

// XXX Note: MSI 4 Mhz as SYSCLK is the reset value
void I2C_Init(I2C_Handle_t *pI2CHandle) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	@ 0x28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
    // XXX We need 16 Mhz for this to all to work for now
    // XXX It is a side effect, should be commented as such and seperate function created
    RCC->CR |= (1 << RCC_CR_MSIRGSEL);
 8000e84:	4b88      	ldr	r3, [pc, #544]	@ (80010a8 <I2C_Init+0x22c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a87      	ldr	r2, [pc, #540]	@ (80010a8 <I2C_Init+0x22c>)
 8000e8a:	f043 0308 	orr.w	r3, r3, #8
 8000e8e:	6013      	str	r3, [r2, #0]

    // Set 16 Mhz
    RCC->CR &= ~(0xF << RCC_CR_MSIRANGE);
 8000e90:	4b85      	ldr	r3, [pc, #532]	@ (80010a8 <I2C_Init+0x22c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a84      	ldr	r2, [pc, #528]	@ (80010a8 <I2C_Init+0x22c>)
 8000e96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000e9a:	6013      	str	r3, [r2, #0]
    RCC->CR |= (RCC_CR_MSIRANGE_16M << RCC_CR_MSIRANGE);
 8000e9c:	4b82      	ldr	r3, [pc, #520]	@ (80010a8 <I2C_Init+0x22c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a81      	ldr	r2, [pc, #516]	@ (80010a8 <I2C_Init+0x22c>)
 8000ea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ea6:	6013      	str	r3, [r2, #0]

    I2C_Config_t config = pI2CHandle->I2C_Config;
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	3204      	adds	r2, #4
 8000eb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eb4:	e883 0003 	stmia.w	r3, {r0, r1}

    // These values are from DS timing examples
    uint8_t sda_del = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t scl_del = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    // XXX We could check RCC->SW for clock source.
    // XXX Afterward process MSI possibilities ans HSI16. And propably PLL as well.
    float tick_period = (float)1 / 16000000UL;
 8000ec4:	4b79      	ldr	r3, [pc, #484]	@ (80010ac <I2C_Init+0x230>)
 8000ec6:	61fb      	str	r3, [r7, #28]
    float i2c_period = 0;
 8000ec8:	f04f 0300 	mov.w	r3, #0
 8000ecc:	623b      	str	r3, [r7, #32]

    // Set prescaler to DIV2
    pI2CHandle->pI2Cx->TIMINGR &= ~(0x7 << I2C_TIMINGR_PRESC);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	691a      	ldr	r2, [r3, #16]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f022 42e0 	bic.w	r2, r2, #1879048192	@ 0x70000000
 8000edc:	611a      	str	r2, [r3, #16]
    pI2CHandle->pI2Cx->TIMINGR |= (1 << I2C_TIMINGR_PRESC);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	691a      	ldr	r2, [r3, #16]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000eec:	611a      	str	r2, [r3, #16]

    // Must set SCLH and SCLL bits in TIMINGR for master clock config
    if (config.I2C_SCLSpeed == I2C_SCL_SPEED_SM) {
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4a6f      	ldr	r2, [pc, #444]	@ (80010b0 <I2C_Init+0x234>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d108      	bne.n	8000f08 <I2C_Init+0x8c>
        sda_del = 0x2;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        scl_del = 0x4;
 8000efc:	2304      	movs	r3, #4
 8000efe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        i2c_period = (float) 1 / 100000UL;
 8000f02:	4b6c      	ldr	r3, [pc, #432]	@ (80010b4 <I2C_Init+0x238>)
 8000f04:	623b      	str	r3, [r7, #32]
 8000f06:	e018      	b.n	8000f3a <I2C_Init+0xbe>
    } else if (config.I2C_SCLSpeed == I2C_SCL_SPEED_FM2K) {
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4a6b      	ldr	r2, [pc, #428]	@ (80010b8 <I2C_Init+0x23c>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d108      	bne.n	8000f22 <I2C_Init+0xa6>
        sda_del = 0x2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        scl_del = 0x3;
 8000f16:	2303      	movs	r3, #3
 8000f18:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        i2c_period = (float) 1 / 200000UL;
 8000f1c:	4b67      	ldr	r3, [pc, #412]	@ (80010bc <I2C_Init+0x240>)
 8000f1e:	623b      	str	r3, [r7, #32]
 8000f20:	e00b      	b.n	8000f3a <I2C_Init+0xbe>
    } else if (config.I2C_SCLSpeed == I2C_SCL_SPEED_FM4K) {
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	4a66      	ldr	r2, [pc, #408]	@ (80010c0 <I2C_Init+0x244>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d107      	bne.n	8000f3a <I2C_Init+0xbe>
        sda_del = 0x1;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        scl_del = 0x3;
 8000f30:	2303      	movs	r3, #3
 8000f32:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        i2c_period = (float) 1 / 400000UL;
 8000f36:	4b63      	ldr	r3, [pc, #396]	@ (80010c4 <I2C_Init+0x248>)
 8000f38:	623b      	str	r3, [r7, #32]
    } else {
        // TODO do a crash
    }

    // Calculate clock high/low time
    float half_period = i2c_period / 2;
 8000f3a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000f3e:	6a38      	ldr	r0, [r7, #32]
 8000f40:	f7ff fb0a 	bl	8000558 <__aeabi_fdiv>
 8000f44:	4603      	mov	r3, r0
 8000f46:	61bb      	str	r3, [r7, #24]
    uint8_t duty_cycle = (uint8_t) half_period / tick_period;
 8000f48:	69b8      	ldr	r0, [r7, #24]
 8000f4a:	f7ff fba1 	bl	8000690 <__aeabi_f2uiz>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff f9f8 	bl	8000348 <__aeabi_i2f>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	69f9      	ldr	r1, [r7, #28]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fafb 	bl	8000558 <__aeabi_fdiv>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fb93 	bl	8000690 <__aeabi_f2uiz>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	75fb      	strb	r3, [r7, #23]

    pI2CHandle->pI2Cx->TIMINGR &= ~(0xFF << I2C_TIMINGR_SCLL);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	691a      	ldr	r2, [r3, #16]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000f7c:	611a      	str	r2, [r3, #16]
    pI2CHandle->pI2Cx->TIMINGR &= ~(0xFF << I2C_TIMINGR_SCLH);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	691a      	ldr	r2, [r3, #16]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8000f8c:	611a      	str	r2, [r3, #16]

    pI2CHandle->pI2Cx->TIMINGR |= (duty_cycle << I2C_TIMINGR_SCLL);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	6919      	ldr	r1, [r3, #16]
 8000f94:	7dfa      	ldrb	r2, [r7, #23]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	611a      	str	r2, [r3, #16]
    pI2CHandle->pI2Cx->TIMINGR |= (duty_cycle << I2C_TIMINGR_SCLH);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6919      	ldr	r1, [r3, #16]
 8000fa4:	7dfb      	ldrb	r3, [r7, #23]
 8000fa6:	021a      	lsls	r2, r3, #8
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	430a      	orrs	r2, r1
 8000fae:	611a      	str	r2, [r3, #16]

    // Clear delays
    pI2CHandle->pI2Cx->TIMINGR &= ~(0x7 << I2C_TIMINGR_SDADEL);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	691a      	ldr	r2, [r3, #16]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8000fbe:	611a      	str	r2, [r3, #16]
    pI2CHandle->pI2Cx->TIMINGR &= ~(0x7 << I2C_TIMINGR_SCLDEL);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	691a      	ldr	r2, [r3, #16]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f422 02e0 	bic.w	r2, r2, #7340032	@ 0x700000
 8000fce:	611a      	str	r2, [r3, #16]

    // Setdelays
    pI2CHandle->pI2Cx->TIMINGR |= sda_del << I2C_TIMINGR_SDADEL;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	6919      	ldr	r1, [r3, #16]
 8000fd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fda:	041a      	lsls	r2, r3, #16
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	611a      	str	r2, [r3, #16]
    pI2CHandle->pI2Cx->TIMINGR |= scl_del << I2C_TIMINGR_SCLDEL;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	6919      	ldr	r1, [r3, #16]
 8000fea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000fee:	051a      	lsls	r2, r3, #20
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	611a      	str	r2, [r3, #16]

    // Assuming non-zero is a proper address, doing the slave way
    if (config.I2C_DeviceAddress != -1) {
 8000ff8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001000:	d034      	beq.n	800106c <I2C_Init+0x1f0>
        // Enable general address matching
        pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_GCEN);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001010:	601a      	str	r2, [r3, #0]

        pI2CHandle->pI2Cx->OAR1 &= ~(1 << I2C_AO1_MODE);    // 7 bit mode
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001020:	609a      	str	r2, [r3, #8]
        pI2CHandle->pI2Cx->OAR1 &= ~0x3FF;                  // Nuke the past
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	6812      	ldr	r2, [r2, #0]
 800102c:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001030:	f023 0303 	bic.w	r3, r3, #3
 8001034:	6093      	str	r3, [r2, #8]
        pI2CHandle->pI2Cx->OAR1 |= (config.I2C_DeviceAddress << 1);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6899      	ldr	r1, [r3, #8]
 800103c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001040:	005a      	lsls	r2, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	430a      	orrs	r2, r1
 8001048:	609a      	str	r2, [r3, #8]
        pI2CHandle->pI2Cx->OAR1 |= (1 << I2C_OA1_EN);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001058:	609a      	str	r2, [r3, #8]

        // Disable slave byte control
        pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_SBC);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001068:	601a      	str	r2, [r3, #0]
        pI2CHandle->pI2Cx->OAR1 &= ~0x3FF;
        pI2CHandle->pI2Cx->OAR1 &= !(1 << I2C_OA1_EN);

        pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_GCEN);
    }
}
 800106a:	e018      	b.n	800109e <I2C_Init+0x222>
        pI2CHandle->pI2Cx->OAR1 &= ~0x3FF;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	6812      	ldr	r2, [r2, #0]
 8001076:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800107a:	f023 0303 	bic.w	r3, r3, #3
 800107e:	6093      	str	r3, [r2, #8]
        pI2CHandle->pI2Cx->OAR1 &= !(1 << I2C_OA1_EN);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
        pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_GCEN);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 800109c:	601a      	str	r2, [r3, #0]
}
 800109e:	bf00      	nop
 80010a0:	3728      	adds	r7, #40	@ 0x28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40021000 	.word	0x40021000
 80010ac:	338637bd 	.word	0x338637bd
 80010b0:	000186a0 	.word	0x000186a0
 80010b4:	3727c5ac 	.word	0x3727c5ac
 80010b8:	00030d40 	.word	0x00030d40
 80010bc:	36a7c5ac 	.word	0x36a7c5ac
 80010c0:	00061a80 	.word	0x00061a80
 80010c4:	3627c5ac 	.word	0x3627c5ac

080010c8 <I2C_Enable>:
    }

    return pI2CHandle->i2c_state;
}

void I2C_Enable(I2C_RegDef_t *pI2Cx, uint8_t isEnable) {
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	70fb      	strb	r3, [r7, #3]
    if (isEnable) {
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d006      	beq.n	80010e8 <I2C_Enable+0x20>
        pI2Cx->CR1 |= 1 << I2C_CR1_PE;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f043 0201 	orr.w	r2, r3, #1
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	601a      	str	r2, [r3, #0]
    } else {
        pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
    }
}
 80010e6:	e005      	b.n	80010f4 <I2C_Enable+0x2c>
        pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f023 0201 	bic.w	r2, r3, #1
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	601a      	str	r2, [r3, #0]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr

080010fe <I2C_EV_IRQ_Handle>:
    IRQPriority = IRQPriority << NO_PR_BITS;

    *(NVIC_PR_BASE_ADDR + index) |= IRQPriority << (offset * 8);
}

void I2C_EV_IRQ_Handle(I2C_Handle_t *pI2CHandle) {
 80010fe:	b580      	push	{r7, lr}
 8001100:	b084      	sub	sp, #16
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
    // Process TX IQ
    uint8_t is_tx_iq = pI2CHandle->pI2Cx->CR1 & (1 << I2C_CR1_TXIE);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	73fb      	strb	r3, [r7, #15]
    uint8_t is_tx_clear = (pI2CHandle->pI2Cx->ISR & (1 << I2C_ISR_TXIS));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	73bb      	strb	r3, [r7, #14]

    if (is_tx_iq && is_tx_clear) {
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d01c      	beq.n	8001162 <I2C_EV_IRQ_Handle+0x64>
 8001128:	7bbb      	ldrb	r3, [r7, #14]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d019      	beq.n	8001162 <I2C_EV_IRQ_Handle+0x64>
        if (pI2CHandle->i2c_state == I2C_TX && pI2CHandle->tx_len > 0) {
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	7d9b      	ldrb	r3, [r3, #22]
 8001132:	2b02      	cmp	r3, #2
 8001134:	d115      	bne.n	8001162 <I2C_EV_IRQ_Handle+0x64>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7d1b      	ldrb	r3, [r3, #20]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d011      	beq.n	8001162 <I2C_EV_IRQ_Handle+0x64>
            *((volatile uint8_t*) &pI2CHandle->pI2Cx->TXDR) = *pI2CHandle->pTxBuffer;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68da      	ldr	r2, [r3, #12]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	3328      	adds	r3, #40	@ 0x28
 8001148:	7812      	ldrb	r2, [r2, #0]
 800114a:	701a      	strb	r2, [r3, #0]
            pI2CHandle->pTxBuffer++;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	1c5a      	adds	r2, r3, #1
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	60da      	str	r2, [r3, #12]
            pI2CHandle->tx_len--;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7d1b      	ldrb	r3, [r3, #20]
 800115a:	3b01      	subs	r3, #1
 800115c:	b2da      	uxtb	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	751a      	strb	r2, [r3, #20]
        }
    }

    // Process RX IQ
    uint8_t is_rx_iq = pI2CHandle->pI2Cx->CR1 & (1 << I2C_CR1_RXIE);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	737b      	strb	r3, [r7, #13]
    uint8_t is_rx_full = (pI2CHandle->pI2Cx->ISR & (1 << I2C_ISR_RXNE));
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	733b      	strb	r3, [r7, #12]

    if (is_rx_iq && is_rx_full) {
 800117e:	7b7b      	ldrb	r3, [r7, #13]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d01c      	beq.n	80011be <I2C_EV_IRQ_Handle+0xc0>
 8001184:	7b3b      	ldrb	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d019      	beq.n	80011be <I2C_EV_IRQ_Handle+0xc0>
        if (pI2CHandle->i2c_state == I2C_RX && pI2CHandle->rx_len > 0) {
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	7d9b      	ldrb	r3, [r3, #22]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d115      	bne.n	80011be <I2C_EV_IRQ_Handle+0xc0>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	7d5b      	ldrb	r3, [r3, #21]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d011      	beq.n	80011be <I2C_EV_IRQ_Handle+0xc0>
            *pI2CHandle->pRxBuffer = (uint8_t) pI2CHandle->pI2Cx->RXDR;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	701a      	strb	r2, [r3, #0]
            pI2CHandle->rx_len--;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7d5b      	ldrb	r3, [r3, #21]
 80011ac:	3b01      	subs	r3, #1
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	755a      	strb	r2, [r3, #21]
            pI2CHandle->pRxBuffer++;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	1c5a      	adds	r2, r3, #1
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	611a      	str	r2, [r3, #16]
        }
    }

    // Process STOP
    uint8_t is_stop_ie = pI2CHandle->pI2Cx->CR1 & (1 << I2C_CR1_STOPIE);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	f003 0320 	and.w	r3, r3, #32
 80011ca:	72fb      	strb	r3, [r7, #11]
    uint8_t has_stop = (pI2CHandle->pI2Cx->ISR & (1 << I2C_ISR_STOPF));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	f003 0320 	and.w	r3, r3, #32
 80011d8:	72bb      	strb	r3, [r7, #10]

    if (is_stop_ie && has_stop) {
 80011da:	7afb      	ldrb	r3, [r7, #11]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d079      	beq.n	80012d4 <I2C_EV_IRQ_Handle+0x1d6>
 80011e0:	7abb      	ldrb	r3, [r7, #10]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d076      	beq.n	80012d4 <I2C_EV_IRQ_Handle+0x1d6>
        if (pI2CHandle->i2c_state == I2C_RX) {
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	7d9b      	ldrb	r3, [r3, #22]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d133      	bne.n	8001256 <I2C_EV_IRQ_Handle+0x158>
            pI2CHandle->pRxBuffer = NULL;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
            pI2CHandle->addr = 0;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	75da      	strb	r2, [r3, #23]
            pI2CHandle->i2c_state = I2C_DONE;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2203      	movs	r2, #3
 80011fe:	759a      	strb	r2, [r3, #22]
            pI2CHandle->rx_len = 0;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	755a      	strb	r2, [r3, #21]
            pI2CHandle->sr = 0;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	761a      	strb	r2, [r3, #24]

            // Clear up the interupts
            pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_STOPIE);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 0220 	bic.w	r2, r2, #32
 800121a:	601a      	str	r2, [r3, #0]
            pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_RXIE);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f022 0204 	bic.w	r2, r2, #4
 800122a:	601a      	str	r2, [r3, #0]
            pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ERRIE);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800123a:	601a      	str	r2, [r3, #0]
            pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_TCIE);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800124a:	601a      	str	r2, [r3, #0]

            I2C_AppEventCallback(pI2CHandle, I2C_EV_RX_COMPLETE);
 800124c:	2101      	movs	r1, #1
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff fa90 	bl	8000774 <I2C_AppEventCallback>
 8001254:	e036      	b.n	80012c4 <I2C_EV_IRQ_Handle+0x1c6>
        } else if (pI2CHandle->i2c_state == I2C_TX) {
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	7d9b      	ldrb	r3, [r3, #22]
 800125a:	2b02      	cmp	r3, #2
 800125c:	d132      	bne.n	80012c4 <I2C_EV_IRQ_Handle+0x1c6>

            // Clear up the interupts
            pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_STOPIE);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0220 	bic.w	r2, r2, #32
 800126c:	601a      	str	r2, [r3, #0]
            pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_TXIE);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 0202 	bic.w	r2, r2, #2
 800127c:	601a      	str	r2, [r3, #0]
            pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ERRIE);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800128c:	601a      	str	r2, [r3, #0]
            pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_TCIE);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800129c:	601a      	str	r2, [r3, #0]

            pI2CHandle->pTxBuffer = NULL;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	60da      	str	r2, [r3, #12]
            pI2CHandle->addr = 0;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	75da      	strb	r2, [r3, #23]
            pI2CHandle->i2c_state = I2C_DONE;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2203      	movs	r2, #3
 80012ae:	759a      	strb	r2, [r3, #22]
            pI2CHandle->tx_len = 0;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	751a      	strb	r2, [r3, #20]
            pI2CHandle->sr = 0;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	761a      	strb	r2, [r3, #24]

            I2C_AppEventCallback(pI2CHandle, I2C_EV_TX_COMPLETE);
 80012bc:	2100      	movs	r1, #0
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff fa58 	bl	8000774 <I2C_AppEventCallback>
        }

        pI2CHandle->pI2Cx->ICR |= (1 << I2C_ICR_STOPCF);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	69da      	ldr	r2, [r3, #28]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f042 0220 	orr.w	r2, r2, #32
 80012d2:	61da      	str	r2, [r3, #28]
    }

    // Process TC (Transfer complere)
    uint8_t is_tc = pI2CHandle->pI2Cx->CR1 & (1 << I2C_CR1_TCIE);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012e0:	727b      	strb	r3, [r7, #9]
    uint8_t has_tc = pI2CHandle->pI2Cx->ISR & (1 << I2C_ISR_TC);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012ee:	723b      	strb	r3, [r7, #8]

    if (is_tc && has_tc) {
 80012f0:	7a7b      	ldrb	r3, [r7, #9]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00d      	beq.n	8001312 <I2C_EV_IRQ_Handle+0x214>
 80012f6:	7a3b      	ldrb	r3, [r7, #8]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00a      	beq.n	8001312 <I2C_EV_IRQ_Handle+0x214>
        pI2CHandle->i2c_state = I2C_DONE;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2203      	movs	r2, #3
 8001300:	759a      	strb	r2, [r3, #22]
        // XXX which we must clear with start/stop, before we can do the next read/write or stop
        // XXX making the next call bork it all
        // XXX should make the api a transaction builder, that would overcome this

        // Clearing the TC
         pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_STOP);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001310:	605a      	str	r2, [r3, #4]
    }
}
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <I2C_ER_IRQ_Handle>:

void I2C_ER_IRQ_Handle(I2C_Handle_t *pI2CHandle) {
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
    // XXX we should check ISR for errors, clear them and then call the app callback informing of the shenanigans
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <I2C_SlaveWrite>:

__attribute__((weak)) void I2C_AppEventCallback(I2C_Handle_t *pHandle, uint8_t event) {}

void I2C_SlaveWrite(I2C_Handle_t *pI2CHandle, uint8_t data) {
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	70fb      	strb	r3, [r7, #3]
    pI2CHandle->pI2Cx->TXDR = data;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	78fa      	ldrb	r2, [r7, #3]
 800133e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr

0800134a <I2C_SlaverRead>:

uint8_t I2C_SlaverRead(I2C_Handle_t *pI2CHandle) {
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
    return (uint8_t) pI2CHandle->pI2Cx->RXDR;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001358:	b2db      	uxtb	r3, r3
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <__libc_init_array>:
 8001364:	b570      	push	{r4, r5, r6, lr}
 8001366:	4d0d      	ldr	r5, [pc, #52]	@ (800139c <__libc_init_array+0x38>)
 8001368:	4c0d      	ldr	r4, [pc, #52]	@ (80013a0 <__libc_init_array+0x3c>)
 800136a:	1b64      	subs	r4, r4, r5
 800136c:	10a4      	asrs	r4, r4, #2
 800136e:	2600      	movs	r6, #0
 8001370:	42a6      	cmp	r6, r4
 8001372:	d109      	bne.n	8001388 <__libc_init_array+0x24>
 8001374:	4d0b      	ldr	r5, [pc, #44]	@ (80013a4 <__libc_init_array+0x40>)
 8001376:	4c0c      	ldr	r4, [pc, #48]	@ (80013a8 <__libc_init_array+0x44>)
 8001378:	f000 f818 	bl	80013ac <_init>
 800137c:	1b64      	subs	r4, r4, r5
 800137e:	10a4      	asrs	r4, r4, #2
 8001380:	2600      	movs	r6, #0
 8001382:	42a6      	cmp	r6, r4
 8001384:	d105      	bne.n	8001392 <__libc_init_array+0x2e>
 8001386:	bd70      	pop	{r4, r5, r6, pc}
 8001388:	f855 3b04 	ldr.w	r3, [r5], #4
 800138c:	4798      	blx	r3
 800138e:	3601      	adds	r6, #1
 8001390:	e7ee      	b.n	8001370 <__libc_init_array+0xc>
 8001392:	f855 3b04 	ldr.w	r3, [r5], #4
 8001396:	4798      	blx	r3
 8001398:	3601      	adds	r6, #1
 800139a:	e7f2      	b.n	8001382 <__libc_init_array+0x1e>
 800139c:	080013d8 	.word	0x080013d8
 80013a0:	080013d8 	.word	0x080013d8
 80013a4:	080013d8 	.word	0x080013d8
 80013a8:	080013dc 	.word	0x080013dc

080013ac <_init>:
 80013ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ae:	bf00      	nop
 80013b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013b2:	bc08      	pop	{r3}
 80013b4:	469e      	mov	lr, r3
 80013b6:	4770      	bx	lr

080013b8 <_fini>:
 80013b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ba:	bf00      	nop
 80013bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013be:	bc08      	pop	{r3}
 80013c0:	469e      	mov	lr, r3
 80013c2:	4770      	bx	lr
