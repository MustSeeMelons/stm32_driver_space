
stm32l4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c3c  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000dc0  08000dc0  00001dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000de4  08000de4  00001df4  2**0
                  CONTENTS
  4 .ARM          00000008  08000de4  08000de4  00001de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000dec  08000df4  00001df4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dec  08000dec  00001dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000df0  08000df0  00001df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001df4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00001df4  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001df4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000013e2  00000000  00000000  00001e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000402  00000000  00000000  00003206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000150  00000000  00000000  00003608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f2  00000000  00000000  00003758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000024ad  00000000  00000000  0000384a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000018bd  00000000  00000000  00005cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009191  00000000  00000000  000075b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00010745  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000494  00000000  00000000  00010788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  00010c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000000 	.word	0x20000000
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08000da8 	.word	0x08000da8

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000004 	.word	0x20000004
 80001c0:	08000da8 	.word	0x08000da8

080001c4 <strlen>:
 80001c4:	4603      	mov	r3, r0
 80001c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ca:	2a00      	cmp	r2, #0
 80001cc:	d1fb      	bne.n	80001c6 <strlen+0x2>
 80001ce:	1a18      	subs	r0, r3, r0
 80001d0:	3801      	subs	r0, #1
 80001d2:	4770      	bx	lr

080001d4 <SPI_GPIO_Setup>:
// SS   10
// MOSI 11
// MISO 12
// SCK  13

void SPI_GPIO_Setup() {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af00      	add	r7, sp, #0
    // White wire
    GPIO_Handle_t spi_handle = {
 80001da:	f107 030c 	add.w	r3, r7, #12
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	4b19      	ldr	r3, [pc, #100]	@ (800024c <SPI_GPIO_Setup+0x78>)
 80001e8:	60fb      	str	r3, [r7, #12]
 80001ea:	2302      	movs	r3, #2
 80001ec:	747b      	strb	r3, [r7, #17]
 80001ee:	2302      	movs	r3, #2
 80001f0:	74bb      	strb	r3, [r7, #18]
 80001f2:	2305      	movs	r3, #5
 80001f4:	757b      	strb	r3, [r7, #21]
            .GPIO_PinOPType = GPIO_OP_TYPE_PP,
            .GPIO_PinAltFunMode = GPIO_AF_5
        }
    };

    GPIO_PCLK(GPIOB, ENABLE);
 80001f6:	2101      	movs	r1, #1
 80001f8:	4814      	ldr	r0, [pc, #80]	@ (800024c <SPI_GPIO_Setup+0x78>)
 80001fa:	f000 f8b5 	bl	8000368 <GPIO_PCLK>

    // MOSI
    spi_handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_N15;
 80001fe:	230f      	movs	r3, #15
 8000200:	743b      	strb	r3, [r7, #16]
    GPIO_Init(&spi_handle);
 8000202:	f107 030c 	add.w	r3, r7, #12
 8000206:	4618      	mov	r0, r3
 8000208:	f000 f97c 	bl	8000504 <GPIO_Init>

    // SCK
    spi_handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_N13;
 800020c:	230d      	movs	r3, #13
 800020e:	743b      	strb	r3, [r7, #16]
    GPIO_Init(&spi_handle);
 8000210:	f107 030c 	add.w	r3, r7, #12
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f975 	bl	8000504 <GPIO_Init>
    // MISO
    // handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_N14;
    // GPIO_Init(&handle);

    // NSS
    spi_handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_N12;
 800021a:	230c      	movs	r3, #12
 800021c:	743b      	strb	r3, [r7, #16]
    GPIO_Init(&spi_handle);
 800021e:	f107 030c 	add.w	r3, r7, #12
 8000222:	4618      	mov	r0, r3
 8000224:	f000 f96e 	bl	8000504 <GPIO_Init>

    GPIO_Handle_t btn_handle = {
 8000228:	4a09      	ldr	r2, [pc, #36]	@ (8000250 <SPI_GPIO_Setup+0x7c>)
 800022a:	463b      	mov	r3, r7
 800022c:	ca07      	ldmia	r2, {r0, r1, r2}
 800022e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            .GPIO_PinOPType = GPIO_OP_TYPE_PP,
            .GPIO_PinAltFunMode = 0
        }
    };

    GPIO_PCLK(GPIOC, ENABLE);
 8000232:	2101      	movs	r1, #1
 8000234:	4807      	ldr	r0, [pc, #28]	@ (8000254 <SPI_GPIO_Setup+0x80>)
 8000236:	f000 f897 	bl	8000368 <GPIO_PCLK>

    GPIO_Init(&btn_handle);
 800023a:	463b      	mov	r3, r7
 800023c:	4618      	mov	r0, r3
 800023e:	f000 f961 	bl	8000504 <GPIO_Init>
}
 8000242:	bf00      	nop
 8000244:	3718      	adds	r7, #24
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	48000400 	.word	0x48000400
 8000250:	08000dc0 	.word	0x08000dc0
 8000254:	48000800 	.word	0x48000800

08000258 <spi_send>:

void spi_send() {
 8000258:	b590      	push	{r4, r7, lr}
 800025a:	b087      	sub	sp, #28
 800025c:	af00      	add	r7, sp, #0
    char msg[] = "hello world";
 800025e:	4a20      	ldr	r2, [pc, #128]	@ (80002e0 <spi_send+0x88>)
 8000260:	f107 030c 	add.w	r3, r7, #12
 8000264:	ca07      	ldmia	r2, {r0, r1, r2}
 8000266:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    SPI_GPIO_Setup();
 800026a:	f7ff ffb3 	bl	80001d4 <SPI_GPIO_Setup>

    GPIO_IRQInterruptConfig(IRQ_NO_EXTI2, ENABLE);
 800026e:	2101      	movs	r1, #1
 8000270:	2008      	movs	r0, #8
 8000272:	f000 faff 	bl	8000874 <GPIO_IRQInterruptConfig>

    SPI_Handle_t spi_handle = {
 8000276:	4a1b      	ldr	r2, [pc, #108]	@ (80002e4 <spi_send+0x8c>)
 8000278:	463b      	mov	r3, r7
 800027a:	ca07      	ldmia	r2, {r0, r1, r2}
 800027c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            .SPI_CPHA = SPI_CPAH_LOW,
            .SPI_SSM = SPI_SSM_DI
        }
    };

    SPI_Init(&spi_handle);
 8000280:	463b      	mov	r3, r7
 8000282:	4618      	mov	r0, r3
 8000284:	f000 fbf4 	bl	8000a70 <SPI_Init>

    SPI_SSOEConfig(spi_handle.pSPIx, ENABLE);
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	2101      	movs	r1, #1
 800028c:	4618      	mov	r0, r3
 800028e:	f000 fd4b 	bl	8000d28 <SPI_SSOEConfig>

    while (1) {
        if (is_trigger == 1) {
 8000292:	4b15      	ldr	r3, [pc, #84]	@ (80002e8 <spi_send+0x90>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	2b01      	cmp	r3, #1
 8000298:	d1fb      	bne.n	8000292 <spi_send+0x3a>
            SPI_Enable(spi_handle.pSPIx, ENABLE);
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	2101      	movs	r1, #1
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 fd0c 	bl	8000cbc <SPI_Enable>

            // TODO add msg length to data

            SPI_SendData(spi_handle.pSPIx, (uint8_t*) msg, strlen(msg));
 80002a4:	683c      	ldr	r4, [r7, #0]
 80002a6:	f107 030c 	add.w	r3, r7, #12
 80002aa:	4618      	mov	r0, r3
 80002ac:	f7ff ff8a 	bl	80001c4 <strlen>
 80002b0:	4602      	mov	r2, r0
 80002b2:	f107 030c 	add.w	r3, r7, #12
 80002b6:	4619      	mov	r1, r3
 80002b8:	4620      	mov	r0, r4
 80002ba:	f000 fcaf 	bl	8000c1c <SPI_SendData>

            // Wait for busy flag to clear
            while(spi_handle.pSPIx->SR & 0x1 << SPI_SR_BSY);
 80002be:	bf00      	nop
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	689b      	ldr	r3, [r3, #8]
 80002c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d1f9      	bne.n	80002c0 <spi_send+0x68>

            SPI_Enable(spi_handle.pSPIx, DISABLE);
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	2100      	movs	r1, #0
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 fcf3 	bl	8000cbc <SPI_Enable>
            is_trigger = 0;
 80002d6:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <spi_send+0x90>)
 80002d8:	2200      	movs	r2, #0
 80002da:	701a      	strb	r2, [r3, #0]
        if (is_trigger == 1) {
 80002dc:	e7d9      	b.n	8000292 <spi_send+0x3a>
 80002de:	bf00      	nop
 80002e0:	08000dcc 	.word	0x08000dcc
 80002e4:	08000dd8 	.word	0x08000dd8
 80002e8:	2000001c 	.word	0x2000001c

080002ec <EXTI2_IRQHandler>:
        }
    }
}

void EXTI2_IRQHandler(void) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
    is_trigger = 1;
 80002f0:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <EXTI2_IRQHandler+0x14>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	701a      	strb	r2, [r3, #0]

    GPIO_IRQHandle(GPIO_PIN_N2);
 80002f6:	2002      	movs	r0, #2
 80002f8:	f000 fb42 	bl	8000980 <GPIO_IRQHandle>
}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	2000001c 	.word	0x2000001c

08000304 <main>:

int main(void) {
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
    spi_send();
 8000308:	f7ff ffa6 	bl	8000258 <spi_send>
 800030c:	2300      	movs	r3, #0
}
 800030e:	4618      	mov	r0, r3
 8000310:	bd80      	pop	{r7, pc}
	...

08000314 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000314:	480d      	ldr	r0, [pc, #52]	@ (800034c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000316:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000318:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800031c:	480c      	ldr	r0, [pc, #48]	@ (8000350 <LoopForever+0x6>)
  ldr r1, =_edata
 800031e:	490d      	ldr	r1, [pc, #52]	@ (8000354 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000320:	4a0d      	ldr	r2, [pc, #52]	@ (8000358 <LoopForever+0xe>)
  movs r3, #0
 8000322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000324:	e002      	b.n	800032c <LoopCopyDataInit>

08000326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032a:	3304      	adds	r3, #4

0800032c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800032c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000330:	d3f9      	bcc.n	8000326 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000332:	4a0a      	ldr	r2, [pc, #40]	@ (800035c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000334:	4c0a      	ldr	r4, [pc, #40]	@ (8000360 <LoopForever+0x16>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000338:	e001      	b.n	800033e <LoopFillZerobss>

0800033a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800033c:	3204      	adds	r2, #4

0800033e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000340:	d3fb      	bcc.n	800033a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000342:	f000 fd0d 	bl	8000d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000346:	f7ff ffdd 	bl	8000304 <main>

0800034a <LoopForever>:

LoopForever:
  b LoopForever
 800034a:	e7fe      	b.n	800034a <LoopForever>
  ldr   r0, =_estack
 800034c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000354:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000358:	08000df4 	.word	0x08000df4
  ldr r2, =_sbss
 800035c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000360:	20000020 	.word	0x20000020

08000364 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000364:	e7fe      	b.n	8000364 <ADC1_2_IRQHandler>
	...

08000368 <GPIO_PCLK>:
#include "stm32l476xx_gpio_driver.h"

void GPIO_PCLK(GPIO_RegDef_t *pGPIOx, uint8_t isEnable) {
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	460b      	mov	r3, r1
 8000372:	70fb      	strb	r3, [r7, #3]
	if (isEnable == ENABLE) {
 8000374:	78fb      	ldrb	r3, [r7, #3]
 8000376:	2b01      	cmp	r3, #1
 8000378:	d157      	bne.n	800042a <GPIO_PCLK+0xc2>
		if (pGPIOx == GPIOA) {
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000380:	d106      	bne.n	8000390 <GPIO_PCLK+0x28>
			GPIOA_PCLK_EN();
 8000382:	4b58      	ldr	r3, [pc, #352]	@ (80004e4 <GPIO_PCLK+0x17c>)
 8000384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000386:	4a57      	ldr	r2, [pc, #348]	@ (80004e4 <GPIO_PCLK+0x17c>)
 8000388:	f043 0301 	orr.w	r3, r3, #1
 800038c:	64d3      	str	r3, [r2, #76]	@ 0x4c
			GPIOG_PCLK_DI();
		} else if (pGPIOx == GPIOH) {
			GPIOH_PCLK_DI();
		}
	}
}
 800038e:	e0a3      	b.n	80004d8 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOB) {
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a55      	ldr	r2, [pc, #340]	@ (80004e8 <GPIO_PCLK+0x180>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d106      	bne.n	80003a6 <GPIO_PCLK+0x3e>
			GPIOB_PCLK_EN();
 8000398:	4b52      	ldr	r3, [pc, #328]	@ (80004e4 <GPIO_PCLK+0x17c>)
 800039a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800039c:	4a51      	ldr	r2, [pc, #324]	@ (80004e4 <GPIO_PCLK+0x17c>)
 800039e:	f043 0302 	orr.w	r3, r3, #2
 80003a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003a4:	e098      	b.n	80004d8 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOC) {
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a50      	ldr	r2, [pc, #320]	@ (80004ec <GPIO_PCLK+0x184>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d106      	bne.n	80003bc <GPIO_PCLK+0x54>
			GPIOC_PCLK_EN();
 80003ae:	4b4d      	ldr	r3, [pc, #308]	@ (80004e4 <GPIO_PCLK+0x17c>)
 80003b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003b2:	4a4c      	ldr	r2, [pc, #304]	@ (80004e4 <GPIO_PCLK+0x17c>)
 80003b4:	f043 0304 	orr.w	r3, r3, #4
 80003b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003ba:	e08d      	b.n	80004d8 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOD) {
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a4c      	ldr	r2, [pc, #304]	@ (80004f0 <GPIO_PCLK+0x188>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d106      	bne.n	80003d2 <GPIO_PCLK+0x6a>
			GPIOD_PCLK_EN();
 80003c4:	4b47      	ldr	r3, [pc, #284]	@ (80004e4 <GPIO_PCLK+0x17c>)
 80003c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003c8:	4a46      	ldr	r2, [pc, #280]	@ (80004e4 <GPIO_PCLK+0x17c>)
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003d0:	e082      	b.n	80004d8 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOE) {
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a47      	ldr	r2, [pc, #284]	@ (80004f4 <GPIO_PCLK+0x18c>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d106      	bne.n	80003e8 <GPIO_PCLK+0x80>
			GPIOE_PCLK_EN();
 80003da:	4b42      	ldr	r3, [pc, #264]	@ (80004e4 <GPIO_PCLK+0x17c>)
 80003dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003de:	4a41      	ldr	r2, [pc, #260]	@ (80004e4 <GPIO_PCLK+0x17c>)
 80003e0:	f043 0310 	orr.w	r3, r3, #16
 80003e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003e6:	e077      	b.n	80004d8 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOF) {
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4a43      	ldr	r2, [pc, #268]	@ (80004f8 <GPIO_PCLK+0x190>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d106      	bne.n	80003fe <GPIO_PCLK+0x96>
			GPIOF_PCLK_EN();
 80003f0:	4b3c      	ldr	r3, [pc, #240]	@ (80004e4 <GPIO_PCLK+0x17c>)
 80003f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003f4:	4a3b      	ldr	r2, [pc, #236]	@ (80004e4 <GPIO_PCLK+0x17c>)
 80003f6:	f043 0320 	orr.w	r3, r3, #32
 80003fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003fc:	e06c      	b.n	80004d8 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOG) {
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a3e      	ldr	r2, [pc, #248]	@ (80004fc <GPIO_PCLK+0x194>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d106      	bne.n	8000414 <GPIO_PCLK+0xac>
			GPIOG_PCLK_EN();
 8000406:	4b37      	ldr	r3, [pc, #220]	@ (80004e4 <GPIO_PCLK+0x17c>)
 8000408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800040a:	4a36      	ldr	r2, [pc, #216]	@ (80004e4 <GPIO_PCLK+0x17c>)
 800040c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000410:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000412:	e061      	b.n	80004d8 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOH) {
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a3a      	ldr	r2, [pc, #232]	@ (8000500 <GPIO_PCLK+0x198>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d15d      	bne.n	80004d8 <GPIO_PCLK+0x170>
			GPIOH_PCLK_EN();
 800041c:	4b31      	ldr	r3, [pc, #196]	@ (80004e4 <GPIO_PCLK+0x17c>)
 800041e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000420:	4a30      	ldr	r2, [pc, #192]	@ (80004e4 <GPIO_PCLK+0x17c>)
 8000422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000426:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000428:	e056      	b.n	80004d8 <GPIO_PCLK+0x170>
		if (pGPIOx == GPIOA) {
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000430:	d106      	bne.n	8000440 <GPIO_PCLK+0xd8>
			GPIOA_PCLK_DI();
 8000432:	4b2c      	ldr	r3, [pc, #176]	@ (80004e4 <GPIO_PCLK+0x17c>)
 8000434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000436:	4a2b      	ldr	r2, [pc, #172]	@ (80004e4 <GPIO_PCLK+0x17c>)
 8000438:	f023 0301 	bic.w	r3, r3, #1
 800043c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800043e:	e04b      	b.n	80004d8 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOB) {
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a29      	ldr	r2, [pc, #164]	@ (80004e8 <GPIO_PCLK+0x180>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d106      	bne.n	8000456 <GPIO_PCLK+0xee>
			GPIOB_PCLK_DI();
 8000448:	4b26      	ldr	r3, [pc, #152]	@ (80004e4 <GPIO_PCLK+0x17c>)
 800044a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800044c:	4a25      	ldr	r2, [pc, #148]	@ (80004e4 <GPIO_PCLK+0x17c>)
 800044e:	f023 0302 	bic.w	r3, r3, #2
 8000452:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000454:	e040      	b.n	80004d8 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOC) {
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a24      	ldr	r2, [pc, #144]	@ (80004ec <GPIO_PCLK+0x184>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d106      	bne.n	800046c <GPIO_PCLK+0x104>
			GPIOC_PCLK_DI();
 800045e:	4b21      	ldr	r3, [pc, #132]	@ (80004e4 <GPIO_PCLK+0x17c>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000462:	4a20      	ldr	r2, [pc, #128]	@ (80004e4 <GPIO_PCLK+0x17c>)
 8000464:	f023 0304 	bic.w	r3, r3, #4
 8000468:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800046a:	e035      	b.n	80004d8 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOD) {
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a20      	ldr	r2, [pc, #128]	@ (80004f0 <GPIO_PCLK+0x188>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d106      	bne.n	8000482 <GPIO_PCLK+0x11a>
			GPIOD_PCLK_DI();
 8000474:	4b1b      	ldr	r3, [pc, #108]	@ (80004e4 <GPIO_PCLK+0x17c>)
 8000476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000478:	4a1a      	ldr	r2, [pc, #104]	@ (80004e4 <GPIO_PCLK+0x17c>)
 800047a:	f023 0308 	bic.w	r3, r3, #8
 800047e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000480:	e02a      	b.n	80004d8 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOE) {
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a1b      	ldr	r2, [pc, #108]	@ (80004f4 <GPIO_PCLK+0x18c>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d106      	bne.n	8000498 <GPIO_PCLK+0x130>
			GPIOE_PCLK_DI();
 800048a:	4b16      	ldr	r3, [pc, #88]	@ (80004e4 <GPIO_PCLK+0x17c>)
 800048c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800048e:	4a15      	ldr	r2, [pc, #84]	@ (80004e4 <GPIO_PCLK+0x17c>)
 8000490:	f023 0310 	bic.w	r3, r3, #16
 8000494:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000496:	e01f      	b.n	80004d8 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOF) {
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4a17      	ldr	r2, [pc, #92]	@ (80004f8 <GPIO_PCLK+0x190>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d106      	bne.n	80004ae <GPIO_PCLK+0x146>
			GPIOF_PCLK_DI();
 80004a0:	4b10      	ldr	r3, [pc, #64]	@ (80004e4 <GPIO_PCLK+0x17c>)
 80004a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004a4:	4a0f      	ldr	r2, [pc, #60]	@ (80004e4 <GPIO_PCLK+0x17c>)
 80004a6:	f023 0320 	bic.w	r3, r3, #32
 80004aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004ac:	e014      	b.n	80004d8 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOG) {
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4a12      	ldr	r2, [pc, #72]	@ (80004fc <GPIO_PCLK+0x194>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d106      	bne.n	80004c4 <GPIO_PCLK+0x15c>
			GPIOG_PCLK_DI();
 80004b6:	4b0b      	ldr	r3, [pc, #44]	@ (80004e4 <GPIO_PCLK+0x17c>)
 80004b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ba:	4a0a      	ldr	r2, [pc, #40]	@ (80004e4 <GPIO_PCLK+0x17c>)
 80004bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004c2:	e009      	b.n	80004d8 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOH) {
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000500 <GPIO_PCLK+0x198>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d105      	bne.n	80004d8 <GPIO_PCLK+0x170>
			GPIOH_PCLK_DI();
 80004cc:	4b05      	ldr	r3, [pc, #20]	@ (80004e4 <GPIO_PCLK+0x17c>)
 80004ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004d0:	4a04      	ldr	r2, [pc, #16]	@ (80004e4 <GPIO_PCLK+0x17c>)
 80004d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	40021000 	.word	0x40021000
 80004e8:	48000400 	.word	0x48000400
 80004ec:	48000800 	.word	0x48000800
 80004f0:	48000c00 	.word	0x48000c00
 80004f4:	48001000 	.word	0x48001000
 80004f8:	48001400 	.word	0x48001400
 80004fc:	48001800 	.word	0x48001800
 8000500:	48001c00 	.word	0x48001c00

08000504 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000504:	b480      	push	{r7}
 8000506:	b091      	sub	sp, #68	@ 0x44
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	// Configure mode
	GPIO_PinConfig_t pinConfig = pGPIOHandle->GPIO_PinConfig;
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	f107 030c 	add.w	r3, r7, #12
 8000512:	3204      	adds	r2, #4
 8000514:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000518:	6018      	str	r0, [r3, #0]
 800051a:	3304      	adds	r3, #4
 800051c:	8019      	strh	r1, [r3, #0]
	uint32_t mode = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	63fb      	str	r3, [r7, #60]	@ 0x3c

	uint8_t pin_mode = pinConfig.GPIO_PinMode;
 8000522:	7b7b      	ldrb	r3, [r7, #13]
 8000524:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t pin_number = pinConfig.GPIO_PinNumber;
 8000528:	7b3b      	ldrb	r3, [r7, #12]
 800052a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	// non IT
	if (pin_mode <= GPIO_MODE_ANALOG) {
 800052e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000532:	2b03      	cmp	r3, #3
 8000534:	d81d      	bhi.n	8000572 <GPIO_Init+0x6e>
		// Mode takes 2 bits, all go consecutively so we can do 2 * pin number
		mode = pinConfig.GPIO_PinMode << (2 * pinConfig.GPIO_PinNumber);
 8000536:	7b7b      	ldrb	r3, [r7, #13]
 8000538:	461a      	mov	r2, r3
 800053a:	7b3b      	ldrb	r3, [r7, #12]
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	fa02 f303 	lsl.w	r3, r2, r3
 8000542:	63fb      	str	r3, [r7, #60]	@ 0x3c

		// Must clear before set!
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	7b3b      	ldrb	r3, [r7, #12]
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	2103      	movs	r1, #3
 8000550:	fa01 f303 	lsl.w	r3, r1, r3
 8000554:	43db      	mvns	r3, r3
 8000556:	4619      	mov	r1, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	400a      	ands	r2, r1
 800055e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= mode;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	6819      	ldr	r1, [r3, #0]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800056c:	430a      	orrs	r2, r1
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	e0e6      	b.n	8000740 <GPIO_Init+0x23c>
	} else {
	    // On reset mode will be analog, mode cant be analog for IT to work
        pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	7b3b      	ldrb	r3, [r7, #12]
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	2103      	movs	r1, #3
 800057e:	fa01 f303 	lsl.w	r3, r1, r3
 8000582:	43db      	mvns	r3, r3
 8000584:	4619      	mov	r1, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	400a      	ands	r2, r1
 800058c:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= GPIO_MODE_INPUT;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	6812      	ldr	r2, [r2, #0]
 8000598:	601a      	str	r2, [r3, #0]
	    // PA1, PB1 etc are connected to EXTI1
	    // ...
	    // PA15, PB15 are connected to EXTI15
	    // Lines 0-15 are for GPIO's

	    volatile uint32_t *FTSR = &EXTI->FTSR1;
 800059a:	4baa      	ldr	r3, [pc, #680]	@ (8000844 <GPIO_Init+0x340>)
 800059c:	637b      	str	r3, [r7, #52]	@ 0x34
	    volatile uint32_t *RTSR = &EXTI->RTSR1;
 800059e:	4baa      	ldr	r3, [pc, #680]	@ (8000848 <GPIO_Init+0x344>)
 80005a0:	633b      	str	r3, [r7, #48]	@ 0x30
	    volatile uint32_t *IMR = &EXTI->IMR1;
 80005a2:	4baa      	ldr	r3, [pc, #680]	@ (800084c <GPIO_Init+0x348>)
 80005a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    // GPIO => EXTI(Edge detection, interupt delivery) => NVIC(Enable and configure IRQ) => CPU
	    // IRQ - interupt request
	    // NVIC - nested vectored interupt controler
        if (pin_mode == GPIO_MODE_IR_FT) {
 80005a6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80005aa:	2b04      	cmp	r3, #4
 80005ac:	d115      	bne.n	80005da <GPIO_Init+0xd6>
            // Configure falling edge control register (FTSR)
            *FTSR |= (1 << pin_number);
 80005ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 80005b6:	2101      	movs	r1, #1
 80005b8:	fa01 f202 	lsl.w	r2, r1, r2
 80005bc:	431a      	orrs	r2, r3
 80005be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005c0:	601a      	str	r2, [r3, #0]
            *RTSR &= ~(1 << pin_number); // Reset RTSR just in case
 80005c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 80005ca:	2101      	movs	r1, #1
 80005cc:	fa01 f202 	lsl.w	r2, r1, r2
 80005d0:	43d2      	mvns	r2, r2
 80005d2:	401a      	ands	r2, r3
 80005d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	e031      	b.n	800063e <GPIO_Init+0x13a>
        } else if (pin_mode == GPIO_MODE_IR_RT) {
 80005da:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80005de:	2b05      	cmp	r3, #5
 80005e0:	d115      	bne.n	800060e <GPIO_Init+0x10a>
            // Configure rising edge control register (RTSR)
            *RTSR |= (1 << pin_number);
 80005e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 80005ea:	2101      	movs	r1, #1
 80005ec:	fa01 f202 	lsl.w	r2, r1, r2
 80005f0:	431a      	orrs	r2, r3
 80005f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005f4:	601a      	str	r2, [r3, #0]
            *FTSR &= ~(1 << pin_number); // Reset FTSR just in case
 80005f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 80005fe:	2101      	movs	r1, #1
 8000600:	fa01 f202 	lsl.w	r2, r1, r2
 8000604:	43d2      	mvns	r2, r2
 8000606:	401a      	ands	r2, r3
 8000608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	e017      	b.n	800063e <GPIO_Init+0x13a>
        } else if (pin_mode == GPIO_MODE_IR_RFT) {
 800060e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000612:	2b06      	cmp	r3, #6
 8000614:	d113      	bne.n	800063e <GPIO_Init+0x13a>
            // Configure both registers
            *RTSR |= (1 << pin_number);
 8000616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800061e:	2101      	movs	r1, #1
 8000620:	fa01 f202 	lsl.w	r2, r1, r2
 8000624:	431a      	orrs	r2, r3
 8000626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000628:	601a      	str	r2, [r3, #0]
            *FTSR |= (1 << pin_number);
 800062a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000632:	2101      	movs	r1, #1
 8000634:	fa01 f202 	lsl.w	r2, r1, r2
 8000638:	431a      	orrs	r2, r3
 800063a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800063c:	601a      	str	r2, [r3, #0]
        }

        // Configure GPIO port in SYSCFG_EXTIR
        uint8_t index = pin_number / 4;
 800063e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000642:	089b      	lsrs	r3, r3, #2
 8000644:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        uint8_t offset = pin_number % 4;
 8000648:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800064c:	f003 0303 	and.w	r3, r3, #3
 8000650:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

        uint8_t portcode = GPIO_ADR_TO_CODE(pGPIOHandle->pGPIOx);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800065c:	d032      	beq.n	80006c4 <GPIO_Init+0x1c0>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a7b      	ldr	r2, [pc, #492]	@ (8000850 <GPIO_Init+0x34c>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d02b      	beq.n	80006c0 <GPIO_Init+0x1bc>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a79      	ldr	r2, [pc, #484]	@ (8000854 <GPIO_Init+0x350>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d024      	beq.n	80006bc <GPIO_Init+0x1b8>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a78      	ldr	r2, [pc, #480]	@ (8000858 <GPIO_Init+0x354>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d01d      	beq.n	80006b8 <GPIO_Init+0x1b4>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a76      	ldr	r2, [pc, #472]	@ (800085c <GPIO_Init+0x358>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d016      	beq.n	80006b4 <GPIO_Init+0x1b0>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a75      	ldr	r2, [pc, #468]	@ (8000860 <GPIO_Init+0x35c>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d00f      	beq.n	80006b0 <GPIO_Init+0x1ac>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a73      	ldr	r2, [pc, #460]	@ (8000864 <GPIO_Init+0x360>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d008      	beq.n	80006ac <GPIO_Init+0x1a8>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a72      	ldr	r2, [pc, #456]	@ (8000868 <GPIO_Init+0x364>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d101      	bne.n	80006a8 <GPIO_Init+0x1a4>
 80006a4:	2307      	movs	r3, #7
 80006a6:	e00e      	b.n	80006c6 <GPIO_Init+0x1c2>
 80006a8:	2300      	movs	r3, #0
 80006aa:	e00c      	b.n	80006c6 <GPIO_Init+0x1c2>
 80006ac:	2306      	movs	r3, #6
 80006ae:	e00a      	b.n	80006c6 <GPIO_Init+0x1c2>
 80006b0:	2305      	movs	r3, #5
 80006b2:	e008      	b.n	80006c6 <GPIO_Init+0x1c2>
 80006b4:	2304      	movs	r3, #4
 80006b6:	e006      	b.n	80006c6 <GPIO_Init+0x1c2>
 80006b8:	2303      	movs	r3, #3
 80006ba:	e004      	b.n	80006c6 <GPIO_Init+0x1c2>
 80006bc:	2302      	movs	r3, #2
 80006be:	e002      	b.n	80006c6 <GPIO_Init+0x1c2>
 80006c0:	2301      	movs	r3, #1
 80006c2:	e000      	b.n	80006c6 <GPIO_Init+0x1c2>
 80006c4:	2300      	movs	r3, #0
 80006c6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

        SYSCFG_PCLK_EN();
 80006ca:	4b68      	ldr	r3, [pc, #416]	@ (800086c <GPIO_Init+0x368>)
 80006cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006ce:	4a67      	ldr	r2, [pc, #412]	@ (800086c <GPIO_Init+0x368>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6613      	str	r3, [r2, #96]	@ 0x60
        SYSCFG->EXTICR[index] &= ~(portcode << (offset * 4));
 80006d6:	4a66      	ldr	r2, [pc, #408]	@ (8000870 <GPIO_Init+0x36c>)
 80006d8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80006dc:	3302      	adds	r3, #2
 80006de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006e2:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 80006e6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	fa01 f303 	lsl.w	r3, r1, r3
 80006f0:	43db      	mvns	r3, r3
 80006f2:	4618      	mov	r0, r3
 80006f4:	495e      	ldr	r1, [pc, #376]	@ (8000870 <GPIO_Init+0x36c>)
 80006f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80006fa:	4002      	ands	r2, r0
 80006fc:	3302      	adds	r3, #2
 80006fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        SYSCFG->EXTICR[index] |= portcode << (offset * 4);
 8000702:	4a5b      	ldr	r2, [pc, #364]	@ (8000870 <GPIO_Init+0x36c>)
 8000704:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000708:	3302      	adds	r3, #2
 800070a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800070e:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8000712:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	fa01 f303 	lsl.w	r3, r1, r3
 800071c:	4618      	mov	r0, r3
 800071e:	4954      	ldr	r1, [pc, #336]	@ (8000870 <GPIO_Init+0x36c>)
 8000720:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000724:	4302      	orrs	r2, r0
 8000726:	3302      	adds	r3, #2
 8000728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Enable EXTI interupt delivery using IMR (Interupt mask register)
        *IMR |= (1 << pin_number);
 800072c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000734:	2101      	movs	r1, #1
 8000736:	fa01 f202 	lsl.w	r2, r1, r2
 800073a:	431a      	orrs	r2, r3
 800073c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800073e:	601a      	str	r2, [r3, #0]
	}
	// Configure speed
	uint32_t speed = pinConfig.GPIO_PinSpeed << (2 * pinConfig.GPIO_PinNumber);
 8000740:	7bbb      	ldrb	r3, [r7, #14]
 8000742:	461a      	mov	r2, r3
 8000744:	7b3b      	ldrb	r3, [r7, #12]
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	fa02 f303 	lsl.w	r3, r2, r3
 800074c:	627b      	str	r3, [r7, #36]	@ 0x24
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	689a      	ldr	r2, [r3, #8]
 8000754:	7b3b      	ldrb	r3, [r7, #12]
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	2103      	movs	r1, #3
 800075a:	fa01 f303 	lsl.w	r3, r1, r3
 800075e:	43db      	mvns	r3, r3
 8000760:	4619      	mov	r1, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	400a      	ands	r2, r1
 8000768:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= speed;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	6899      	ldr	r1, [r3, #8]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000776:	430a      	orrs	r2, r1
 8000778:	609a      	str	r2, [r3, #8]

	// Configure pull up/down
	uint32_t pull = pinConfig.GPIO_PinPuPdControl << (2 * pinConfig.GPIO_PinNumber);
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	461a      	mov	r2, r3
 800077e:	7b3b      	ldrb	r3, [r7, #12]
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	fa02 f303 	lsl.w	r3, r2, r3
 8000786:	623b      	str	r3, [r7, #32]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	68da      	ldr	r2, [r3, #12]
 800078e:	7b3b      	ldrb	r3, [r7, #12]
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	2103      	movs	r1, #3
 8000794:	fa01 f303 	lsl.w	r3, r1, r3
 8000798:	43db      	mvns	r3, r3
 800079a:	4619      	mov	r1, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	400a      	ands	r2, r1
 80007a2:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= pull;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	68d9      	ldr	r1, [r3, #12]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	6a3a      	ldr	r2, [r7, #32]
 80007b0:	430a      	orrs	r2, r1
 80007b2:	60da      	str	r2, [r3, #12]

	// Configure otype, output type
	uint32_t o_type = pinConfig.GPIO_PinOPType << pinConfig.GPIO_PinNumber;
 80007b4:	7c3b      	ldrb	r3, [r7, #16]
 80007b6:	461a      	mov	r2, r3
 80007b8:	7b3b      	ldrb	r3, [r7, #12]
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIOx->OTYPER |= o_type;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	6859      	ldr	r1, [r3, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	69fa      	ldr	r2, [r7, #28]
 80007cc:	430a      	orrs	r2, r1
 80007ce:	605a      	str	r2, [r3, #4]

	// Configure alt function
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	795b      	ldrb	r3, [r3, #5]
 80007d4:	2b02      	cmp	r3, #2
 80007d6:	d12f      	bne.n	8000838 <GPIO_Init+0x334>

		uint32_t index = pinConfig.GPIO_PinNumber / 8;
 80007d8:	7b3b      	ldrb	r3, [r7, #12]
 80007da:	08db      	lsrs	r3, r3, #3
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	61bb      	str	r3, [r7, #24]
		uint32_t offset = pinConfig.GPIO_PinNumber % 8;
 80007e0:	7b3b      	ldrb	r3, [r7, #12]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	617b      	str	r3, [r7, #20]

		pGPIOHandle->pGPIOx->AFR[index] &= ~(0xF << (4 * offset));
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	69ba      	ldr	r2, [r7, #24]
 80007ee:	3208      	adds	r2, #8
 80007f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	210f      	movs	r1, #15
 80007fa:	fa01 f303 	lsl.w	r3, r1, r3
 80007fe:	43db      	mvns	r3, r3
 8000800:	4619      	mov	r1, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4011      	ands	r1, r2
 8000808:	69ba      	ldr	r2, [r7, #24]
 800080a:	3208      	adds	r2, #8
 800080c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[index] |= pinConfig.GPIO_PinAltFunMode << (4 * offset);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	69ba      	ldr	r2, [r7, #24]
 8000816:	3208      	adds	r2, #8
 8000818:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800081c:	7c7b      	ldrb	r3, [r7, #17]
 800081e:	4619      	mov	r1, r3
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	fa01 f303 	lsl.w	r3, r1, r3
 8000828:	4619      	mov	r1, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4311      	orrs	r1, r2
 8000830:	69ba      	ldr	r2, [r7, #24]
 8000832:	3208      	adds	r2, #8
 8000834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000838:	bf00      	nop
 800083a:	3744      	adds	r7, #68	@ 0x44
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	4001040c 	.word	0x4001040c
 8000848:	40010408 	.word	0x40010408
 800084c:	40010400 	.word	0x40010400
 8000850:	48000400 	.word	0x48000400
 8000854:	48000800 	.word	0x48000800
 8000858:	48000c00 	.word	0x48000c00
 800085c:	48001000 	.word	0x48001000
 8000860:	48001400 	.word	0x48001400
 8000864:	48001800 	.word	0x48001800
 8000868:	48001c00 	.word	0x48001c00
 800086c:	40021000 	.word	0x40021000
 8000870:	40010000 	.word	0x40010000

08000874 <GPIO_IRQInterruptConfig>:

void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber) {
	pGPIOx->ODR = pGPIOx->ODR ^ (1 << pinNumber);
}

void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t isEnable) {
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	460a      	mov	r2, r1
 800087e:	71fb      	strb	r3, [r7, #7]
 8000880:	4613      	mov	r3, r2
 8000882:	71bb      	strb	r3, [r7, #6]
    if (isEnable == ENABLE) {
 8000884:	79bb      	ldrb	r3, [r7, #6]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d133      	bne.n	80008f2 <GPIO_IRQInterruptConfig+0x7e>
        if (IRQNumber <= 31) {
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2b1f      	cmp	r3, #31
 800088e:	d80a      	bhi.n	80008a6 <GPIO_IRQInterruptConfig+0x32>
            // ISER0
            *NVIC_ISER0 |= (1 << IRQNumber);
 8000890:	4b35      	ldr	r3, [pc, #212]	@ (8000968 <GPIO_IRQInterruptConfig+0xf4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	79fa      	ldrb	r2, [r7, #7]
 8000896:	2101      	movs	r1, #1
 8000898:	fa01 f202 	lsl.w	r2, r1, r2
 800089c:	4611      	mov	r1, r2
 800089e:	4a32      	ldr	r2, [pc, #200]	@ (8000968 <GPIO_IRQInterruptConfig+0xf4>)
 80008a0:	430b      	orrs	r3, r1
 80008a2:	6013      	str	r3, [r2, #0]
        } else if (IRQNumber >= 64 && IRQNumber < 96) {
            // ICER2
            *NVIC_ICER2 |= (1 << (IRQNumber % 32));
        }
    }
}
 80008a4:	e059      	b.n	800095a <GPIO_IRQInterruptConfig+0xe6>
        } else if (IRQNumber > 32 && IRQNumber < 64) {
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b20      	cmp	r3, #32
 80008aa:	d90f      	bls.n	80008cc <GPIO_IRQInterruptConfig+0x58>
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80008b0:	d80c      	bhi.n	80008cc <GPIO_IRQInterruptConfig+0x58>
            *NVIC_ISER1 |= (1 << (IRQNumber % 32));
 80008b2:	4b2e      	ldr	r3, [pc, #184]	@ (800096c <GPIO_IRQInterruptConfig+0xf8>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	79fa      	ldrb	r2, [r7, #7]
 80008b8:	f002 021f 	and.w	r2, r2, #31
 80008bc:	2101      	movs	r1, #1
 80008be:	fa01 f202 	lsl.w	r2, r1, r2
 80008c2:	4611      	mov	r1, r2
 80008c4:	4a29      	ldr	r2, [pc, #164]	@ (800096c <GPIO_IRQInterruptConfig+0xf8>)
 80008c6:	430b      	orrs	r3, r1
 80008c8:	6013      	str	r3, [r2, #0]
 80008ca:	e046      	b.n	800095a <GPIO_IRQInterruptConfig+0xe6>
        } else if (IRQNumber >= 64 && IRQNumber < 96) {
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80008d0:	d943      	bls.n	800095a <GPIO_IRQInterruptConfig+0xe6>
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	2b5f      	cmp	r3, #95	@ 0x5f
 80008d6:	d840      	bhi.n	800095a <GPIO_IRQInterruptConfig+0xe6>
            *NVIC_ISER2 |= (1 << IRQNumber % 32);
 80008d8:	4b25      	ldr	r3, [pc, #148]	@ (8000970 <GPIO_IRQInterruptConfig+0xfc>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	79fa      	ldrb	r2, [r7, #7]
 80008de:	f002 021f 	and.w	r2, r2, #31
 80008e2:	2101      	movs	r1, #1
 80008e4:	fa01 f202 	lsl.w	r2, r1, r2
 80008e8:	4611      	mov	r1, r2
 80008ea:	4a21      	ldr	r2, [pc, #132]	@ (8000970 <GPIO_IRQInterruptConfig+0xfc>)
 80008ec:	430b      	orrs	r3, r1
 80008ee:	6013      	str	r3, [r2, #0]
}
 80008f0:	e033      	b.n	800095a <GPIO_IRQInterruptConfig+0xe6>
        if (IRQNumber <= 31) {
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b1f      	cmp	r3, #31
 80008f6:	d80a      	bhi.n	800090e <GPIO_IRQInterruptConfig+0x9a>
            *NVIC_ICER0 |= (1 << IRQNumber);
 80008f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000974 <GPIO_IRQInterruptConfig+0x100>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	79fa      	ldrb	r2, [r7, #7]
 80008fe:	2101      	movs	r1, #1
 8000900:	fa01 f202 	lsl.w	r2, r1, r2
 8000904:	4611      	mov	r1, r2
 8000906:	4a1b      	ldr	r2, [pc, #108]	@ (8000974 <GPIO_IRQInterruptConfig+0x100>)
 8000908:	430b      	orrs	r3, r1
 800090a:	6013      	str	r3, [r2, #0]
}
 800090c:	e025      	b.n	800095a <GPIO_IRQInterruptConfig+0xe6>
        } else if (IRQNumber > 32 && IRQNumber < 64) {
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	2b20      	cmp	r3, #32
 8000912:	d90f      	bls.n	8000934 <GPIO_IRQInterruptConfig+0xc0>
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	2b3f      	cmp	r3, #63	@ 0x3f
 8000918:	d80c      	bhi.n	8000934 <GPIO_IRQInterruptConfig+0xc0>
            *NVIC_ICER1 |= (1 << (IRQNumber % 32));
 800091a:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <GPIO_IRQInterruptConfig+0x104>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	79fa      	ldrb	r2, [r7, #7]
 8000920:	f002 021f 	and.w	r2, r2, #31
 8000924:	2101      	movs	r1, #1
 8000926:	fa01 f202 	lsl.w	r2, r1, r2
 800092a:	4611      	mov	r1, r2
 800092c:	4a12      	ldr	r2, [pc, #72]	@ (8000978 <GPIO_IRQInterruptConfig+0x104>)
 800092e:	430b      	orrs	r3, r1
 8000930:	6013      	str	r3, [r2, #0]
 8000932:	e012      	b.n	800095a <GPIO_IRQInterruptConfig+0xe6>
        } else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	2b3f      	cmp	r3, #63	@ 0x3f
 8000938:	d90f      	bls.n	800095a <GPIO_IRQInterruptConfig+0xe6>
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	2b5f      	cmp	r3, #95	@ 0x5f
 800093e:	d80c      	bhi.n	800095a <GPIO_IRQInterruptConfig+0xe6>
            *NVIC_ICER2 |= (1 << (IRQNumber % 32));
 8000940:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <GPIO_IRQInterruptConfig+0x108>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	79fa      	ldrb	r2, [r7, #7]
 8000946:	f002 021f 	and.w	r2, r2, #31
 800094a:	2101      	movs	r1, #1
 800094c:	fa01 f202 	lsl.w	r2, r1, r2
 8000950:	4611      	mov	r1, r2
 8000952:	4a0a      	ldr	r2, [pc, #40]	@ (800097c <GPIO_IRQInterruptConfig+0x108>)
 8000954:	430b      	orrs	r3, r1
 8000956:	6013      	str	r3, [r2, #0]
}
 8000958:	e7ff      	b.n	800095a <GPIO_IRQInterruptConfig+0xe6>
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000e100 	.word	0xe000e100
 800096c:	e000e104 	.word	0xe000e104
 8000970:	e000e108 	.word	0xe000e108
 8000974:	e000e180 	.word	0xe000e180
 8000978:	e000e184 	.word	0xe000e184
 800097c:	e000e188 	.word	0xe000e188

08000980 <GPIO_IRQHandle>:
    IRQPriority = IRQPriority << NO_PR_BITS;

    *(NVIC_PR_BASE_ADDR + index) |= IRQPriority << (offset * 8);
}

void GPIO_IRQHandle(uint8_t pinNumber) {
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
    // clear the EXTI PR (pending) register
    if (EXTI->PR1 & (1 << pinNumber)) {
 800098a:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <GPIO_IRQHandle+0x3c>)
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	79fa      	ldrb	r2, [r7, #7]
 8000990:	2101      	movs	r1, #1
 8000992:	fa01 f202 	lsl.w	r2, r1, r2
 8000996:	4013      	ands	r3, r2
 8000998:	2b00      	cmp	r3, #0
 800099a:	d009      	beq.n	80009b0 <GPIO_IRQHandle+0x30>
        EXTI->PR1 |= (1 << pinNumber);
 800099c:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <GPIO_IRQHandle+0x3c>)
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	79fa      	ldrb	r2, [r7, #7]
 80009a2:	2101      	movs	r1, #1
 80009a4:	fa01 f202 	lsl.w	r2, r1, r2
 80009a8:	4611      	mov	r1, r2
 80009aa:	4a04      	ldr	r2, [pc, #16]	@ (80009bc <GPIO_IRQHandle+0x3c>)
 80009ac:	430b      	orrs	r3, r1
 80009ae:	6153      	str	r3, [r2, #20]
    }
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	40010400 	.word	0x40010400

080009c0 <SPI_PCLK>:
#include "stm32l476xx_spi_driver.h"

void SPI_PCLK(SPI_RegDef_t *pSPIx, uint8_t isEnable) {
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	460b      	mov	r3, r1
 80009ca:	70fb      	strb	r3, [r7, #3]
    if (isEnable == ENABLE) {
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d120      	bne.n	8000a14 <SPI_PCLK+0x54>
        if (pSPIx == SPI1) {
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a22      	ldr	r2, [pc, #136]	@ (8000a60 <SPI_PCLK+0xa0>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d106      	bne.n	80009e8 <SPI_PCLK+0x28>
            SPI1_PCLK_EN();
 80009da:	4b22      	ldr	r3, [pc, #136]	@ (8000a64 <SPI_PCLK+0xa4>)
 80009dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009de:	4a21      	ldr	r2, [pc, #132]	@ (8000a64 <SPI_PCLK+0xa4>)
 80009e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009e4:	6613      	str	r3, [r2, #96]	@ 0x60
            SPI2_PCLK_DI();
        } else if (pSPIx == SPI3) {
            SPI3_PCLK_DI();
        }
    }
}
 80009e6:	e035      	b.n	8000a54 <SPI_PCLK+0x94>
        } else if (pSPIx == SPI2) {
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000a68 <SPI_PCLK+0xa8>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d106      	bne.n	80009fe <SPI_PCLK+0x3e>
            SPI2_PCLK_EN();
 80009f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a64 <SPI_PCLK+0xa4>)
 80009f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a64 <SPI_PCLK+0xa4>)
 80009f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009fa:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80009fc:	e02a      	b.n	8000a54 <SPI_PCLK+0x94>
        } else if (pSPIx == SPI3) {
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a1a      	ldr	r2, [pc, #104]	@ (8000a6c <SPI_PCLK+0xac>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d126      	bne.n	8000a54 <SPI_PCLK+0x94>
            SPI3_PCLK_EN();
 8000a06:	4b17      	ldr	r3, [pc, #92]	@ (8000a64 <SPI_PCLK+0xa4>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a0a:	4a16      	ldr	r2, [pc, #88]	@ (8000a64 <SPI_PCLK+0xa4>)
 8000a0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a10:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000a12:	e01f      	b.n	8000a54 <SPI_PCLK+0x94>
        if (pSPIx == SPI1) {
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a12      	ldr	r2, [pc, #72]	@ (8000a60 <SPI_PCLK+0xa0>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d106      	bne.n	8000a2a <SPI_PCLK+0x6a>
            SPI1_PCLK_DI();
 8000a1c:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <SPI_PCLK+0xa4>)
 8000a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a20:	4a10      	ldr	r2, [pc, #64]	@ (8000a64 <SPI_PCLK+0xa4>)
 8000a22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a26:	6613      	str	r3, [r2, #96]	@ 0x60
}
 8000a28:	e014      	b.n	8000a54 <SPI_PCLK+0x94>
        } else if (pSPIx == SPI2) {
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a0e      	ldr	r2, [pc, #56]	@ (8000a68 <SPI_PCLK+0xa8>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d106      	bne.n	8000a40 <SPI_PCLK+0x80>
            SPI2_PCLK_DI();
 8000a32:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <SPI_PCLK+0xa4>)
 8000a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a36:	4a0b      	ldr	r2, [pc, #44]	@ (8000a64 <SPI_PCLK+0xa4>)
 8000a38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000a3c:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000a3e:	e009      	b.n	8000a54 <SPI_PCLK+0x94>
        } else if (pSPIx == SPI3) {
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a0a      	ldr	r2, [pc, #40]	@ (8000a6c <SPI_PCLK+0xac>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d105      	bne.n	8000a54 <SPI_PCLK+0x94>
            SPI3_PCLK_DI();
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <SPI_PCLK+0xa4>)
 8000a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a4c:	4a05      	ldr	r2, [pc, #20]	@ (8000a64 <SPI_PCLK+0xa4>)
 8000a4e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000a52:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	40013000 	.word	0x40013000
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40003800 	.word	0x40003800
 8000a6c:	40003c00 	.word	0x40003c00

08000a70 <SPI_Init>:

void SPI_Init(SPI_Handle_t *pSPIHandle) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
    SPI_PCLK(pSPIHandle->pSPIx, ENABLE);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff ff9e 	bl	80009c0 <SPI_PCLK>

    SPI_Config_t *config = &pSPIHandle->SPIConfig;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3304      	adds	r3, #4
 8000a88:	60fb      	str	r3, [r7, #12]

    // Device mode
    if (config->SPI_DeviceMode == SPI_DEVICE_MODE_MASTER) {
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d108      	bne.n	8000aa4 <SPI_Init+0x34>
        pSPIHandle->pSPIx->CR1 |= 0x1 << SPI_CR1_MSTR;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f042 0204 	orr.w	r2, r2, #4
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	e007      	b.n	8000ab4 <SPI_Init+0x44>
    } else {
        pSPIHandle->pSPIx->CR1 &= ~(0x1 << SPI_CR1_MSTR);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f022 0204 	bic.w	r2, r2, #4
 8000ab2:	601a      	str	r2, [r3, #0]
    }

    // Bus config
    if (config->SPI_BusConfig == SPI_BUS_CONFIG_FD) {
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	785b      	ldrb	r3, [r3, #1]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d110      	bne.n	8000ade <SPI_Init+0x6e>
        // 2-line unidirectional
        pSPIHandle->pSPIx->CR1 &= ~(1 << SPI_CR1_BIDIMODE);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000aca:	601a      	str	r2, [r3, #0]

        // Must be cleared in uni 2 line
        pSPIHandle->pSPIx->CR1 &= ~(1 << SPI_CR1_RXONLY);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	e020      	b.n	8000b20 <SPI_Init+0xb0>

    } else if (config->SPI_BusConfig == SPI_BUS_CONFIG_HD) {
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	785b      	ldrb	r3, [r3, #1]
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d108      	bne.n	8000af8 <SPI_Init+0x88>
        pSPIHandle->pSPIx->CR1 |= 1 << SPI_CR1_BIDIMODE;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	e013      	b.n	8000b20 <SPI_Init+0xb0>
    } else if (config->SPI_BusConfig == SPI_BUS_CONFIG_S_RXONLY) {
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	785b      	ldrb	r3, [r3, #1]
 8000afc:	2b03      	cmp	r3, #3
 8000afe:	d10f      	bne.n	8000b20 <SPI_Init+0xb0>
        // 2-line unidirectional, tho we use but one line
        pSPIHandle->pSPIx->CR1 &= ~(1 << SPI_CR1_BIDIMODE);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000b0e:	601a      	str	r2, [r3, #0]

        // Must be cleared in uni 2 line
        pSPIHandle->pSPIx->CR1 &= ~(1 << SPI_CR1_RXONLY);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000b1e:	601a      	str	r2, [r3, #0]
    }

    // Clock speed
    pSPIHandle->pSPIx->CR1 &= ~(0x7 << SPI_CR1_BR);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8000b2e:	601a      	str	r2, [r3, #0]
    pSPIHandle->pSPIx->CR1 |= config->SPI_SclkSpeed << SPI_CR1_BR;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	6819      	ldr	r1, [r3, #0]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	789b      	ldrb	r3, [r3, #2]
 8000b3a:	00da      	lsls	r2, r3, #3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	430a      	orrs	r2, r1
 8000b42:	601a      	str	r2, [r3, #0]

    // DFF
    pSPIHandle->pSPIx->CR2 &= ~(0xF << SPI_CR2_DS);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	685a      	ldr	r2, [r3, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 8000b52:	605a      	str	r2, [r3, #4]

    if(config->SPI_DFF == SPI_DFF_8BITS) {
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	78db      	ldrb	r3, [r3, #3]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d108      	bne.n	8000b6e <SPI_Init+0xfe>
        pSPIHandle->pSPIx->CR2 |= 0x7 << SPI_CR2_DS;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	685a      	ldr	r2, [r3, #4]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	e007      	b.n	8000b7e <SPI_Init+0x10e>
    } else {
        pSPIHandle->pSPIx->CR2 |= 0xF << SPI_CR2_DS;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f442 6270 	orr.w	r2, r2, #3840	@ 0xf00
 8000b7c:	605a      	str	r2, [r3, #4]
    }

    // CPOL
    if (config->SPI_CPOL == SPI_CPOL_HIGH) {
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	791b      	ldrb	r3, [r3, #4]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d108      	bne.n	8000b98 <SPI_Init+0x128>
        pSPIHandle->pSPIx->CR1 |= 1 << SPI_CR1_CPOL;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f042 0202 	orr.w	r2, r2, #2
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	e007      	b.n	8000ba8 <SPI_Init+0x138>
    } else {
        pSPIHandle->pSPIx->CR1 &= ~(1 << SPI_CR1_CPOL);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f022 0202 	bic.w	r2, r2, #2
 8000ba6:	601a      	str	r2, [r3, #0]
    }

    // CPHA
    if (config->SPI_CPHA == SPI_CPAH_HIGH) {
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	795b      	ldrb	r3, [r3, #5]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d108      	bne.n	8000bc2 <SPI_Init+0x152>
        pSPIHandle->pSPIx->CR1 |= 1 << SPI_CR1_CPHA;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f042 0201 	orr.w	r2, r2, #1
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	e007      	b.n	8000bd2 <SPI_Init+0x162>
    } else {
        pSPIHandle->pSPIx->CR1 &= ~(1 << SPI_CR1_CPHA);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f022 0201 	bic.w	r2, r2, #1
 8000bd0:	601a      	str	r2, [r3, #0]
    }

    // SSM
    if (config->SPI_SSM == SPI_SSM_EN) {
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	799b      	ldrb	r3, [r3, #6]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d10e      	bne.n	8000bf8 <SPI_Init+0x188>
        pSPIHandle->pSPIx->CR1 |= 1 << SPI_CR1_SSM;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000be8:	601a      	str	r2, [r3, #0]

        SPI_SSIConfig(pSPIHandle->pSPIx, ENABLE);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2101      	movs	r1, #1
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 f87e 	bl	8000cf2 <SPI_SSIConfig>
    } else {
        pSPIHandle->pSPIx->CR1 &= ~(1 << SPI_CR1_SSM);

        SPI_SSIConfig(pSPIHandle->pSPIx, DISABLE);
    }
}
 8000bf6:	e00d      	b.n	8000c14 <SPI_Init+0x1a4>
        pSPIHandle->pSPIx->CR1 &= ~(1 << SPI_CR1_SSM);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000c06:	601a      	str	r2, [r3, #0]
        SPI_SSIConfig(pSPIHandle->pSPIx, DISABLE);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f86f 	bl	8000cf2 <SPI_SSIConfig>
}
 8000c14:	bf00      	nop
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <SPI_SendData>:
    }

    return FLAG_RESET;
}

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *source, uint32_t size) {
 8000c1c:	b480      	push	{r7}
 8000c1e:	b087      	sub	sp, #28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
    if (size == 0) {
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d040      	beq.n	8000cb0 <SPI_SendData+0x94>
        return;
    }

    uint16_t is_16 = (pSPIx->CR2 >> SPI_CR2_DS & 0xF) == 0xF;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	0a1b      	lsrs	r3, r3, #8
 8000c34:	f003 030f 	and.w	r3, r3, #15
 8000c38:	2b0f      	cmp	r3, #15
 8000c3a:	bf0c      	ite	eq
 8000c3c:	2301      	moveq	r3, #1
 8000c3e:	2300      	movne	r3, #0
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	82bb      	strh	r3, [r7, #20]

    // Alternative: source++
    uint8_t index = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	75fb      	strb	r3, [r7, #23]

    while (size != 0) {
 8000c48:	e02e      	b.n	8000ca8 <SPI_SendData+0x8c>
        // Whait while TX buffer is not empty

        // Alternaative: (pSPIx->SR >> SPI_SR_TXE & 0x1) == 0
        while ((pSPIx->SR & (1 << 1)) == 0)
 8000c4a:	bf00      	nop
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d0f9      	beq.n	8000c4c <SPI_SendData+0x30>
            ;

        // Place a single or two bytes in the data register
        if (is_16) {
 8000c58:	8abb      	ldrh	r3, [r7, #20]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d017      	beq.n	8000c8e <SPI_SendData+0x72>
            uint16_t low = *(source + index++);
 8000c5e:	7dfb      	ldrb	r3, [r7, #23]
 8000c60:	1c5a      	adds	r2, r3, #1
 8000c62:	75fa      	strb	r2, [r7, #23]
 8000c64:	461a      	mov	r2, r3
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	4413      	add	r3, r2
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	827b      	strh	r3, [r7, #18]
            uint16_t high = *(source + index++);
 8000c6e:	7dfb      	ldrb	r3, [r7, #23]
 8000c70:	1c5a      	adds	r2, r3, #1
 8000c72:	75fa      	strb	r2, [r7, #23]
 8000c74:	461a      	mov	r2, r3
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	4413      	add	r3, r2
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	823b      	strh	r3, [r7, #16]

            // Alternative *((uint16_t*)source + index++)
            pSPIx->DR = high << 8 | low;
 8000c7e:	8a3b      	ldrh	r3, [r7, #16]
 8000c80:	021a      	lsls	r2, r3, #8
 8000c82:	8a7b      	ldrh	r3, [r7, #18]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	461a      	mov	r2, r3
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	e009      	b.n	8000ca2 <SPI_SendData+0x86>
        } else {
            pSPIx->DR = *(source + index++);
 8000c8e:	7dfb      	ldrb	r3, [r7, #23]
 8000c90:	1c5a      	adds	r2, r3, #1
 8000c92:	75fa      	strb	r2, [r7, #23]
 8000c94:	461a      	mov	r2, r3
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	4413      	add	r3, r2
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	60da      	str	r2, [r3, #12]
        }

        size--;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	607b      	str	r3, [r7, #4]
    while (size != 0) {
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1cd      	bne.n	8000c4a <SPI_SendData+0x2e>
 8000cae:	e000      	b.n	8000cb2 <SPI_SendData+0x96>
        return;
 8000cb0:	bf00      	nop
    }
}
 8000cb2:	371c      	adds	r7, #28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <SPI_Enable>:

void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t isEnable) {}
void SPI_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority) {}
void SPI_IRQHandle(SPI_Handle_t *pHandle) {}

void SPI_Enable(SPI_RegDef_t *pSPIx, uint8_t isEnable) {
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	70fb      	strb	r3, [r7, #3]
    // SSM == 0, SPE == 1 => NSS LOW when SPE == 1
    // SSM == 0, SPE == 0 => NSS high when SPE 0
    // If SSOE is set to 1

    if (isEnable == ENABLE) {
 8000cc8:	78fb      	ldrb	r3, [r7, #3]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d106      	bne.n	8000cdc <SPI_Enable+0x20>
        pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	601a      	str	r2, [r3, #0]
    } else {
        pSPIx->CR1 &= !(1 << SPI_CR1_SPE);
    }
}
 8000cda:	e004      	b.n	8000ce6 <SPI_Enable+0x2a>
        pSPIx->CR1 &= !(1 << SPI_CR1_SPE);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <SPI_SSIConfig>:

void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t isEnable) {
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	70fb      	strb	r3, [r7, #3]
    if (isEnable == ENABLE) {
 8000cfe:	78fb      	ldrb	r3, [r7, #3]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d106      	bne.n	8000d12 <SPI_SSIConfig+0x20>
        pSPIx->CR1 |= (1 << SPI_CR1_SSI);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	601a      	str	r2, [r3, #0]
    } else {
        pSPIx->CR1 &= !(1 << SPI_CR1_SSI);
    }
}
 8000d10:	e004      	b.n	8000d1c <SPI_SSIConfig+0x2a>
        pSPIx->CR1 &= !(1 << SPI_CR1_SSI);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <SPI_SSOEConfig>:

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t isEnable) {
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	70fb      	strb	r3, [r7, #3]
    if (isEnable == ENABLE) {
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d106      	bne.n	8000d48 <SPI_SSOEConfig+0x20>
        pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f043 0204 	orr.w	r2, r3, #4
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	605a      	str	r2, [r3, #4]
    } else {
        pSPIx->CR2 &= !(1 << SPI_CR2_SSOE);
    }
}
 8000d46:	e004      	b.n	8000d52 <SPI_SSOEConfig+0x2a>
        pSPIx->CR2 &= !(1 << SPI_CR2_SSOE);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	605a      	str	r2, [r3, #4]
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <__libc_init_array>:
 8000d60:	b570      	push	{r4, r5, r6, lr}
 8000d62:	4d0d      	ldr	r5, [pc, #52]	@ (8000d98 <__libc_init_array+0x38>)
 8000d64:	4c0d      	ldr	r4, [pc, #52]	@ (8000d9c <__libc_init_array+0x3c>)
 8000d66:	1b64      	subs	r4, r4, r5
 8000d68:	10a4      	asrs	r4, r4, #2
 8000d6a:	2600      	movs	r6, #0
 8000d6c:	42a6      	cmp	r6, r4
 8000d6e:	d109      	bne.n	8000d84 <__libc_init_array+0x24>
 8000d70:	4d0b      	ldr	r5, [pc, #44]	@ (8000da0 <__libc_init_array+0x40>)
 8000d72:	4c0c      	ldr	r4, [pc, #48]	@ (8000da4 <__libc_init_array+0x44>)
 8000d74:	f000 f818 	bl	8000da8 <_init>
 8000d78:	1b64      	subs	r4, r4, r5
 8000d7a:	10a4      	asrs	r4, r4, #2
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	42a6      	cmp	r6, r4
 8000d80:	d105      	bne.n	8000d8e <__libc_init_array+0x2e>
 8000d82:	bd70      	pop	{r4, r5, r6, pc}
 8000d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d88:	4798      	blx	r3
 8000d8a:	3601      	adds	r6, #1
 8000d8c:	e7ee      	b.n	8000d6c <__libc_init_array+0xc>
 8000d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d92:	4798      	blx	r3
 8000d94:	3601      	adds	r6, #1
 8000d96:	e7f2      	b.n	8000d7e <__libc_init_array+0x1e>
 8000d98:	08000dec 	.word	0x08000dec
 8000d9c:	08000dec 	.word	0x08000dec
 8000da0:	08000dec 	.word	0x08000dec
 8000da4:	08000df0 	.word	0x08000df0

08000da8 <_init>:
 8000da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000daa:	bf00      	nop
 8000dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dae:	bc08      	pop	{r3}
 8000db0:	469e      	mov	lr, r3
 8000db2:	4770      	bx	lr

08000db4 <_fini>:
 8000db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000db6:	bf00      	nop
 8000db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dba:	bc08      	pop	{r3}
 8000dbc:	469e      	mov	lr, r3
 8000dbe:	4770      	bx	lr
