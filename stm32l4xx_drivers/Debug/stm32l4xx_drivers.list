
stm32l4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b38  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000cbc  08000cbc  00001cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000cc8  08000cc8  00002024  2**0
                  CONTENTS
  4 .ARM          00000008  08000cc8  08000cc8  00001cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000cd0  08000cd0  00002024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cd0  08000cd0  00001cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000cd4  08000cd4  00001cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08000cd8  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00002024  2**0
                  CONTENTS
 10 .bss          0000001c  20000024  20000024  00002024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000040  20000040  00002024  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002024  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001455  00000000  00000000  0000204e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003cf  00000000  00000000  000034a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  00003878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000e0  00000000  00000000  000039b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001640  00000000  00000000  00003a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000019fe  00000000  00000000  000050d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a095  00000000  00000000  00006ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00010b63  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000042c  00000000  00000000  00010ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  00010fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000024 	.word	0x20000024
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08000ca4 	.word	0x08000ca4

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000028 	.word	0x20000028
 80001c0:	08000ca4 	.word	0x08000ca4

080001c4 <strlen>:
 80001c4:	4603      	mov	r3, r0
 80001c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ca:	2a00      	cmp	r2, #0
 80001cc:	d1fb      	bne.n	80001c6 <strlen+0x2>
 80001ce:	1a18      	subs	r0, r3, r0
 80001d0:	3801      	subs	r0, #1
 80001d2:	4770      	bx	lr

080001d4 <delay>:
        .UASRT_ParityControl = USART_PARITY_DISABLE,
        .UASRT_HwFlowControl = USART_HW_FLOW_CTRL_NONE
    }
};

void delay(uint32_t time) {
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < time; i++)
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
 80001e0:	e002      	b.n	80001e8 <delay+0x14>
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	3301      	adds	r3, #1
 80001e6:	60fb      	str	r3, [r7, #12]
 80001e8:	68fa      	ldr	r2, [r7, #12]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	429a      	cmp	r2, r3
 80001ee:	d3f8      	bcc.n	80001e2 <delay+0xe>
        ;
}
 80001f0:	bf00      	nop
 80001f2:	bf00      	nop
 80001f4:	3714      	adds	r7, #20
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr

080001fc <GPIO_Setup>:

void GPIO_Setup() {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b086      	sub	sp, #24
 8000200:	af00      	add	r7, sp, #0
    GPIO_Handle_t gpio_uart = {
 8000202:	f107 030c 	add.w	r3, r7, #12
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000212:	60fb      	str	r3, [r7, #12]
 8000214:	2302      	movs	r3, #2
 8000216:	747b      	strb	r3, [r7, #17]
 8000218:	2302      	movs	r3, #2
 800021a:	74bb      	strb	r3, [r7, #18]
 800021c:	2307      	movs	r3, #7
 800021e:	757b      	strb	r3, [r7, #21]
                    .GPIO_PinOPType = GPIO_OP_TYPE_PP,
                    .GPIO_PinAltFunMode = GPIO_AF_7
            }
    };

    GPIO_PCLK(gpio_uart.pGPIOx, ENABLE);
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	2101      	movs	r1, #1
 8000224:	4618      	mov	r0, r3
 8000226:	f000 f899 	bl	800035c <GPIO_PCLK>

    // TX
    gpio_uart.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_N9;
 800022a:	2309      	movs	r3, #9
 800022c:	743b      	strb	r3, [r7, #16]
    GPIO_Init(&gpio_uart);
 800022e:	f107 030c 	add.w	r3, r7, #12
 8000232:	4618      	mov	r0, r3
 8000234:	f000 f960 	bl	80004f8 <GPIO_Init>

    // RX
    gpio_uart.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_N10;
 8000238:	230a      	movs	r3, #10
 800023a:	743b      	strb	r3, [r7, #16]
    GPIO_Init(&gpio_uart);
 800023c:	f107 030c 	add.w	r3, r7, #12
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f959 	bl	80004f8 <GPIO_Init>

    GPIO_Handle_t btn_handle = {
 8000246:	4a09      	ldr	r2, [pc, #36]	@ (800026c <GPIO_Setup+0x70>)
 8000248:	463b      	mov	r3, r7
 800024a:	ca07      	ldmia	r2, {r0, r1, r2}
 800024c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                    .GPIO_PinOPType = GPIO_OP_TYPE_PP,
                    .GPIO_PinAltFunMode = 0
            }
    };

    GPIO_PCLK(btn_handle.pGPIOx, ENABLE);
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	2101      	movs	r1, #1
 8000254:	4618      	mov	r0, r3
 8000256:	f000 f881 	bl	800035c <GPIO_PCLK>

    GPIO_Init(&btn_handle);
 800025a:	463b      	mov	r3, r7
 800025c:	4618      	mov	r0, r3
 800025e:	f000 f94b 	bl	80004f8 <GPIO_Init>
}
 8000262:	bf00      	nop
 8000264:	3718      	adds	r7, #24
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	08000cbc 	.word	0x08000cbc

08000270 <USART_Setup>:

void USART_Setup() {
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
    USART_PCLK(USARTHandle.pUSARTx, ENABLE);
 8000274:	4b08      	ldr	r3, [pc, #32]	@ (8000298 <USART_Setup+0x28>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2101      	movs	r1, #1
 800027a:	4618      	mov	r0, r3
 800027c:	f000 fb08 	bl	8000890 <USART_PCLK>

    USART_Init(&USARTHandle);
 8000280:	4805      	ldr	r0, [pc, #20]	@ (8000298 <USART_Setup+0x28>)
 8000282:	f000 fb53 	bl	800092c <USART_Init>

    USART_Enable(USARTHandle.pUSARTx, ENABLE);
 8000286:	4b04      	ldr	r3, [pc, #16]	@ (8000298 <USART_Setup+0x28>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2101      	movs	r1, #1
 800028c:	4618      	mov	r0, r3
 800028e:	f000 fcd3 	bl	8000c38 <USART_Enable>
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000014 	.word	0x20000014

0800029c <main>:
// 115200
// 1 stop bit
// 8 bits
// no parity

int main() {
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
    GPIO_Setup();
 80002a2:	f7ff ffab 	bl	80001fc <GPIO_Setup>

    USART_Setup();
 80002a6:	f7ff ffe3 	bl	8000270 <USART_Setup>

    uint8_t is_down = 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	71fb      	strb	r3, [r7, #7]

    while (1) {
        uint8_t button_state = GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_N2);
 80002ae:	2102      	movs	r1, #2
 80002b0:	4812      	ldr	r0, [pc, #72]	@ (80002fc <main+0x60>)
 80002b2:	f000 fad9 	bl	8000868 <GPIO_ReadFromInputPin>
 80002b6:	4603      	mov	r3, r0
 80002b8:	71bb      	strb	r3, [r7, #6]

        if (button_state == 0 && is_down == 0) {
 80002ba:	79bb      	ldrb	r3, [r7, #6]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d113      	bne.n	80002e8 <main+0x4c>
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d110      	bne.n	80002e8 <main+0x4c>
            is_down = 1;
 80002c6:	2301      	movs	r3, #1
 80002c8:	71fb      	strb	r3, [r7, #7]
            delay(50000);
 80002ca:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80002ce:	f7ff ff81 	bl	80001d4 <delay>

            USART_Write(&USARTHandle, data, strlen((char*)data));
 80002d2:	480b      	ldr	r0, [pc, #44]	@ (8000300 <main+0x64>)
 80002d4:	f7ff ff76 	bl	80001c4 <strlen>
 80002d8:	4603      	mov	r3, r0
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	461a      	mov	r2, r3
 80002de:	4908      	ldr	r1, [pc, #32]	@ (8000300 <main+0x64>)
 80002e0:	4808      	ldr	r0, [pc, #32]	@ (8000304 <main+0x68>)
 80002e2:	f000 fc51 	bl	8000b88 <USART_Write>
 80002e6:	e007      	b.n	80002f8 <main+0x5c>
        } else if (button_state == 1 && is_down != 0) {
 80002e8:	79bb      	ldrb	r3, [r7, #6]
 80002ea:	2b01      	cmp	r3, #1
 80002ec:	d1df      	bne.n	80002ae <main+0x12>
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d0dc      	beq.n	80002ae <main+0x12>
            is_down = 0;
 80002f4:	2300      	movs	r3, #0
 80002f6:	71fb      	strb	r3, [r7, #7]
    while (1) {
 80002f8:	e7d9      	b.n	80002ae <main+0x12>
 80002fa:	bf00      	nop
 80002fc:	48000800 	.word	0x48000800
 8000300:	20000000 	.word	0x20000000
 8000304:	20000014 	.word	0x20000014

08000308 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000308:	480d      	ldr	r0, [pc, #52]	@ (8000340 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800030a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800030c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000310:	480c      	ldr	r0, [pc, #48]	@ (8000344 <LoopForever+0x6>)
  ldr r1, =_edata
 8000312:	490d      	ldr	r1, [pc, #52]	@ (8000348 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000314:	4a0d      	ldr	r2, [pc, #52]	@ (800034c <LoopForever+0xe>)
  movs r3, #0
 8000316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000318:	e002      	b.n	8000320 <LoopCopyDataInit>

0800031a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800031c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800031e:	3304      	adds	r3, #4

08000320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000324:	d3f9      	bcc.n	800031a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000326:	4a0a      	ldr	r2, [pc, #40]	@ (8000350 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000328:	4c0a      	ldr	r4, [pc, #40]	@ (8000354 <LoopForever+0x16>)
  movs r3, #0
 800032a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800032c:	e001      	b.n	8000332 <LoopFillZerobss>

0800032e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800032e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000330:	3204      	adds	r2, #4

08000332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000334:	d3fb      	bcc.n	800032e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000336:	f000 fc91 	bl	8000c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800033a:	f7ff ffaf 	bl	800029c <main>

0800033e <LoopForever>:

LoopForever:
  b LoopForever
 800033e:	e7fe      	b.n	800033e <LoopForever>
  ldr   r0, =_estack
 8000340:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000348:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800034c:	08000cd8 	.word	0x08000cd8
  ldr r2, =_sbss
 8000350:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000354:	20000040 	.word	0x20000040

08000358 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000358:	e7fe      	b.n	8000358 <ADC1_2_IRQHandler>
	...

0800035c <GPIO_PCLK>:
#include "stm32l476xx_gpio_driver.h"

void GPIO_PCLK(GPIO_RegDef_t *pGPIOx, uint8_t isEnable) {
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	460b      	mov	r3, r1
 8000366:	70fb      	strb	r3, [r7, #3]
	if (isEnable == ENABLE) {
 8000368:	78fb      	ldrb	r3, [r7, #3]
 800036a:	2b01      	cmp	r3, #1
 800036c:	d157      	bne.n	800041e <GPIO_PCLK+0xc2>
		if (pGPIOx == GPIOA) {
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000374:	d106      	bne.n	8000384 <GPIO_PCLK+0x28>
			GPIOA_PCLK_EN();
 8000376:	4b58      	ldr	r3, [pc, #352]	@ (80004d8 <GPIO_PCLK+0x17c>)
 8000378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800037a:	4a57      	ldr	r2, [pc, #348]	@ (80004d8 <GPIO_PCLK+0x17c>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	64d3      	str	r3, [r2, #76]	@ 0x4c
			GPIOG_PCLK_DI();
		} else if (pGPIOx == GPIOH) {
			GPIOH_PCLK_DI();
		}
	}
}
 8000382:	e0a3      	b.n	80004cc <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOB) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a55      	ldr	r2, [pc, #340]	@ (80004dc <GPIO_PCLK+0x180>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d106      	bne.n	800039a <GPIO_PCLK+0x3e>
			GPIOB_PCLK_EN();
 800038c:	4b52      	ldr	r3, [pc, #328]	@ (80004d8 <GPIO_PCLK+0x17c>)
 800038e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000390:	4a51      	ldr	r2, [pc, #324]	@ (80004d8 <GPIO_PCLK+0x17c>)
 8000392:	f043 0302 	orr.w	r3, r3, #2
 8000396:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000398:	e098      	b.n	80004cc <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOC) {
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a50      	ldr	r2, [pc, #320]	@ (80004e0 <GPIO_PCLK+0x184>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d106      	bne.n	80003b0 <GPIO_PCLK+0x54>
			GPIOC_PCLK_EN();
 80003a2:	4b4d      	ldr	r3, [pc, #308]	@ (80004d8 <GPIO_PCLK+0x17c>)
 80003a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003a6:	4a4c      	ldr	r2, [pc, #304]	@ (80004d8 <GPIO_PCLK+0x17c>)
 80003a8:	f043 0304 	orr.w	r3, r3, #4
 80003ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003ae:	e08d      	b.n	80004cc <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOD) {
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a4c      	ldr	r2, [pc, #304]	@ (80004e4 <GPIO_PCLK+0x188>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d106      	bne.n	80003c6 <GPIO_PCLK+0x6a>
			GPIOD_PCLK_EN();
 80003b8:	4b47      	ldr	r3, [pc, #284]	@ (80004d8 <GPIO_PCLK+0x17c>)
 80003ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003bc:	4a46      	ldr	r2, [pc, #280]	@ (80004d8 <GPIO_PCLK+0x17c>)
 80003be:	f043 0308 	orr.w	r3, r3, #8
 80003c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003c4:	e082      	b.n	80004cc <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOE) {
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4a47      	ldr	r2, [pc, #284]	@ (80004e8 <GPIO_PCLK+0x18c>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d106      	bne.n	80003dc <GPIO_PCLK+0x80>
			GPIOE_PCLK_EN();
 80003ce:	4b42      	ldr	r3, [pc, #264]	@ (80004d8 <GPIO_PCLK+0x17c>)
 80003d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003d2:	4a41      	ldr	r2, [pc, #260]	@ (80004d8 <GPIO_PCLK+0x17c>)
 80003d4:	f043 0310 	orr.w	r3, r3, #16
 80003d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003da:	e077      	b.n	80004cc <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOF) {
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a43      	ldr	r2, [pc, #268]	@ (80004ec <GPIO_PCLK+0x190>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d106      	bne.n	80003f2 <GPIO_PCLK+0x96>
			GPIOF_PCLK_EN();
 80003e4:	4b3c      	ldr	r3, [pc, #240]	@ (80004d8 <GPIO_PCLK+0x17c>)
 80003e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003e8:	4a3b      	ldr	r2, [pc, #236]	@ (80004d8 <GPIO_PCLK+0x17c>)
 80003ea:	f043 0320 	orr.w	r3, r3, #32
 80003ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003f0:	e06c      	b.n	80004cc <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOG) {
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4a3e      	ldr	r2, [pc, #248]	@ (80004f0 <GPIO_PCLK+0x194>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d106      	bne.n	8000408 <GPIO_PCLK+0xac>
			GPIOG_PCLK_EN();
 80003fa:	4b37      	ldr	r3, [pc, #220]	@ (80004d8 <GPIO_PCLK+0x17c>)
 80003fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003fe:	4a36      	ldr	r2, [pc, #216]	@ (80004d8 <GPIO_PCLK+0x17c>)
 8000400:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000404:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000406:	e061      	b.n	80004cc <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOH) {
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a3a      	ldr	r2, [pc, #232]	@ (80004f4 <GPIO_PCLK+0x198>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d15d      	bne.n	80004cc <GPIO_PCLK+0x170>
			GPIOH_PCLK_EN();
 8000410:	4b31      	ldr	r3, [pc, #196]	@ (80004d8 <GPIO_PCLK+0x17c>)
 8000412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000414:	4a30      	ldr	r2, [pc, #192]	@ (80004d8 <GPIO_PCLK+0x17c>)
 8000416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800041a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800041c:	e056      	b.n	80004cc <GPIO_PCLK+0x170>
		if (pGPIOx == GPIOA) {
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000424:	d106      	bne.n	8000434 <GPIO_PCLK+0xd8>
			GPIOA_PCLK_DI();
 8000426:	4b2c      	ldr	r3, [pc, #176]	@ (80004d8 <GPIO_PCLK+0x17c>)
 8000428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800042a:	4a2b      	ldr	r2, [pc, #172]	@ (80004d8 <GPIO_PCLK+0x17c>)
 800042c:	f023 0301 	bic.w	r3, r3, #1
 8000430:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000432:	e04b      	b.n	80004cc <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOB) {
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4a29      	ldr	r2, [pc, #164]	@ (80004dc <GPIO_PCLK+0x180>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d106      	bne.n	800044a <GPIO_PCLK+0xee>
			GPIOB_PCLK_DI();
 800043c:	4b26      	ldr	r3, [pc, #152]	@ (80004d8 <GPIO_PCLK+0x17c>)
 800043e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000440:	4a25      	ldr	r2, [pc, #148]	@ (80004d8 <GPIO_PCLK+0x17c>)
 8000442:	f023 0302 	bic.w	r3, r3, #2
 8000446:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000448:	e040      	b.n	80004cc <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOC) {
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4a24      	ldr	r2, [pc, #144]	@ (80004e0 <GPIO_PCLK+0x184>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d106      	bne.n	8000460 <GPIO_PCLK+0x104>
			GPIOC_PCLK_DI();
 8000452:	4b21      	ldr	r3, [pc, #132]	@ (80004d8 <GPIO_PCLK+0x17c>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000456:	4a20      	ldr	r2, [pc, #128]	@ (80004d8 <GPIO_PCLK+0x17c>)
 8000458:	f023 0304 	bic.w	r3, r3, #4
 800045c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800045e:	e035      	b.n	80004cc <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOD) {
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4a20      	ldr	r2, [pc, #128]	@ (80004e4 <GPIO_PCLK+0x188>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d106      	bne.n	8000476 <GPIO_PCLK+0x11a>
			GPIOD_PCLK_DI();
 8000468:	4b1b      	ldr	r3, [pc, #108]	@ (80004d8 <GPIO_PCLK+0x17c>)
 800046a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800046c:	4a1a      	ldr	r2, [pc, #104]	@ (80004d8 <GPIO_PCLK+0x17c>)
 800046e:	f023 0308 	bic.w	r3, r3, #8
 8000472:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000474:	e02a      	b.n	80004cc <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOE) {
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4a1b      	ldr	r2, [pc, #108]	@ (80004e8 <GPIO_PCLK+0x18c>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d106      	bne.n	800048c <GPIO_PCLK+0x130>
			GPIOE_PCLK_DI();
 800047e:	4b16      	ldr	r3, [pc, #88]	@ (80004d8 <GPIO_PCLK+0x17c>)
 8000480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000482:	4a15      	ldr	r2, [pc, #84]	@ (80004d8 <GPIO_PCLK+0x17c>)
 8000484:	f023 0310 	bic.w	r3, r3, #16
 8000488:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800048a:	e01f      	b.n	80004cc <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOF) {
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4a17      	ldr	r2, [pc, #92]	@ (80004ec <GPIO_PCLK+0x190>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d106      	bne.n	80004a2 <GPIO_PCLK+0x146>
			GPIOF_PCLK_DI();
 8000494:	4b10      	ldr	r3, [pc, #64]	@ (80004d8 <GPIO_PCLK+0x17c>)
 8000496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000498:	4a0f      	ldr	r2, [pc, #60]	@ (80004d8 <GPIO_PCLK+0x17c>)
 800049a:	f023 0320 	bic.w	r3, r3, #32
 800049e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004a0:	e014      	b.n	80004cc <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOG) {
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4a12      	ldr	r2, [pc, #72]	@ (80004f0 <GPIO_PCLK+0x194>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d106      	bne.n	80004b8 <GPIO_PCLK+0x15c>
			GPIOG_PCLK_DI();
 80004aa:	4b0b      	ldr	r3, [pc, #44]	@ (80004d8 <GPIO_PCLK+0x17c>)
 80004ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ae:	4a0a      	ldr	r2, [pc, #40]	@ (80004d8 <GPIO_PCLK+0x17c>)
 80004b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004b6:	e009      	b.n	80004cc <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOH) {
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4a0e      	ldr	r2, [pc, #56]	@ (80004f4 <GPIO_PCLK+0x198>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d105      	bne.n	80004cc <GPIO_PCLK+0x170>
			GPIOH_PCLK_DI();
 80004c0:	4b05      	ldr	r3, [pc, #20]	@ (80004d8 <GPIO_PCLK+0x17c>)
 80004c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004c4:	4a04      	ldr	r2, [pc, #16]	@ (80004d8 <GPIO_PCLK+0x17c>)
 80004c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004cc:	bf00      	nop
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	40021000 	.word	0x40021000
 80004dc:	48000400 	.word	0x48000400
 80004e0:	48000800 	.word	0x48000800
 80004e4:	48000c00 	.word	0x48000c00
 80004e8:	48001000 	.word	0x48001000
 80004ec:	48001400 	.word	0x48001400
 80004f0:	48001800 	.word	0x48001800
 80004f4:	48001c00 	.word	0x48001c00

080004f8 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80004f8:	b480      	push	{r7}
 80004fa:	b091      	sub	sp, #68	@ 0x44
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	// Configure mode
	GPIO_PinConfig_t pinConfig = pGPIOHandle->GPIO_PinConfig;
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	f107 030c 	add.w	r3, r7, #12
 8000506:	3204      	adds	r2, #4
 8000508:	e892 0003 	ldmia.w	r2, {r0, r1}
 800050c:	6018      	str	r0, [r3, #0]
 800050e:	3304      	adds	r3, #4
 8000510:	8019      	strh	r1, [r3, #0]
	uint32_t mode = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	63fb      	str	r3, [r7, #60]	@ 0x3c

	uint8_t pin_mode = pinConfig.GPIO_PinMode;
 8000516:	7b7b      	ldrb	r3, [r7, #13]
 8000518:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t pin_number = pinConfig.GPIO_PinNumber;
 800051c:	7b3b      	ldrb	r3, [r7, #12]
 800051e:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	// non IT
	if (pin_mode <= GPIO_MODE_ANALOG) {
 8000522:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000526:	2b03      	cmp	r3, #3
 8000528:	d81d      	bhi.n	8000566 <GPIO_Init+0x6e>
		// Mode takes 2 bits, all go consecutively so we can do 2 * pin number
		mode = pinConfig.GPIO_PinMode << (2 * pinConfig.GPIO_PinNumber);
 800052a:	7b7b      	ldrb	r3, [r7, #13]
 800052c:	461a      	mov	r2, r3
 800052e:	7b3b      	ldrb	r3, [r7, #12]
 8000530:	005b      	lsls	r3, r3, #1
 8000532:	fa02 f303 	lsl.w	r3, r2, r3
 8000536:	63fb      	str	r3, [r7, #60]	@ 0x3c

		// Must clear before set!
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	7b3b      	ldrb	r3, [r7, #12]
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	2103      	movs	r1, #3
 8000544:	fa01 f303 	lsl.w	r3, r1, r3
 8000548:	43db      	mvns	r3, r3
 800054a:	4619      	mov	r1, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	400a      	ands	r2, r1
 8000552:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= mode;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	6819      	ldr	r1, [r3, #0]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000560:	430a      	orrs	r2, r1
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	e0e6      	b.n	8000734 <GPIO_Init+0x23c>
	} else {
	    // On reset mode will be analog, mode cant be analog for IT to work
        pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	7b3b      	ldrb	r3, [r7, #12]
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	2103      	movs	r1, #3
 8000572:	fa01 f303 	lsl.w	r3, r1, r3
 8000576:	43db      	mvns	r3, r3
 8000578:	4619      	mov	r1, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	400a      	ands	r2, r1
 8000580:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= GPIO_MODE_INPUT;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	6812      	ldr	r2, [r2, #0]
 800058c:	601a      	str	r2, [r3, #0]
	    // PA1, PB1 etc are connected to EXTI1
	    // ...
	    // PA15, PB15 are connected to EXTI15
	    // Lines 0-15 are for GPIO's

	    volatile uint32_t *FTSR = &EXTI->FTSR1;
 800058e:	4baa      	ldr	r3, [pc, #680]	@ (8000838 <GPIO_Init+0x340>)
 8000590:	637b      	str	r3, [r7, #52]	@ 0x34
	    volatile uint32_t *RTSR = &EXTI->RTSR1;
 8000592:	4baa      	ldr	r3, [pc, #680]	@ (800083c <GPIO_Init+0x344>)
 8000594:	633b      	str	r3, [r7, #48]	@ 0x30
	    volatile uint32_t *IMR = &EXTI->IMR1;
 8000596:	4baa      	ldr	r3, [pc, #680]	@ (8000840 <GPIO_Init+0x348>)
 8000598:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    // GPIO => EXTI(Edge detection, interupt delivery) => NVIC(Enable and configure IRQ) => CPU
	    // IRQ - interupt request
	    // NVIC - nested vectored interupt controler
        if (pin_mode == GPIO_MODE_IR_FT) {
 800059a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800059e:	2b04      	cmp	r3, #4
 80005a0:	d115      	bne.n	80005ce <GPIO_Init+0xd6>
            // Configure falling edge control register (FTSR)
            *FTSR |= (1 << pin_number);
 80005a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 80005aa:	2101      	movs	r1, #1
 80005ac:	fa01 f202 	lsl.w	r2, r1, r2
 80005b0:	431a      	orrs	r2, r3
 80005b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005b4:	601a      	str	r2, [r3, #0]
            *RTSR &= ~(1 << pin_number); // Reset RTSR just in case
 80005b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 80005be:	2101      	movs	r1, #1
 80005c0:	fa01 f202 	lsl.w	r2, r1, r2
 80005c4:	43d2      	mvns	r2, r2
 80005c6:	401a      	ands	r2, r3
 80005c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	e031      	b.n	8000632 <GPIO_Init+0x13a>
        } else if (pin_mode == GPIO_MODE_IR_RT) {
 80005ce:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80005d2:	2b05      	cmp	r3, #5
 80005d4:	d115      	bne.n	8000602 <GPIO_Init+0x10a>
            // Configure rising edge control register (RTSR)
            *RTSR |= (1 << pin_number);
 80005d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 80005de:	2101      	movs	r1, #1
 80005e0:	fa01 f202 	lsl.w	r2, r1, r2
 80005e4:	431a      	orrs	r2, r3
 80005e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005e8:	601a      	str	r2, [r3, #0]
            *FTSR &= ~(1 << pin_number); // Reset FTSR just in case
 80005ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 80005f2:	2101      	movs	r1, #1
 80005f4:	fa01 f202 	lsl.w	r2, r1, r2
 80005f8:	43d2      	mvns	r2, r2
 80005fa:	401a      	ands	r2, r3
 80005fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	e017      	b.n	8000632 <GPIO_Init+0x13a>
        } else if (pin_mode == GPIO_MODE_IR_RFT) {
 8000602:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000606:	2b06      	cmp	r3, #6
 8000608:	d113      	bne.n	8000632 <GPIO_Init+0x13a>
            // Configure both registers
            *RTSR |= (1 << pin_number);
 800060a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000612:	2101      	movs	r1, #1
 8000614:	fa01 f202 	lsl.w	r2, r1, r2
 8000618:	431a      	orrs	r2, r3
 800061a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800061c:	601a      	str	r2, [r3, #0]
            *FTSR |= (1 << pin_number);
 800061e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000626:	2101      	movs	r1, #1
 8000628:	fa01 f202 	lsl.w	r2, r1, r2
 800062c:	431a      	orrs	r2, r3
 800062e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000630:	601a      	str	r2, [r3, #0]
        }

        // Configure GPIO port in SYSCFG_EXTIR
        uint8_t index = pin_number / 4;
 8000632:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000636:	089b      	lsrs	r3, r3, #2
 8000638:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        uint8_t offset = pin_number % 4;
 800063c:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000640:	f003 0303 	and.w	r3, r3, #3
 8000644:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

        uint8_t portcode = GPIO_ADR_TO_CODE(pGPIOHandle->pGPIOx);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000650:	d032      	beq.n	80006b8 <GPIO_Init+0x1c0>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a7b      	ldr	r2, [pc, #492]	@ (8000844 <GPIO_Init+0x34c>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d02b      	beq.n	80006b4 <GPIO_Init+0x1bc>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a79      	ldr	r2, [pc, #484]	@ (8000848 <GPIO_Init+0x350>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d024      	beq.n	80006b0 <GPIO_Init+0x1b8>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a78      	ldr	r2, [pc, #480]	@ (800084c <GPIO_Init+0x354>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d01d      	beq.n	80006ac <GPIO_Init+0x1b4>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a76      	ldr	r2, [pc, #472]	@ (8000850 <GPIO_Init+0x358>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d016      	beq.n	80006a8 <GPIO_Init+0x1b0>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a75      	ldr	r2, [pc, #468]	@ (8000854 <GPIO_Init+0x35c>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d00f      	beq.n	80006a4 <GPIO_Init+0x1ac>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a73      	ldr	r2, [pc, #460]	@ (8000858 <GPIO_Init+0x360>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d008      	beq.n	80006a0 <GPIO_Init+0x1a8>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a72      	ldr	r2, [pc, #456]	@ (800085c <GPIO_Init+0x364>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d101      	bne.n	800069c <GPIO_Init+0x1a4>
 8000698:	2307      	movs	r3, #7
 800069a:	e00e      	b.n	80006ba <GPIO_Init+0x1c2>
 800069c:	2300      	movs	r3, #0
 800069e:	e00c      	b.n	80006ba <GPIO_Init+0x1c2>
 80006a0:	2306      	movs	r3, #6
 80006a2:	e00a      	b.n	80006ba <GPIO_Init+0x1c2>
 80006a4:	2305      	movs	r3, #5
 80006a6:	e008      	b.n	80006ba <GPIO_Init+0x1c2>
 80006a8:	2304      	movs	r3, #4
 80006aa:	e006      	b.n	80006ba <GPIO_Init+0x1c2>
 80006ac:	2303      	movs	r3, #3
 80006ae:	e004      	b.n	80006ba <GPIO_Init+0x1c2>
 80006b0:	2302      	movs	r3, #2
 80006b2:	e002      	b.n	80006ba <GPIO_Init+0x1c2>
 80006b4:	2301      	movs	r3, #1
 80006b6:	e000      	b.n	80006ba <GPIO_Init+0x1c2>
 80006b8:	2300      	movs	r3, #0
 80006ba:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

        SYSCFG_PCLK_EN();
 80006be:	4b68      	ldr	r3, [pc, #416]	@ (8000860 <GPIO_Init+0x368>)
 80006c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006c2:	4a67      	ldr	r2, [pc, #412]	@ (8000860 <GPIO_Init+0x368>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6613      	str	r3, [r2, #96]	@ 0x60
        SYSCFG->EXTICR[index] &= ~(portcode << (offset * 4));
 80006ca:	4a66      	ldr	r2, [pc, #408]	@ (8000864 <GPIO_Init+0x36c>)
 80006cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80006d0:	3302      	adds	r3, #2
 80006d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006d6:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 80006da:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	fa01 f303 	lsl.w	r3, r1, r3
 80006e4:	43db      	mvns	r3, r3
 80006e6:	4618      	mov	r0, r3
 80006e8:	495e      	ldr	r1, [pc, #376]	@ (8000864 <GPIO_Init+0x36c>)
 80006ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80006ee:	4002      	ands	r2, r0
 80006f0:	3302      	adds	r3, #2
 80006f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        SYSCFG->EXTICR[index] |= portcode << (offset * 4);
 80006f6:	4a5b      	ldr	r2, [pc, #364]	@ (8000864 <GPIO_Init+0x36c>)
 80006f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80006fc:	3302      	adds	r3, #2
 80006fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000702:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8000706:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	fa01 f303 	lsl.w	r3, r1, r3
 8000710:	4618      	mov	r0, r3
 8000712:	4954      	ldr	r1, [pc, #336]	@ (8000864 <GPIO_Init+0x36c>)
 8000714:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000718:	4302      	orrs	r2, r0
 800071a:	3302      	adds	r3, #2
 800071c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Enable EXTI interupt delivery using IMR (Interupt mask register)
        *IMR |= (1 << pin_number);
 8000720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000728:	2101      	movs	r1, #1
 800072a:	fa01 f202 	lsl.w	r2, r1, r2
 800072e:	431a      	orrs	r2, r3
 8000730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000732:	601a      	str	r2, [r3, #0]
	}
	// Configure speed
	uint32_t speed = pinConfig.GPIO_PinSpeed << (2 * pinConfig.GPIO_PinNumber);
 8000734:	7bbb      	ldrb	r3, [r7, #14]
 8000736:	461a      	mov	r2, r3
 8000738:	7b3b      	ldrb	r3, [r7, #12]
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	fa02 f303 	lsl.w	r3, r2, r3
 8000740:	627b      	str	r3, [r7, #36]	@ 0x24
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	689a      	ldr	r2, [r3, #8]
 8000748:	7b3b      	ldrb	r3, [r7, #12]
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	2103      	movs	r1, #3
 800074e:	fa01 f303 	lsl.w	r3, r1, r3
 8000752:	43db      	mvns	r3, r3
 8000754:	4619      	mov	r1, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	400a      	ands	r2, r1
 800075c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= speed;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	6899      	ldr	r1, [r3, #8]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800076a:	430a      	orrs	r2, r1
 800076c:	609a      	str	r2, [r3, #8]

	// Configure pull up/down
	uint32_t pull = pinConfig.GPIO_PinPuPdControl << (2 * pinConfig.GPIO_PinNumber);
 800076e:	7bfb      	ldrb	r3, [r7, #15]
 8000770:	461a      	mov	r2, r3
 8000772:	7b3b      	ldrb	r3, [r7, #12]
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	fa02 f303 	lsl.w	r3, r2, r3
 800077a:	623b      	str	r3, [r7, #32]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	68da      	ldr	r2, [r3, #12]
 8000782:	7b3b      	ldrb	r3, [r7, #12]
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	2103      	movs	r1, #3
 8000788:	fa01 f303 	lsl.w	r3, r1, r3
 800078c:	43db      	mvns	r3, r3
 800078e:	4619      	mov	r1, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	400a      	ands	r2, r1
 8000796:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= pull;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	68d9      	ldr	r1, [r3, #12]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	6a3a      	ldr	r2, [r7, #32]
 80007a4:	430a      	orrs	r2, r1
 80007a6:	60da      	str	r2, [r3, #12]

	// Configure otype, output type
	uint32_t o_type = pinConfig.GPIO_PinOPType << pinConfig.GPIO_PinNumber;
 80007a8:	7c3b      	ldrb	r3, [r7, #16]
 80007aa:	461a      	mov	r2, r3
 80007ac:	7b3b      	ldrb	r3, [r7, #12]
 80007ae:	fa02 f303 	lsl.w	r3, r2, r3
 80007b2:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIOx->OTYPER |= o_type;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	6859      	ldr	r1, [r3, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	69fa      	ldr	r2, [r7, #28]
 80007c0:	430a      	orrs	r2, r1
 80007c2:	605a      	str	r2, [r3, #4]

	// Configure alt function
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	795b      	ldrb	r3, [r3, #5]
 80007c8:	2b02      	cmp	r3, #2
 80007ca:	d12f      	bne.n	800082c <GPIO_Init+0x334>

		uint32_t index = pinConfig.GPIO_PinNumber / 8;
 80007cc:	7b3b      	ldrb	r3, [r7, #12]
 80007ce:	08db      	lsrs	r3, r3, #3
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	61bb      	str	r3, [r7, #24]
		uint32_t offset = pinConfig.GPIO_PinNumber % 8;
 80007d4:	7b3b      	ldrb	r3, [r7, #12]
 80007d6:	f003 0307 	and.w	r3, r3, #7
 80007da:	617b      	str	r3, [r7, #20]

		pGPIOHandle->pGPIOx->AFR[index] &= ~(0xF << (4 * offset));
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	69ba      	ldr	r2, [r7, #24]
 80007e2:	3208      	adds	r2, #8
 80007e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	210f      	movs	r1, #15
 80007ee:	fa01 f303 	lsl.w	r3, r1, r3
 80007f2:	43db      	mvns	r3, r3
 80007f4:	4619      	mov	r1, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4011      	ands	r1, r2
 80007fc:	69ba      	ldr	r2, [r7, #24]
 80007fe:	3208      	adds	r2, #8
 8000800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[index] |= pinConfig.GPIO_PinAltFunMode << (4 * offset);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	69ba      	ldr	r2, [r7, #24]
 800080a:	3208      	adds	r2, #8
 800080c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000810:	7c7b      	ldrb	r3, [r7, #17]
 8000812:	4619      	mov	r1, r3
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	fa01 f303 	lsl.w	r3, r1, r3
 800081c:	4619      	mov	r1, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4311      	orrs	r1, r2
 8000824:	69ba      	ldr	r2, [r7, #24]
 8000826:	3208      	adds	r2, #8
 8000828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800082c:	bf00      	nop
 800082e:	3744      	adds	r7, #68	@ 0x44
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	4001040c 	.word	0x4001040c
 800083c:	40010408 	.word	0x40010408
 8000840:	40010400 	.word	0x40010400
 8000844:	48000400 	.word	0x48000400
 8000848:	48000800 	.word	0x48000800
 800084c:	48000c00 	.word	0x48000c00
 8000850:	48001000 	.word	0x48001000
 8000854:	48001400 	.word	0x48001400
 8000858:	48001800 	.word	0x48001800
 800085c:	48001c00 	.word	0x48001c00
 8000860:	40021000 	.word	0x40021000
 8000864:	40010000 	.word	0x40010000

08000868 <GPIO_ReadFromInputPin>:
	} else if (pGPIOx == GPIOH) {
		GPIOH_REG_RESET();
	}
}

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber) {
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	70fb      	strb	r3, [r7, #3]
	return (uint8_t) (pGPIOx->IDR >> pinNumber) & 0x00000001;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	691a      	ldr	r2, [r3, #16]
 8000878:	78fb      	ldrb	r3, [r7, #3]
 800087a:	fa22 f303 	lsr.w	r3, r2, r3
 800087e:	b2db      	uxtb	r3, r3
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	b2db      	uxtb	r3, r3
}
 8000886:	4618      	mov	r0, r3
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <USART_PCLK>:
#include "stm32l4xx_usart_driver.h"

void USART_PCLK(USART_RegDef_t *pUSARTx, uint8_t isEnable) {
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	460b      	mov	r3, r1
 800089a:	70fb      	strb	r3, [r7, #3]
    if(pUSARTx == USART1) {
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a1d      	ldr	r2, [pc, #116]	@ (8000914 <USART_PCLK+0x84>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d106      	bne.n	80008b2 <USART_PCLK+0x22>
        USART1_PCLK_EN();
 80008a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <USART_PCLK+0x88>)
 80008a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000918 <USART_PCLK+0x88>)
 80008aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ae:	6613      	str	r3, [r2, #96]	@ 0x60
    } else if (pUSARTx == UART4) {
        UART4_PCLK_EN();
    } else if (pUSARTx == UART5) {
        UART5_PCLK_EN();
    }
}
 80008b0:	e02a      	b.n	8000908 <USART_PCLK+0x78>
    } else if (pUSARTx == USART2) {
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a19      	ldr	r2, [pc, #100]	@ (800091c <USART_PCLK+0x8c>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d106      	bne.n	80008c8 <USART_PCLK+0x38>
        USART2_PCLK_EN();
 80008ba:	4b17      	ldr	r3, [pc, #92]	@ (8000918 <USART_PCLK+0x88>)
 80008bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008be:	4a16      	ldr	r2, [pc, #88]	@ (8000918 <USART_PCLK+0x88>)
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008c4:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80008c6:	e01f      	b.n	8000908 <USART_PCLK+0x78>
    } else if (pUSARTx == USART3) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a15      	ldr	r2, [pc, #84]	@ (8000920 <USART_PCLK+0x90>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d106      	bne.n	80008de <USART_PCLK+0x4e>
        USART3_PCLK_EN();
 80008d0:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <USART_PCLK+0x88>)
 80008d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d4:	4a10      	ldr	r2, [pc, #64]	@ (8000918 <USART_PCLK+0x88>)
 80008d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008da:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80008dc:	e014      	b.n	8000908 <USART_PCLK+0x78>
    } else if (pUSARTx == UART4) {
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a10      	ldr	r2, [pc, #64]	@ (8000924 <USART_PCLK+0x94>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d106      	bne.n	80008f4 <USART_PCLK+0x64>
        UART4_PCLK_EN();
 80008e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <USART_PCLK+0x88>)
 80008e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000918 <USART_PCLK+0x88>)
 80008ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80008f0:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80008f2:	e009      	b.n	8000908 <USART_PCLK+0x78>
    } else if (pUSARTx == UART5) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a0c      	ldr	r2, [pc, #48]	@ (8000928 <USART_PCLK+0x98>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d105      	bne.n	8000908 <USART_PCLK+0x78>
        UART5_PCLK_EN();
 80008fc:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <USART_PCLK+0x88>)
 80008fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000900:	4a05      	ldr	r2, [pc, #20]	@ (8000918 <USART_PCLK+0x88>)
 8000902:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000906:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40013800 	.word	0x40013800
 8000918:	40021000 	.word	0x40021000
 800091c:	40004400 	.word	0x40004400
 8000920:	40004800 	.word	0x40004800
 8000924:	40004c00 	.word	0x40004c00
 8000928:	40005000 	.word	0x40005000

0800092c <USART_Init>:

void USART_Init(USART_Handle_t *pUSARTHandle) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
    USART_Config_t config = pUSARTHandle->USART_Config;
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	3204      	adds	r2, #4
 800093c:	ca07      	ldmia	r2, {r0, r1, r2}
 800093e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Confifgure mode
    switch (config.USART_mode) {
 8000942:	7b3b      	ldrb	r3, [r7, #12]
 8000944:	2b02      	cmp	r3, #2
 8000946:	d018      	beq.n	800097a <USART_Init+0x4e>
 8000948:	2b02      	cmp	r3, #2
 800094a:	dc27      	bgt.n	800099c <USART_Init+0x70>
 800094c:	2b00      	cmp	r3, #0
 800094e:	d002      	beq.n	8000956 <USART_Init+0x2a>
 8000950:	2b01      	cmp	r3, #1
 8000952:	d009      	beq.n	8000968 <USART_Init+0x3c>
 8000954:	e022      	b.n	800099c <USART_Init+0x70>
        case USART_MODE_TX:
            pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_TE);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f042 0208 	orr.w	r2, r2, #8
 8000964:	601a      	str	r2, [r3, #0]
            break;
 8000966:	e019      	b.n	800099c <USART_Init+0x70>
        case USART_MODE_RX:
            pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RE);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f042 0204 	orr.w	r2, r2, #4
 8000976:	601a      	str	r2, [r3, #0]
            break;
 8000978:	e010      	b.n	800099c <USART_Init+0x70>
        case USART_MODE_TXRX:
            pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_TE);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f042 0208 	orr.w	r2, r2, #8
 8000988:	601a      	str	r2, [r3, #0]
            pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RE);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f042 0204 	orr.w	r2, r2, #4
 8000998:	601a      	str	r2, [r3, #0]
            break;
 800099a:	bf00      	nop
    }

    // Configure stop bits
    pUSARTHandle->pUSARTx->CR1 &= ~(0x3 << USART_CR2_STOP);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80009aa:	601a      	str	r2, [r3, #0]
    pUSARTHandle->pUSARTx->CR1 |= (config.UASRT_NoOfStopBits << USART_CR2_STOP);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	6819      	ldr	r1, [r3, #0]
 80009b2:	7d3b      	ldrb	r3, [r7, #20]
 80009b4:	031a      	lsls	r2, r3, #12
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	430a      	orrs	r2, r1
 80009bc:	601a      	str	r2, [r3, #0]

    // Configure word length
    switch (config.UASRT_WordLength) {
 80009be:	7d7b      	ldrb	r3, [r7, #21]
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d006      	beq.n	80009d2 <USART_Init+0xa6>
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	dc37      	bgt.n	8000a38 <USART_Init+0x10c>
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d013      	beq.n	80009f4 <USART_Init+0xc8>
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d022      	beq.n	8000a16 <USART_Init+0xea>
 80009d0:	e032      	b.n	8000a38 <USART_Init+0x10c>
        case USART_WORDLEN_7BITS:
            pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_M0);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80009e0:	601a      	str	r2, [r3, #0]
            pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_M1);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80009f0:	601a      	str	r2, [r3, #0]
            break;
 80009f2:	e021      	b.n	8000a38 <USART_Init+0x10c>
        case USART_WORDLEN_8BITS:
            pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_M0);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000a02:	601a      	str	r2, [r3, #0]
            pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_M1);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8000a12:	601a      	str	r2, [r3, #0]
            break;
 8000a14:	e010      	b.n	8000a38 <USART_Init+0x10c>
        case USART_WORDLEN_9BITS:
            pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_M0);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000a24:	601a      	str	r2, [r3, #0]
            pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_M1);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8000a34:	601a      	str	r2, [r3, #0]
            break;
 8000a36:	bf00      	nop
    }

    // Configure parity control
    switch (config.UASRT_ParityControl) {
 8000a38:	7dbb      	ldrb	r3, [r7, #22]
 8000a3a:	2b02      	cmp	r3, #2
 8000a3c:	d020      	beq.n	8000a80 <USART_Init+0x154>
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	dc2f      	bgt.n	8000aa2 <USART_Init+0x176>
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d002      	beq.n	8000a4c <USART_Init+0x120>
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d009      	beq.n	8000a5e <USART_Init+0x132>
 8000a4a:	e02a      	b.n	8000aa2 <USART_Init+0x176>
        case USART_PARITY_DISABLE:
            pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_PCE);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000a5a:	601a      	str	r2, [r3, #0]
            break;
 8000a5c:	e021      	b.n	8000aa2 <USART_Init+0x176>
        case USART_PARITY_EN_EVEN:

            pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_PCE);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000a6c:	601a      	str	r2, [r3, #0]
            pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_PS);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000a7c:	601a      	str	r2, [r3, #0]
            break;
 8000a7e:	e010      	b.n	8000aa2 <USART_Init+0x176>
        case USART_PARITY_EN_ODD:
            pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_PCE);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000a8e:	601a      	str	r2, [r3, #0]
            pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_PS);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000a9e:	601a      	str	r2, [r3, #0]
            break;
 8000aa0:	bf00      	nop
    }

    // configure flow control
    switch (config.UASRT_HwFlowControl) {
 8000aa2:	7dfb      	ldrb	r3, [r7, #23]
 8000aa4:	2b03      	cmp	r3, #3
 8000aa6:	d84f      	bhi.n	8000b48 <USART_Init+0x21c>
 8000aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8000ab0 <USART_Init+0x184>)
 8000aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aae:	bf00      	nop
 8000ab0:	08000ac1 	.word	0x08000ac1
 8000ab4:	08000ae3 	.word	0x08000ae3
 8000ab8:	08000b05 	.word	0x08000b05
 8000abc:	08000b27 	.word	0x08000b27
        case USART_HW_FLOW_CTRL_NONE:
            pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR3_RTSE);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000ace:	601a      	str	r2, [r3, #0]
            pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR3_CTSE);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000ade:	601a      	str	r2, [r3, #0]
            break;
 8000ae0:	e032      	b.n	8000b48 <USART_Init+0x21c>
        case USART_HW_FLOW_CTRL_CTS:
            pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR3_RTSE);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000af0:	601a      	str	r2, [r3, #0]
            pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR3_CTSE);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000b00:	601a      	str	r2, [r3, #0]
            break;
 8000b02:	e021      	b.n	8000b48 <USART_Init+0x21c>
        case USART_HW_FLOW_CTRL_RTS:
            pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR3_CTSE);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000b12:	601a      	str	r2, [r3, #0]
            pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR3_RTSE);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000b22:	601a      	str	r2, [r3, #0]
            break;
 8000b24:	e010      	b.n	8000b48 <USART_Init+0x21c>
        case USART_HW_FLOW_CTRL_CTS_RTS:
            pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR3_CTSE);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000b34:	601a      	str	r2, [r3, #0]
            pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR3_RTSE);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000b44:	601a      	str	r2, [r3, #0]
            break;
 8000b46:	bf00      	nop
    }

    // Configure baud
    USART_SetBaudRate(pUSARTHandle, config.UASRT_Baud);
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f000 f805 	bl	8000b5c <USART_SetBaudRate>
}
 8000b52:	bf00      	nop
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop

08000b5c <USART_SetBaudRate>:
        UART5_REG_RESET();
    }
}

// TODO this function assumes way too much
void USART_SetBaudRate(USART_Handle_t *pUSARTHandle, uint32_t baud_rate) {
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
    // XXX assume 4 Mhz MSI (default), should make a function for this
    // XXX assume OVER8 = 0

    uint32_t usart_div = 4000000 / baud_rate;
 8000b66:	4a07      	ldr	r2, [pc, #28]	@ (8000b84 <USART_SetBaudRate+0x28>)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6e:	60fb      	str	r3, [r7, #12]
    pUSARTHandle->pUSARTx->BRR = usart_div;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	60da      	str	r2, [r3, #12]

    // XXX If OVER8 = 1
    // BRR[3:0] has to equal USARTDIV[3:0] right shifted by 1
    // BRR[X:4] are USARTDIV[X:4]
    // BRR[3:0] must be unset!
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	003d0900 	.word	0x003d0900

08000b88 <USART_Write>:

void USART_Write(USART_Handle_t *pUSARTHandle, uint8_t *source, uint8_t size) {
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	@ 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	4613      	mov	r3, r2
 8000b94:	71fb      	strb	r3, [r7, #7]
    uint8_t word_len = 0; // (pUSARTHandle->pUSARTx->CR1 >> USART_CR1_M0) & 0x3;
 8000b96:	2300      	movs	r3, #0
 8000b98:	76fb      	strb	r3, [r7, #27]

    for (size_t i = 0; i < size; i++) {
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
 8000b9e:	e039      	b.n	8000c14 <USART_Write+0x8c>
        // Wait when we can write new data
        while ((pUSARTHandle->pUSARTx->ISR & (1 << USART_ISR_TXE)) == 0)
 8000ba0:	bf00      	nop
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	69db      	ldr	r3, [r3, #28]
 8000ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d0f8      	beq.n	8000ba2 <USART_Write+0x1a>
            ;

        // Depending on word length, write the data
        switch (word_len) {
 8000bb0:	7efb      	ldrb	r3, [r7, #27]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d002      	beq.n	8000bbc <USART_Write+0x34>
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d00a      	beq.n	8000bd0 <USART_Write+0x48>
 8000bba:	e028      	b.n	8000c0e <USART_Write+0x86>
            case USART_WORDLEN_8BITS: {
                *((uint8_t*) &pUSARTHandle->pUSARTx->TDR) = *source;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3328      	adds	r3, #40	@ 0x28
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	7812      	ldrb	r2, [r2, #0]
 8000bc6:	701a      	strb	r2, [r3, #0]
                source++;
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	60bb      	str	r3, [r7, #8]
                break;
 8000bce:	e01e      	b.n	8000c0e <USART_Write+0x86>
            }
            // XXX sending 8 bits seems very funky
            case USART_WORDLEN_9BITS: {
                uint16_t *pData = (uint16_t*) source;
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	617b      	str	r3, [r7, #20]
                // Mask all other bits except for the first 9
                uint16_t masked = *pData & (uint16_t) 0x01FF;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000bdc:	827b      	strh	r3, [r7, #18]

                *((uint16_t*) &pUSARTHandle->pUSARTx->TDR) = masked;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	3328      	adds	r3, #40	@ 0x28
 8000be4:	8a7a      	ldrh	r2, [r7, #18]
 8000be6:	801a      	strh	r2, [r3, #0]

                switch (pUSARTHandle->USART_Config.UASRT_ParityControl) {
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	7b9b      	ldrb	r3, [r3, #14]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d005      	beq.n	8000bfc <USART_Write+0x74>
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db0b      	blt.n	8000c0c <USART_Write+0x84>
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d808      	bhi.n	8000c0c <USART_Write+0x84>
 8000bfa:	e003      	b.n	8000c04 <USART_Write+0x7c>
                    case USART_PARITY_DISABLE:
                        source += 2;
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	3302      	adds	r3, #2
 8000c00:	60bb      	str	r3, [r7, #8]
                        break;
 8000c02:	e003      	b.n	8000c0c <USART_Write+0x84>
                    case USART_PARITY_EN_EVEN:
                    case USART_PARITY_EN_ODD:
                        source++;
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	3301      	adds	r3, #1
 8000c08:	60bb      	str	r3, [r7, #8]
                        break;
 8000c0a:	bf00      	nop
                }

                break;
 8000c0c:	bf00      	nop
    for (size_t i = 0; i < size; i++) {
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3301      	adds	r3, #1
 8000c12:	61fb      	str	r3, [r7, #28]
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	69fa      	ldr	r2, [r7, #28]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d3c1      	bcc.n	8000ba0 <USART_Write+0x18>
        }

    }

    // Wait for transaction to complete
    while ((pUSARTHandle->pUSARTx->ISR & (1 << USART_ISR_TC)) == 0)
 8000c1c:	bf00      	nop
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	69db      	ldr	r3, [r3, #28]
 8000c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d0f8      	beq.n	8000c1e <USART_Write+0x96>
        ;
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	3724      	adds	r7, #36	@ 0x24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <USART_Enable>:
    IRQPriority = IRQPriority << NO_PR_BITS;

    *(NVIC_PR_BASE_ADDR + index) |= IRQPriority << (offset * 8);
}

void USART_Enable(USART_RegDef_t *pUSARTx, uint8_t isEnable) {
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	460b      	mov	r3, r1
 8000c42:	70fb      	strb	r3, [r7, #3]
    pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f043 0201 	orr.w	r2, r3, #1
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	601a      	str	r2, [r3, #0]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr
	...

08000c5c <__libc_init_array>:
 8000c5c:	b570      	push	{r4, r5, r6, lr}
 8000c5e:	4d0d      	ldr	r5, [pc, #52]	@ (8000c94 <__libc_init_array+0x38>)
 8000c60:	4c0d      	ldr	r4, [pc, #52]	@ (8000c98 <__libc_init_array+0x3c>)
 8000c62:	1b64      	subs	r4, r4, r5
 8000c64:	10a4      	asrs	r4, r4, #2
 8000c66:	2600      	movs	r6, #0
 8000c68:	42a6      	cmp	r6, r4
 8000c6a:	d109      	bne.n	8000c80 <__libc_init_array+0x24>
 8000c6c:	4d0b      	ldr	r5, [pc, #44]	@ (8000c9c <__libc_init_array+0x40>)
 8000c6e:	4c0c      	ldr	r4, [pc, #48]	@ (8000ca0 <__libc_init_array+0x44>)
 8000c70:	f000 f818 	bl	8000ca4 <_init>
 8000c74:	1b64      	subs	r4, r4, r5
 8000c76:	10a4      	asrs	r4, r4, #2
 8000c78:	2600      	movs	r6, #0
 8000c7a:	42a6      	cmp	r6, r4
 8000c7c:	d105      	bne.n	8000c8a <__libc_init_array+0x2e>
 8000c7e:	bd70      	pop	{r4, r5, r6, pc}
 8000c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c84:	4798      	blx	r3
 8000c86:	3601      	adds	r6, #1
 8000c88:	e7ee      	b.n	8000c68 <__libc_init_array+0xc>
 8000c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c8e:	4798      	blx	r3
 8000c90:	3601      	adds	r6, #1
 8000c92:	e7f2      	b.n	8000c7a <__libc_init_array+0x1e>
 8000c94:	08000cd0 	.word	0x08000cd0
 8000c98:	08000cd0 	.word	0x08000cd0
 8000c9c:	08000cd0 	.word	0x08000cd0
 8000ca0:	08000cd4 	.word	0x08000cd4

08000ca4 <_init>:
 8000ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ca6:	bf00      	nop
 8000ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000caa:	bc08      	pop	{r3}
 8000cac:	469e      	mov	lr, r3
 8000cae:	4770      	bx	lr

08000cb0 <_fini>:
 8000cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cb2:	bf00      	nop
 8000cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cb6:	bc08      	pop	{r3}
 8000cb8:	469e      	mov	lr, r3
 8000cba:	4770      	bx	lr
