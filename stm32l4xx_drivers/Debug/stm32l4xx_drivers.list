
stm32l4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000888  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000a0c  08000a0c  00001a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a24  08000a24  00001a2c  2**0
                  CONTENTS
  4 .ARM          00000000  08000a24  08000a24  00001a2c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a24  08000a2c  00001a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a24  08000a24  00001a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000a28  08000a28  00001a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00001a2c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001a2c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000c91  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002bf  00000000  00000000  000026ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000e8  00000000  00000000  000029b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000a4  00000000  00000000  00002a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001707  00000000  00000000  00002b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001008  00000000  00000000  00004243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005690  00000000  00000000  0000524b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000a8db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002e4  00000000  00000000  0000a920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  0000ac04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000000 	.word	0x20000000
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080009f4 	.word	0x080009f4

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000004 	.word	0x20000004
 80001c0:	080009f4 	.word	0x080009f4

080001c4 <delay>:
// XXX why was this generated?
//#if !defined(__SOFT_FP__) && defined(__ARM_FP)
//  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
//#endif

void delay(uint32_t time) {
 80001c4:	b480      	push	{r7}
 80001c6:	b085      	sub	sp, #20
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < time; i++)
 80001cc:	2300      	movs	r3, #0
 80001ce:	60fb      	str	r3, [r7, #12]
 80001d0:	e002      	b.n	80001d8 <delay+0x14>
 80001d2:	68fb      	ldr	r3, [r7, #12]
 80001d4:	3301      	adds	r3, #1
 80001d6:	60fb      	str	r3, [r7, #12]
 80001d8:	68fa      	ldr	r2, [r7, #12]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	429a      	cmp	r2, r3
 80001de:	d3f8      	bcc.n	80001d2 <delay+0xe>
        ;
}
 80001e0:	bf00      	nop
 80001e2:	bf00      	nop
 80001e4:	3714      	adds	r7, #20
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr
	...

080001f0 <button_it>:
            is_down = 0;
        }
    }
}

void button_it() {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b086      	sub	sp, #24
 80001f4:	af00      	add	r7, sp, #0
    GPIO_Handle_t led_handle = {
 80001f6:	4a13      	ldr	r2, [pc, #76]	@ (8000244 <button_it+0x54>)
 80001f8:	f107 030c 	add.w	r3, r7, #12
 80001fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80001fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            .GPIO_PinOPType = GPIO_OP_TYPE_PP,
            .GPIO_PinAltFunMode = 0
        }
    };

    GPIO_Handle_t gpio_it = {
 8000202:	4a11      	ldr	r2, [pc, #68]	@ (8000248 <button_it+0x58>)
 8000204:	463b      	mov	r3, r7
 8000206:	ca07      	ldmia	r2, {r0, r1, r2}
 8000208:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            .GPIO_PinAltFunMode = 0
        }
    };

    // Enable clock for port A
    GPIO_PCLK(GPIOA, ENABLE);
 800020c:	2101      	movs	r1, #1
 800020e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000212:	f000 f85f 	bl	80002d4 <GPIO_PCLK>
    GPIO_PCLK(GPIOC, ENABLE);
 8000216:	2101      	movs	r1, #1
 8000218:	480c      	ldr	r0, [pc, #48]	@ (800024c <button_it+0x5c>)
 800021a:	f000 f85b 	bl	80002d4 <GPIO_PCLK>

    GPIO_Init(&led_handle);
 800021e:	f107 030c 	add.w	r3, r7, #12
 8000222:	4618      	mov	r0, r3
 8000224:	f000 f924 	bl	8000470 <GPIO_Init>
    GPIO_Init(&gpio_it);
 8000228:	463b      	mov	r3, r7
 800022a:	4618      	mov	r0, r3
 800022c:	f000 f920 	bl	8000470 <GPIO_Init>

    GPIO_IRQPriorityConfig(IRQ_NO_EXTI2, NVIC_IRQ_PRI15);
 8000230:	210f      	movs	r1, #15
 8000232:	2008      	movs	r0, #8
 8000234:	f000 fb70 	bl	8000918 <GPIO_IRQPriorityConfig>
    GPIO_IRQInterruptConfig(IRQ_NO_EXTI2, ENABLE);
 8000238:	2101      	movs	r1, #1
 800023a:	2008      	movs	r0, #8
 800023c:	f000 fae6 	bl	800080c <GPIO_IRQInterruptConfig>


    while (1)
 8000240:	bf00      	nop
 8000242:	e7fd      	b.n	8000240 <button_it+0x50>
 8000244:	08000a0c 	.word	0x08000a0c
 8000248:	08000a18 	.word	0x08000a18
 800024c:	48000800 	.word	0x48000800

08000250 <EXTI2_IRQHandler>:
        ;
}

void EXTI2_IRQHandler(void) {
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
    delay(50000);
 8000254:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000258:	f7ff ffb4 	bl	80001c4 <delay>
    GPIO_IRQHandle(GPIO_PIN_N2);
 800025c:	2002      	movs	r0, #2
 800025e:	f000 fb85 	bl	800096c <GPIO_IRQHandle>
    GPIO_TogglePin(GPIOA, GPIO_PIN_N5);
 8000262:	2105      	movs	r1, #5
 8000264:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000268:	f000 faba 	bl	80007e0 <GPIO_TogglePin>
}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}

08000270 <main>:

int main(void) {
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
    button_it();
 8000274:	f7ff ffbc 	bl	80001f0 <button_it>
 8000278:	2300      	movs	r3, #0
}
 800027a:	4618      	mov	r0, r3
 800027c:	bd80      	pop	{r7, pc}
	...

08000280 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000280:	480d      	ldr	r0, [pc, #52]	@ (80002b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000282:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000284:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000288:	480c      	ldr	r0, [pc, #48]	@ (80002bc <LoopForever+0x6>)
  ldr r1, =_edata
 800028a:	490d      	ldr	r1, [pc, #52]	@ (80002c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800028c:	4a0d      	ldr	r2, [pc, #52]	@ (80002c4 <LoopForever+0xe>)
  movs r3, #0
 800028e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000290:	e002      	b.n	8000298 <LoopCopyDataInit>

08000292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000296:	3304      	adds	r3, #4

08000298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800029a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800029c:	d3f9      	bcc.n	8000292 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800029e:	4a0a      	ldr	r2, [pc, #40]	@ (80002c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a0:	4c0a      	ldr	r4, [pc, #40]	@ (80002cc <LoopForever+0x16>)
  movs r3, #0
 80002a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a4:	e001      	b.n	80002aa <LoopFillZerobss>

080002a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a8:	3204      	adds	r2, #4

080002aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002ac:	d3fb      	bcc.n	80002a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ae:	f000 fb7d 	bl	80009ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002b2:	f7ff ffdd 	bl	8000270 <main>

080002b6 <LoopForever>:

LoopForever:
  b LoopForever
 80002b6:	e7fe      	b.n	80002b6 <LoopForever>
  ldr   r0, =_estack
 80002b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c4:	08000a2c 	.word	0x08000a2c
  ldr r2, =_sbss
 80002c8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002cc:	2000001c 	.word	0x2000001c

080002d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d0:	e7fe      	b.n	80002d0 <ADC1_2_IRQHandler>
	...

080002d4 <GPIO_PCLK>:
#include "stm32l476xx_gpio_driver.h"

void GPIO_PCLK(GPIO_RegDef_t *pGPIOx, uint8_t isEnable) {
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	460b      	mov	r3, r1
 80002de:	70fb      	strb	r3, [r7, #3]
	if (isEnable == ENABLE) {
 80002e0:	78fb      	ldrb	r3, [r7, #3]
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d157      	bne.n	8000396 <GPIO_PCLK+0xc2>
		if (pGPIOx == GPIOA) {
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80002ec:	d106      	bne.n	80002fc <GPIO_PCLK+0x28>
			GPIOA_PCLK_EN();
 80002ee:	4b58      	ldr	r3, [pc, #352]	@ (8000450 <GPIO_PCLK+0x17c>)
 80002f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002f2:	4a57      	ldr	r2, [pc, #348]	@ (8000450 <GPIO_PCLK+0x17c>)
 80002f4:	f043 0301 	orr.w	r3, r3, #1
 80002f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
			GPIOG_PCLK_DI();
		} else if (pGPIOx == GPIOH) {
			GPIOH_PCLK_DI();
		}
	}
}
 80002fa:	e0a3      	b.n	8000444 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOB) {
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4a55      	ldr	r2, [pc, #340]	@ (8000454 <GPIO_PCLK+0x180>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d106      	bne.n	8000312 <GPIO_PCLK+0x3e>
			GPIOB_PCLK_EN();
 8000304:	4b52      	ldr	r3, [pc, #328]	@ (8000450 <GPIO_PCLK+0x17c>)
 8000306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000308:	4a51      	ldr	r2, [pc, #324]	@ (8000450 <GPIO_PCLK+0x17c>)
 800030a:	f043 0302 	orr.w	r3, r3, #2
 800030e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000310:	e098      	b.n	8000444 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOC) {
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4a50      	ldr	r2, [pc, #320]	@ (8000458 <GPIO_PCLK+0x184>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d106      	bne.n	8000328 <GPIO_PCLK+0x54>
			GPIOC_PCLK_EN();
 800031a:	4b4d      	ldr	r3, [pc, #308]	@ (8000450 <GPIO_PCLK+0x17c>)
 800031c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800031e:	4a4c      	ldr	r2, [pc, #304]	@ (8000450 <GPIO_PCLK+0x17c>)
 8000320:	f043 0304 	orr.w	r3, r3, #4
 8000324:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000326:	e08d      	b.n	8000444 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOD) {
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a4c      	ldr	r2, [pc, #304]	@ (800045c <GPIO_PCLK+0x188>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d106      	bne.n	800033e <GPIO_PCLK+0x6a>
			GPIOD_PCLK_EN();
 8000330:	4b47      	ldr	r3, [pc, #284]	@ (8000450 <GPIO_PCLK+0x17c>)
 8000332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000334:	4a46      	ldr	r2, [pc, #280]	@ (8000450 <GPIO_PCLK+0x17c>)
 8000336:	f043 0308 	orr.w	r3, r3, #8
 800033a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800033c:	e082      	b.n	8000444 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOE) {
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a47      	ldr	r2, [pc, #284]	@ (8000460 <GPIO_PCLK+0x18c>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d106      	bne.n	8000354 <GPIO_PCLK+0x80>
			GPIOE_PCLK_EN();
 8000346:	4b42      	ldr	r3, [pc, #264]	@ (8000450 <GPIO_PCLK+0x17c>)
 8000348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800034a:	4a41      	ldr	r2, [pc, #260]	@ (8000450 <GPIO_PCLK+0x17c>)
 800034c:	f043 0310 	orr.w	r3, r3, #16
 8000350:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000352:	e077      	b.n	8000444 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOF) {
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a43      	ldr	r2, [pc, #268]	@ (8000464 <GPIO_PCLK+0x190>)
 8000358:	4293      	cmp	r3, r2
 800035a:	d106      	bne.n	800036a <GPIO_PCLK+0x96>
			GPIOF_PCLK_EN();
 800035c:	4b3c      	ldr	r3, [pc, #240]	@ (8000450 <GPIO_PCLK+0x17c>)
 800035e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000360:	4a3b      	ldr	r2, [pc, #236]	@ (8000450 <GPIO_PCLK+0x17c>)
 8000362:	f043 0320 	orr.w	r3, r3, #32
 8000366:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000368:	e06c      	b.n	8000444 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOG) {
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4a3e      	ldr	r2, [pc, #248]	@ (8000468 <GPIO_PCLK+0x194>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d106      	bne.n	8000380 <GPIO_PCLK+0xac>
			GPIOG_PCLK_EN();
 8000372:	4b37      	ldr	r3, [pc, #220]	@ (8000450 <GPIO_PCLK+0x17c>)
 8000374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000376:	4a36      	ldr	r2, [pc, #216]	@ (8000450 <GPIO_PCLK+0x17c>)
 8000378:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800037c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800037e:	e061      	b.n	8000444 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOH) {
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a3a      	ldr	r2, [pc, #232]	@ (800046c <GPIO_PCLK+0x198>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d15d      	bne.n	8000444 <GPIO_PCLK+0x170>
			GPIOH_PCLK_EN();
 8000388:	4b31      	ldr	r3, [pc, #196]	@ (8000450 <GPIO_PCLK+0x17c>)
 800038a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800038c:	4a30      	ldr	r2, [pc, #192]	@ (8000450 <GPIO_PCLK+0x17c>)
 800038e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000392:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000394:	e056      	b.n	8000444 <GPIO_PCLK+0x170>
		if (pGPIOx == GPIOA) {
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800039c:	d106      	bne.n	80003ac <GPIO_PCLK+0xd8>
			GPIOA_PCLK_DI();
 800039e:	4b2c      	ldr	r3, [pc, #176]	@ (8000450 <GPIO_PCLK+0x17c>)
 80003a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003a2:	4a2b      	ldr	r2, [pc, #172]	@ (8000450 <GPIO_PCLK+0x17c>)
 80003a4:	f023 0301 	bic.w	r3, r3, #1
 80003a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003aa:	e04b      	b.n	8000444 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOB) {
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4a29      	ldr	r2, [pc, #164]	@ (8000454 <GPIO_PCLK+0x180>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d106      	bne.n	80003c2 <GPIO_PCLK+0xee>
			GPIOB_PCLK_DI();
 80003b4:	4b26      	ldr	r3, [pc, #152]	@ (8000450 <GPIO_PCLK+0x17c>)
 80003b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003b8:	4a25      	ldr	r2, [pc, #148]	@ (8000450 <GPIO_PCLK+0x17c>)
 80003ba:	f023 0302 	bic.w	r3, r3, #2
 80003be:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003c0:	e040      	b.n	8000444 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOC) {
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a24      	ldr	r2, [pc, #144]	@ (8000458 <GPIO_PCLK+0x184>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d106      	bne.n	80003d8 <GPIO_PCLK+0x104>
			GPIOC_PCLK_DI();
 80003ca:	4b21      	ldr	r3, [pc, #132]	@ (8000450 <GPIO_PCLK+0x17c>)
 80003cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ce:	4a20      	ldr	r2, [pc, #128]	@ (8000450 <GPIO_PCLK+0x17c>)
 80003d0:	f023 0304 	bic.w	r3, r3, #4
 80003d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003d6:	e035      	b.n	8000444 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOD) {
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4a20      	ldr	r2, [pc, #128]	@ (800045c <GPIO_PCLK+0x188>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d106      	bne.n	80003ee <GPIO_PCLK+0x11a>
			GPIOD_PCLK_DI();
 80003e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000450 <GPIO_PCLK+0x17c>)
 80003e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003e4:	4a1a      	ldr	r2, [pc, #104]	@ (8000450 <GPIO_PCLK+0x17c>)
 80003e6:	f023 0308 	bic.w	r3, r3, #8
 80003ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003ec:	e02a      	b.n	8000444 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOE) {
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000460 <GPIO_PCLK+0x18c>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d106      	bne.n	8000404 <GPIO_PCLK+0x130>
			GPIOE_PCLK_DI();
 80003f6:	4b16      	ldr	r3, [pc, #88]	@ (8000450 <GPIO_PCLK+0x17c>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003fa:	4a15      	ldr	r2, [pc, #84]	@ (8000450 <GPIO_PCLK+0x17c>)
 80003fc:	f023 0310 	bic.w	r3, r3, #16
 8000400:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000402:	e01f      	b.n	8000444 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOF) {
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4a17      	ldr	r2, [pc, #92]	@ (8000464 <GPIO_PCLK+0x190>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d106      	bne.n	800041a <GPIO_PCLK+0x146>
			GPIOF_PCLK_DI();
 800040c:	4b10      	ldr	r3, [pc, #64]	@ (8000450 <GPIO_PCLK+0x17c>)
 800040e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000410:	4a0f      	ldr	r2, [pc, #60]	@ (8000450 <GPIO_PCLK+0x17c>)
 8000412:	f023 0320 	bic.w	r3, r3, #32
 8000416:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000418:	e014      	b.n	8000444 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOG) {
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4a12      	ldr	r2, [pc, #72]	@ (8000468 <GPIO_PCLK+0x194>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d106      	bne.n	8000430 <GPIO_PCLK+0x15c>
			GPIOG_PCLK_DI();
 8000422:	4b0b      	ldr	r3, [pc, #44]	@ (8000450 <GPIO_PCLK+0x17c>)
 8000424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000426:	4a0a      	ldr	r2, [pc, #40]	@ (8000450 <GPIO_PCLK+0x17c>)
 8000428:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800042c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800042e:	e009      	b.n	8000444 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOH) {
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a0e      	ldr	r2, [pc, #56]	@ (800046c <GPIO_PCLK+0x198>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d105      	bne.n	8000444 <GPIO_PCLK+0x170>
			GPIOH_PCLK_DI();
 8000438:	4b05      	ldr	r3, [pc, #20]	@ (8000450 <GPIO_PCLK+0x17c>)
 800043a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800043c:	4a04      	ldr	r2, [pc, #16]	@ (8000450 <GPIO_PCLK+0x17c>)
 800043e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000442:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr
 8000450:	40021000 	.word	0x40021000
 8000454:	48000400 	.word	0x48000400
 8000458:	48000800 	.word	0x48000800
 800045c:	48000c00 	.word	0x48000c00
 8000460:	48001000 	.word	0x48001000
 8000464:	48001400 	.word	0x48001400
 8000468:	48001800 	.word	0x48001800
 800046c:	48001c00 	.word	0x48001c00

08000470 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000470:	b480      	push	{r7}
 8000472:	b091      	sub	sp, #68	@ 0x44
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
	// Configure mode
	GPIO_PinConfig_t pinConfig = pGPIOHandle->GPIO_PinConfig;
 8000478:	687a      	ldr	r2, [r7, #4]
 800047a:	f107 030c 	add.w	r3, r7, #12
 800047e:	3204      	adds	r2, #4
 8000480:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000484:	6018      	str	r0, [r3, #0]
 8000486:	3304      	adds	r3, #4
 8000488:	8019      	strh	r1, [r3, #0]
	uint32_t mode = 0;
 800048a:	2300      	movs	r3, #0
 800048c:	63fb      	str	r3, [r7, #60]	@ 0x3c

	uint8_t pin_mode = pinConfig.GPIO_PinMode;
 800048e:	7b7b      	ldrb	r3, [r7, #13]
 8000490:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t pin_number = pinConfig.GPIO_PinNumber;
 8000494:	7b3b      	ldrb	r3, [r7, #12]
 8000496:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	// non IT
	if (pin_mode <= GPIO_MODE_ANALOG) {
 800049a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800049e:	2b03      	cmp	r3, #3
 80004a0:	d81d      	bhi.n	80004de <GPIO_Init+0x6e>
		// Mode takes 2 bits, all go consecutively so we can do 2 * pin number
		mode = pinConfig.GPIO_PinMode << (2 * pinConfig.GPIO_PinNumber);
 80004a2:	7b7b      	ldrb	r3, [r7, #13]
 80004a4:	461a      	mov	r2, r3
 80004a6:	7b3b      	ldrb	r3, [r7, #12]
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	fa02 f303 	lsl.w	r3, r2, r3
 80004ae:	63fb      	str	r3, [r7, #60]	@ 0x3c

		// Must clear before set!
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	7b3b      	ldrb	r3, [r7, #12]
 80004b8:	005b      	lsls	r3, r3, #1
 80004ba:	2103      	movs	r1, #3
 80004bc:	fa01 f303 	lsl.w	r3, r1, r3
 80004c0:	43db      	mvns	r3, r3
 80004c2:	4619      	mov	r1, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	400a      	ands	r2, r1
 80004ca:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= mode;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	6819      	ldr	r1, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80004d8:	430a      	orrs	r2, r1
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	e0e6      	b.n	80006ac <GPIO_Init+0x23c>
	} else {
	    // On reset mode will be analog, mode cant be analog for IT to work
        pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	7b3b      	ldrb	r3, [r7, #12]
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	2103      	movs	r1, #3
 80004ea:	fa01 f303 	lsl.w	r3, r1, r3
 80004ee:	43db      	mvns	r3, r3
 80004f0:	4619      	mov	r1, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	400a      	ands	r2, r1
 80004f8:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= GPIO_MODE_INPUT;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	6812      	ldr	r2, [r2, #0]
 8000504:	601a      	str	r2, [r3, #0]
	    // PA1, PB1 etc are connected to EXTI1
	    // ...
	    // PA15, PB15 are connected to EXTI15
	    // Lines 0-15 are for GPIO's

	    volatile uint32_t *FTSR = &EXTI->FTSR1;
 8000506:	4baa      	ldr	r3, [pc, #680]	@ (80007b0 <GPIO_Init+0x340>)
 8000508:	637b      	str	r3, [r7, #52]	@ 0x34
	    volatile uint32_t *RTSR = &EXTI->RTSR1;
 800050a:	4baa      	ldr	r3, [pc, #680]	@ (80007b4 <GPIO_Init+0x344>)
 800050c:	633b      	str	r3, [r7, #48]	@ 0x30
	    volatile uint32_t *IMR = &EXTI->IMR1;
 800050e:	4baa      	ldr	r3, [pc, #680]	@ (80007b8 <GPIO_Init+0x348>)
 8000510:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    // GPIO => EXTI(Edge detection, interupt delivery) => NVIC(Enable and configure IRQ) => CPU
	    // IRQ - interupt request
	    // NVIC - nested vectored interupt controler
        if (pin_mode == GPIO_MODE_IR_FT) {
 8000512:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000516:	2b04      	cmp	r3, #4
 8000518:	d115      	bne.n	8000546 <GPIO_Init+0xd6>
            // Configure falling edge control register (FTSR)
            *FTSR |= (1 << pin_number);
 800051a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000522:	2101      	movs	r1, #1
 8000524:	fa01 f202 	lsl.w	r2, r1, r2
 8000528:	431a      	orrs	r2, r3
 800052a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800052c:	601a      	str	r2, [r3, #0]
            *RTSR &= ~(1 << pin_number); // Reset RTSR just in case
 800052e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000536:	2101      	movs	r1, #1
 8000538:	fa01 f202 	lsl.w	r2, r1, r2
 800053c:	43d2      	mvns	r2, r2
 800053e:	401a      	ands	r2, r3
 8000540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	e031      	b.n	80005aa <GPIO_Init+0x13a>
        } else if (pin_mode == GPIO_MODE_IR_RT) {
 8000546:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800054a:	2b05      	cmp	r3, #5
 800054c:	d115      	bne.n	800057a <GPIO_Init+0x10a>
            // Configure rising edge control register (RTSR)
            *RTSR |= (1 << pin_number);
 800054e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000556:	2101      	movs	r1, #1
 8000558:	fa01 f202 	lsl.w	r2, r1, r2
 800055c:	431a      	orrs	r2, r3
 800055e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000560:	601a      	str	r2, [r3, #0]
            *FTSR &= ~(1 << pin_number); // Reset FTSR just in case
 8000562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800056a:	2101      	movs	r1, #1
 800056c:	fa01 f202 	lsl.w	r2, r1, r2
 8000570:	43d2      	mvns	r2, r2
 8000572:	401a      	ands	r2, r3
 8000574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	e017      	b.n	80005aa <GPIO_Init+0x13a>
        } else if (pin_mode == GPIO_MODE_IR_RFT) {
 800057a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800057e:	2b06      	cmp	r3, #6
 8000580:	d113      	bne.n	80005aa <GPIO_Init+0x13a>
            // Configure both registers
            *RTSR |= (1 << pin_number);
 8000582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800058a:	2101      	movs	r1, #1
 800058c:	fa01 f202 	lsl.w	r2, r1, r2
 8000590:	431a      	orrs	r2, r3
 8000592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000594:	601a      	str	r2, [r3, #0]
            *FTSR |= (1 << pin_number);
 8000596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800059e:	2101      	movs	r1, #1
 80005a0:	fa01 f202 	lsl.w	r2, r1, r2
 80005a4:	431a      	orrs	r2, r3
 80005a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005a8:	601a      	str	r2, [r3, #0]
        }

        // Configure GPIO port in SYSCFG_EXTIR
        uint8_t index = pin_number / 4;
 80005aa:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80005ae:	089b      	lsrs	r3, r3, #2
 80005b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        uint8_t offset = pin_number % 4;
 80005b4:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80005b8:	f003 0303 	and.w	r3, r3, #3
 80005bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

        uint8_t portcode = GPIO_ADR_TO_CODE(pGPIOHandle->pGPIOx);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80005c8:	d032      	beq.n	8000630 <GPIO_Init+0x1c0>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a7b      	ldr	r2, [pc, #492]	@ (80007bc <GPIO_Init+0x34c>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d02b      	beq.n	800062c <GPIO_Init+0x1bc>
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a79      	ldr	r2, [pc, #484]	@ (80007c0 <GPIO_Init+0x350>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d024      	beq.n	8000628 <GPIO_Init+0x1b8>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a78      	ldr	r2, [pc, #480]	@ (80007c4 <GPIO_Init+0x354>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d01d      	beq.n	8000624 <GPIO_Init+0x1b4>
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a76      	ldr	r2, [pc, #472]	@ (80007c8 <GPIO_Init+0x358>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d016      	beq.n	8000620 <GPIO_Init+0x1b0>
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a75      	ldr	r2, [pc, #468]	@ (80007cc <GPIO_Init+0x35c>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d00f      	beq.n	800061c <GPIO_Init+0x1ac>
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a73      	ldr	r2, [pc, #460]	@ (80007d0 <GPIO_Init+0x360>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d008      	beq.n	8000618 <GPIO_Init+0x1a8>
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a72      	ldr	r2, [pc, #456]	@ (80007d4 <GPIO_Init+0x364>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d101      	bne.n	8000614 <GPIO_Init+0x1a4>
 8000610:	2307      	movs	r3, #7
 8000612:	e00e      	b.n	8000632 <GPIO_Init+0x1c2>
 8000614:	2300      	movs	r3, #0
 8000616:	e00c      	b.n	8000632 <GPIO_Init+0x1c2>
 8000618:	2306      	movs	r3, #6
 800061a:	e00a      	b.n	8000632 <GPIO_Init+0x1c2>
 800061c:	2305      	movs	r3, #5
 800061e:	e008      	b.n	8000632 <GPIO_Init+0x1c2>
 8000620:	2304      	movs	r3, #4
 8000622:	e006      	b.n	8000632 <GPIO_Init+0x1c2>
 8000624:	2303      	movs	r3, #3
 8000626:	e004      	b.n	8000632 <GPIO_Init+0x1c2>
 8000628:	2302      	movs	r3, #2
 800062a:	e002      	b.n	8000632 <GPIO_Init+0x1c2>
 800062c:	2301      	movs	r3, #1
 800062e:	e000      	b.n	8000632 <GPIO_Init+0x1c2>
 8000630:	2300      	movs	r3, #0
 8000632:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

        SYSCFG_PCLK_EN();
 8000636:	4b68      	ldr	r3, [pc, #416]	@ (80007d8 <GPIO_Init+0x368>)
 8000638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800063a:	4a67      	ldr	r2, [pc, #412]	@ (80007d8 <GPIO_Init+0x368>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6613      	str	r3, [r2, #96]	@ 0x60
        SYSCFG->EXTICR[index] &= ~(portcode << (offset * 4));
 8000642:	4a66      	ldr	r2, [pc, #408]	@ (80007dc <GPIO_Init+0x36c>)
 8000644:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000648:	3302      	adds	r3, #2
 800064a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800064e:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8000652:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	fa01 f303 	lsl.w	r3, r1, r3
 800065c:	43db      	mvns	r3, r3
 800065e:	4618      	mov	r0, r3
 8000660:	495e      	ldr	r1, [pc, #376]	@ (80007dc <GPIO_Init+0x36c>)
 8000662:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000666:	4002      	ands	r2, r0
 8000668:	3302      	adds	r3, #2
 800066a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        SYSCFG->EXTICR[index] |= portcode << (offset * 4);
 800066e:	4a5b      	ldr	r2, [pc, #364]	@ (80007dc <GPIO_Init+0x36c>)
 8000670:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000674:	3302      	adds	r3, #2
 8000676:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800067a:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 800067e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	fa01 f303 	lsl.w	r3, r1, r3
 8000688:	4618      	mov	r0, r3
 800068a:	4954      	ldr	r1, [pc, #336]	@ (80007dc <GPIO_Init+0x36c>)
 800068c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000690:	4302      	orrs	r2, r0
 8000692:	3302      	adds	r3, #2
 8000694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Enable EXTI interupt delivery using IMR (Interupt mask register)
        *IMR |= (1 << pin_number);
 8000698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 80006a0:	2101      	movs	r1, #1
 80006a2:	fa01 f202 	lsl.w	r2, r1, r2
 80006a6:	431a      	orrs	r2, r3
 80006a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006aa:	601a      	str	r2, [r3, #0]
	}
	// Configure speed
	uint32_t speed = pinConfig.GPIO_PinSpeed << (2 * pinConfig.GPIO_PinNumber);
 80006ac:	7bbb      	ldrb	r3, [r7, #14]
 80006ae:	461a      	mov	r2, r3
 80006b0:	7b3b      	ldrb	r3, [r7, #12]
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	fa02 f303 	lsl.w	r3, r2, r3
 80006b8:	627b      	str	r3, [r7, #36]	@ 0x24
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	689a      	ldr	r2, [r3, #8]
 80006c0:	7b3b      	ldrb	r3, [r7, #12]
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	2103      	movs	r1, #3
 80006c6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ca:	43db      	mvns	r3, r3
 80006cc:	4619      	mov	r1, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	400a      	ands	r2, r1
 80006d4:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= speed;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	6899      	ldr	r1, [r3, #8]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006e2:	430a      	orrs	r2, r1
 80006e4:	609a      	str	r2, [r3, #8]

	// Configure pull up/down
	uint32_t pull = pinConfig.GPIO_PinPuPdControl << (2 * pinConfig.GPIO_PinNumber);
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	461a      	mov	r2, r3
 80006ea:	7b3b      	ldrb	r3, [r7, #12]
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	fa02 f303 	lsl.w	r3, r2, r3
 80006f2:	623b      	str	r3, [r7, #32]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	68da      	ldr	r2, [r3, #12]
 80006fa:	7b3b      	ldrb	r3, [r7, #12]
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	2103      	movs	r1, #3
 8000700:	fa01 f303 	lsl.w	r3, r1, r3
 8000704:	43db      	mvns	r3, r3
 8000706:	4619      	mov	r1, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	400a      	ands	r2, r1
 800070e:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= pull;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	68d9      	ldr	r1, [r3, #12]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	6a3a      	ldr	r2, [r7, #32]
 800071c:	430a      	orrs	r2, r1
 800071e:	60da      	str	r2, [r3, #12]

	// Configure otype, output type
	uint32_t o_type = pinConfig.GPIO_PinOPType << pinConfig.GPIO_PinNumber;
 8000720:	7c3b      	ldrb	r3, [r7, #16]
 8000722:	461a      	mov	r2, r3
 8000724:	7b3b      	ldrb	r3, [r7, #12]
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIOx->OTYPER |= o_type;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	6859      	ldr	r1, [r3, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	69fa      	ldr	r2, [r7, #28]
 8000738:	430a      	orrs	r2, r1
 800073a:	605a      	str	r2, [r3, #4]

	// Configure alt function
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	795b      	ldrb	r3, [r3, #5]
 8000740:	2b02      	cmp	r3, #2
 8000742:	d12f      	bne.n	80007a4 <GPIO_Init+0x334>

		uint32_t index = pinConfig.GPIO_PinNumber / 8;
 8000744:	7b3b      	ldrb	r3, [r7, #12]
 8000746:	08db      	lsrs	r3, r3, #3
 8000748:	b2db      	uxtb	r3, r3
 800074a:	61bb      	str	r3, [r7, #24]
		uint32_t offset = pinConfig.GPIO_PinNumber % 8;
 800074c:	7b3b      	ldrb	r3, [r7, #12]
 800074e:	f003 0307 	and.w	r3, r3, #7
 8000752:	617b      	str	r3, [r7, #20]

		pGPIOHandle->pGPIOx->AFR[index] &= ~(0xF << (4 * offset));
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	69ba      	ldr	r2, [r7, #24]
 800075a:	3208      	adds	r2, #8
 800075c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	210f      	movs	r1, #15
 8000766:	fa01 f303 	lsl.w	r3, r1, r3
 800076a:	43db      	mvns	r3, r3
 800076c:	4619      	mov	r1, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4011      	ands	r1, r2
 8000774:	69ba      	ldr	r2, [r7, #24]
 8000776:	3208      	adds	r2, #8
 8000778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[index] |= pinConfig.GPIO_PinAltFunMode << (4 * offset);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	69ba      	ldr	r2, [r7, #24]
 8000782:	3208      	adds	r2, #8
 8000784:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000788:	7c7b      	ldrb	r3, [r7, #17]
 800078a:	4619      	mov	r1, r3
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	fa01 f303 	lsl.w	r3, r1, r3
 8000794:	4619      	mov	r1, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4311      	orrs	r1, r2
 800079c:	69ba      	ldr	r2, [r7, #24]
 800079e:	3208      	adds	r2, #8
 80007a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80007a4:	bf00      	nop
 80007a6:	3744      	adds	r7, #68	@ 0x44
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	4001040c 	.word	0x4001040c
 80007b4:	40010408 	.word	0x40010408
 80007b8:	40010400 	.word	0x40010400
 80007bc:	48000400 	.word	0x48000400
 80007c0:	48000800 	.word	0x48000800
 80007c4:	48000c00 	.word	0x48000c00
 80007c8:	48001000 	.word	0x48001000
 80007cc:	48001400 	.word	0x48001400
 80007d0:	48001800 	.word	0x48001800
 80007d4:	48001c00 	.word	0x48001c00
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40010000 	.word	0x40010000

080007e0 <GPIO_TogglePin>:

void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t value) {
	pGPIOx->ODR |= value;
}

void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber) {
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR = pGPIOx->ODR ^ (1 << pinNumber);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	695b      	ldr	r3, [r3, #20]
 80007f0:	78fa      	ldrb	r2, [r7, #3]
 80007f2:	2101      	movs	r1, #1
 80007f4:	fa01 f202 	lsl.w	r2, r1, r2
 80007f8:	405a      	eors	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	615a      	str	r2, [r3, #20]
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <GPIO_IRQInterruptConfig>:

void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t isEnable) {
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	460a      	mov	r2, r1
 8000816:	71fb      	strb	r3, [r7, #7]
 8000818:	4613      	mov	r3, r2
 800081a:	71bb      	strb	r3, [r7, #6]
    if (isEnable == ENABLE) {
 800081c:	79bb      	ldrb	r3, [r7, #6]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d133      	bne.n	800088a <GPIO_IRQInterruptConfig+0x7e>
        if (IRQNumber <= 31) {
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2b1f      	cmp	r3, #31
 8000826:	d80a      	bhi.n	800083e <GPIO_IRQInterruptConfig+0x32>
            // ISER0
            *NVIC_ISER0 |= (1 << IRQNumber);
 8000828:	4b35      	ldr	r3, [pc, #212]	@ (8000900 <GPIO_IRQInterruptConfig+0xf4>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	79fa      	ldrb	r2, [r7, #7]
 800082e:	2101      	movs	r1, #1
 8000830:	fa01 f202 	lsl.w	r2, r1, r2
 8000834:	4611      	mov	r1, r2
 8000836:	4a32      	ldr	r2, [pc, #200]	@ (8000900 <GPIO_IRQInterruptConfig+0xf4>)
 8000838:	430b      	orrs	r3, r1
 800083a:	6013      	str	r3, [r2, #0]
        } else if (IRQNumber >= 64 && IRQNumber < 96) {
            // ICER2
            *NVIC_ICER2 |= (1 << (IRQNumber % 32));
        }
    }
}
 800083c:	e059      	b.n	80008f2 <GPIO_IRQInterruptConfig+0xe6>
        } else if (IRQNumber > 32 && IRQNumber < 64) {
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	2b20      	cmp	r3, #32
 8000842:	d90f      	bls.n	8000864 <GPIO_IRQInterruptConfig+0x58>
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b3f      	cmp	r3, #63	@ 0x3f
 8000848:	d80c      	bhi.n	8000864 <GPIO_IRQInterruptConfig+0x58>
            *NVIC_ISER1 |= (1 << (IRQNumber % 32));
 800084a:	4b2e      	ldr	r3, [pc, #184]	@ (8000904 <GPIO_IRQInterruptConfig+0xf8>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	79fa      	ldrb	r2, [r7, #7]
 8000850:	f002 021f 	and.w	r2, r2, #31
 8000854:	2101      	movs	r1, #1
 8000856:	fa01 f202 	lsl.w	r2, r1, r2
 800085a:	4611      	mov	r1, r2
 800085c:	4a29      	ldr	r2, [pc, #164]	@ (8000904 <GPIO_IRQInterruptConfig+0xf8>)
 800085e:	430b      	orrs	r3, r1
 8000860:	6013      	str	r3, [r2, #0]
 8000862:	e046      	b.n	80008f2 <GPIO_IRQInterruptConfig+0xe6>
        } else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	2b3f      	cmp	r3, #63	@ 0x3f
 8000868:	d943      	bls.n	80008f2 <GPIO_IRQInterruptConfig+0xe6>
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	2b5f      	cmp	r3, #95	@ 0x5f
 800086e:	d840      	bhi.n	80008f2 <GPIO_IRQInterruptConfig+0xe6>
            *NVIC_ISER2 |= (1 << IRQNumber % 32);
 8000870:	4b25      	ldr	r3, [pc, #148]	@ (8000908 <GPIO_IRQInterruptConfig+0xfc>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	79fa      	ldrb	r2, [r7, #7]
 8000876:	f002 021f 	and.w	r2, r2, #31
 800087a:	2101      	movs	r1, #1
 800087c:	fa01 f202 	lsl.w	r2, r1, r2
 8000880:	4611      	mov	r1, r2
 8000882:	4a21      	ldr	r2, [pc, #132]	@ (8000908 <GPIO_IRQInterruptConfig+0xfc>)
 8000884:	430b      	orrs	r3, r1
 8000886:	6013      	str	r3, [r2, #0]
}
 8000888:	e033      	b.n	80008f2 <GPIO_IRQInterruptConfig+0xe6>
        if (IRQNumber <= 31) {
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2b1f      	cmp	r3, #31
 800088e:	d80a      	bhi.n	80008a6 <GPIO_IRQInterruptConfig+0x9a>
            *NVIC_ICER0 |= (1 << IRQNumber);
 8000890:	4b1e      	ldr	r3, [pc, #120]	@ (800090c <GPIO_IRQInterruptConfig+0x100>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	79fa      	ldrb	r2, [r7, #7]
 8000896:	2101      	movs	r1, #1
 8000898:	fa01 f202 	lsl.w	r2, r1, r2
 800089c:	4611      	mov	r1, r2
 800089e:	4a1b      	ldr	r2, [pc, #108]	@ (800090c <GPIO_IRQInterruptConfig+0x100>)
 80008a0:	430b      	orrs	r3, r1
 80008a2:	6013      	str	r3, [r2, #0]
}
 80008a4:	e025      	b.n	80008f2 <GPIO_IRQInterruptConfig+0xe6>
        } else if (IRQNumber > 32 && IRQNumber < 64) {
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b20      	cmp	r3, #32
 80008aa:	d90f      	bls.n	80008cc <GPIO_IRQInterruptConfig+0xc0>
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80008b0:	d80c      	bhi.n	80008cc <GPIO_IRQInterruptConfig+0xc0>
            *NVIC_ICER1 |= (1 << (IRQNumber % 32));
 80008b2:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <GPIO_IRQInterruptConfig+0x104>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	79fa      	ldrb	r2, [r7, #7]
 80008b8:	f002 021f 	and.w	r2, r2, #31
 80008bc:	2101      	movs	r1, #1
 80008be:	fa01 f202 	lsl.w	r2, r1, r2
 80008c2:	4611      	mov	r1, r2
 80008c4:	4a12      	ldr	r2, [pc, #72]	@ (8000910 <GPIO_IRQInterruptConfig+0x104>)
 80008c6:	430b      	orrs	r3, r1
 80008c8:	6013      	str	r3, [r2, #0]
 80008ca:	e012      	b.n	80008f2 <GPIO_IRQInterruptConfig+0xe6>
        } else if (IRQNumber >= 64 && IRQNumber < 96) {
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80008d0:	d90f      	bls.n	80008f2 <GPIO_IRQInterruptConfig+0xe6>
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	2b5f      	cmp	r3, #95	@ 0x5f
 80008d6:	d80c      	bhi.n	80008f2 <GPIO_IRQInterruptConfig+0xe6>
            *NVIC_ICER2 |= (1 << (IRQNumber % 32));
 80008d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <GPIO_IRQInterruptConfig+0x108>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	79fa      	ldrb	r2, [r7, #7]
 80008de:	f002 021f 	and.w	r2, r2, #31
 80008e2:	2101      	movs	r1, #1
 80008e4:	fa01 f202 	lsl.w	r2, r1, r2
 80008e8:	4611      	mov	r1, r2
 80008ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000914 <GPIO_IRQInterruptConfig+0x108>)
 80008ec:	430b      	orrs	r3, r1
 80008ee:	6013      	str	r3, [r2, #0]
}
 80008f0:	e7ff      	b.n	80008f2 <GPIO_IRQInterruptConfig+0xe6>
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000e100 	.word	0xe000e100
 8000904:	e000e104 	.word	0xe000e104
 8000908:	e000e108 	.word	0xe000e108
 800090c:	e000e180 	.word	0xe000e180
 8000910:	e000e184 	.word	0xe000e184
 8000914:	e000e188 	.word	0xe000e188

08000918 <GPIO_IRQPriorityConfig>:

void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority) {
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	6039      	str	r1, [r7, #0]
 8000922:	71fb      	strb	r3, [r7, #7]
    uint8_t index = IRQNumber / 4;
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	089b      	lsrs	r3, r3, #2
 8000928:	73fb      	strb	r3, [r7, #15]
    uint8_t offset = IRQNumber % 4;
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	f003 0303 	and.w	r3, r3, #3
 8000930:	73bb      	strb	r3, [r7, #14]

    // PR lower 4 bits are ignored, thus have to shift prio by 4
    IRQPriority = IRQPriority << NO_PR_BITS;
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	011b      	lsls	r3, r3, #4
 8000936:	603b      	str	r3, [r7, #0]

    *(NVIC_PR_BASE_ADDR + index) |= IRQPriority << (offset * 8);
 8000938:	7bfb      	ldrb	r3, [r7, #15]
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000940:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000944:	6819      	ldr	r1, [r3, #0]
 8000946:	7bbb      	ldrb	r3, [r7, #14]
 8000948:	00db      	lsls	r3, r3, #3
 800094a:	683a      	ldr	r2, [r7, #0]
 800094c:	409a      	lsls	r2, r3
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000956:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 800095a:	430a      	orrs	r2, r1
 800095c:	601a      	str	r2, [r3, #0]
}
 800095e:	bf00      	nop
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
	...

0800096c <GPIO_IRQHandle>:

void GPIO_IRQHandle(uint8_t pinNumber) {
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
    // clear the EXTI PR (pending) register
    if (EXTI->PR1 & (1 << pinNumber)) {
 8000976:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <GPIO_IRQHandle+0x3c>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	79fa      	ldrb	r2, [r7, #7]
 800097c:	2101      	movs	r1, #1
 800097e:	fa01 f202 	lsl.w	r2, r1, r2
 8000982:	4013      	ands	r3, r2
 8000984:	2b00      	cmp	r3, #0
 8000986:	d009      	beq.n	800099c <GPIO_IRQHandle+0x30>
        EXTI->PR1 |= (1 << pinNumber);
 8000988:	4b07      	ldr	r3, [pc, #28]	@ (80009a8 <GPIO_IRQHandle+0x3c>)
 800098a:	695b      	ldr	r3, [r3, #20]
 800098c:	79fa      	ldrb	r2, [r7, #7]
 800098e:	2101      	movs	r1, #1
 8000990:	fa01 f202 	lsl.w	r2, r1, r2
 8000994:	4611      	mov	r1, r2
 8000996:	4a04      	ldr	r2, [pc, #16]	@ (80009a8 <GPIO_IRQHandle+0x3c>)
 8000998:	430b      	orrs	r3, r1
 800099a:	6153      	str	r3, [r2, #20]
    }
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	40010400 	.word	0x40010400

080009ac <__libc_init_array>:
 80009ac:	b570      	push	{r4, r5, r6, lr}
 80009ae:	4d0d      	ldr	r5, [pc, #52]	@ (80009e4 <__libc_init_array+0x38>)
 80009b0:	4c0d      	ldr	r4, [pc, #52]	@ (80009e8 <__libc_init_array+0x3c>)
 80009b2:	1b64      	subs	r4, r4, r5
 80009b4:	10a4      	asrs	r4, r4, #2
 80009b6:	2600      	movs	r6, #0
 80009b8:	42a6      	cmp	r6, r4
 80009ba:	d109      	bne.n	80009d0 <__libc_init_array+0x24>
 80009bc:	4d0b      	ldr	r5, [pc, #44]	@ (80009ec <__libc_init_array+0x40>)
 80009be:	4c0c      	ldr	r4, [pc, #48]	@ (80009f0 <__libc_init_array+0x44>)
 80009c0:	f000 f818 	bl	80009f4 <_init>
 80009c4:	1b64      	subs	r4, r4, r5
 80009c6:	10a4      	asrs	r4, r4, #2
 80009c8:	2600      	movs	r6, #0
 80009ca:	42a6      	cmp	r6, r4
 80009cc:	d105      	bne.n	80009da <__libc_init_array+0x2e>
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80009d4:	4798      	blx	r3
 80009d6:	3601      	adds	r6, #1
 80009d8:	e7ee      	b.n	80009b8 <__libc_init_array+0xc>
 80009da:	f855 3b04 	ldr.w	r3, [r5], #4
 80009de:	4798      	blx	r3
 80009e0:	3601      	adds	r6, #1
 80009e2:	e7f2      	b.n	80009ca <__libc_init_array+0x1e>
 80009e4:	08000a24 	.word	0x08000a24
 80009e8:	08000a24 	.word	0x08000a24
 80009ec:	08000a24 	.word	0x08000a24
 80009f0:	08000a28 	.word	0x08000a28

080009f4 <_init>:
 80009f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009f6:	bf00      	nop
 80009f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009fa:	bc08      	pop	{r3}
 80009fc:	469e      	mov	lr, r3
 80009fe:	4770      	bx	lr

08000a00 <_fini>:
 8000a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a02:	bf00      	nop
 8000a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a06:	bc08      	pop	{r3}
 8000a08:	469e      	mov	lr, r3
 8000a0a:	4770      	bx	lr
