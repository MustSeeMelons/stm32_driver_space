
stm32l4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f6c  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080010f0  080010f0  000020f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001108  08001108  00003004  2**0
                  CONTENTS
  4 .ARM          00000000  08001108  08001108  00003004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001108  08001108  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001108  08001108  00002108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800110c  0800110c  0000210c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08001110  00003000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00003004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00003004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00003004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001609  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000459  00000000  00000000  0000463d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  00004a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000114  00000000  00000000  00004c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002509  00000000  00000000  00004d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a76  00000000  00000000  0000722d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000092ef  00000000  00000000  00008ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00011f92  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000564  00000000  00000000  00011fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  0001253c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000004 	.word	0x20000004
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080010d8 	.word	0x080010d8

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000008 	.word	0x20000008
 80001c0:	080010d8 	.word	0x080010d8

080001c4 <delay>:
// SCK  13

static uint8_t dummy_byte = 0xff; // To send for when we want to "ask" something
static uint8_t dummy_data = 0;

void delay(uint32_t time) {
 80001c4:	b480      	push	{r7}
 80001c6:	b085      	sub	sp, #20
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < time; i++)
 80001cc:	2300      	movs	r3, #0
 80001ce:	60fb      	str	r3, [r7, #12]
 80001d0:	e002      	b.n	80001d8 <delay+0x14>
 80001d2:	68fb      	ldr	r3, [r7, #12]
 80001d4:	3301      	adds	r3, #1
 80001d6:	60fb      	str	r3, [r7, #12]
 80001d8:	68fa      	ldr	r2, [r7, #12]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	429a      	cmp	r2, r3
 80001de:	d3f8      	bcc.n	80001d2 <delay+0xe>
        ;
}
 80001e0:	bf00      	nop
 80001e2:	bf00      	nop
 80001e4:	3714      	adds	r7, #20
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr
	...

080001f0 <SPI_GPIO_Setup>:

void SPI_GPIO_Setup() {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b086      	sub	sp, #24
 80001f4:	af00      	add	r7, sp, #0
    // White wire
    GPIO_Handle_t spi_handle = {
 80001f6:	f107 030c 	add.w	r3, r7, #12
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	4b1c      	ldr	r3, [pc, #112]	@ (8000274 <SPI_GPIO_Setup+0x84>)
 8000204:	60fb      	str	r3, [r7, #12]
 8000206:	2302      	movs	r3, #2
 8000208:	747b      	strb	r3, [r7, #17]
 800020a:	2302      	movs	r3, #2
 800020c:	74bb      	strb	r3, [r7, #18]
 800020e:	2305      	movs	r3, #5
 8000210:	757b      	strb	r3, [r7, #21]
            .GPIO_PinOPType = GPIO_OP_TYPE_PP,
            .GPIO_PinAltFunMode = GPIO_AF_5
        }
    };

    GPIO_PCLK(GPIOB, ENABLE);
 8000212:	2101      	movs	r1, #1
 8000214:	4817      	ldr	r0, [pc, #92]	@ (8000274 <SPI_GPIO_Setup+0x84>)
 8000216:	f000 fa7f 	bl	8000718 <GPIO_PCLK>

    // MOSI
    spi_handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_N15;
 800021a:	230f      	movs	r3, #15
 800021c:	743b      	strb	r3, [r7, #16]
    GPIO_Init(&spi_handle);
 800021e:	f107 030c 	add.w	r3, r7, #12
 8000222:	4618      	mov	r0, r3
 8000224:	f000 fb46 	bl	80008b4 <GPIO_Init>

    // SCK
    spi_handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_N13;
 8000228:	230d      	movs	r3, #13
 800022a:	743b      	strb	r3, [r7, #16]
    GPIO_Init(&spi_handle);
 800022c:	f107 030c 	add.w	r3, r7, #12
 8000230:	4618      	mov	r0, r3
 8000232:	f000 fb3f 	bl	80008b4 <GPIO_Init>

    // MISO
    spi_handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_N14;
 8000236:	230e      	movs	r3, #14
 8000238:	743b      	strb	r3, [r7, #16]
    GPIO_Init(&spi_handle);
 800023a:	f107 030c 	add.w	r3, r7, #12
 800023e:	4618      	mov	r0, r3
 8000240:	f000 fb38 	bl	80008b4 <GPIO_Init>

    // NSS
    spi_handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_N12;
 8000244:	230c      	movs	r3, #12
 8000246:	743b      	strb	r3, [r7, #16]
    GPIO_Init(&spi_handle);
 8000248:	f107 030c 	add.w	r3, r7, #12
 800024c:	4618      	mov	r0, r3
 800024e:	f000 fb31 	bl	80008b4 <GPIO_Init>

    GPIO_Handle_t btn_handle = {
 8000252:	4a09      	ldr	r2, [pc, #36]	@ (8000278 <SPI_GPIO_Setup+0x88>)
 8000254:	463b      	mov	r3, r7
 8000256:	ca07      	ldmia	r2, {r0, r1, r2}
 8000258:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            .GPIO_PinOPType = GPIO_OP_TYPE_PP,
            .GPIO_PinAltFunMode = 0
        }
    };

    GPIO_PCLK(GPIOC, ENABLE);
 800025c:	2101      	movs	r1, #1
 800025e:	4807      	ldr	r0, [pc, #28]	@ (800027c <SPI_GPIO_Setup+0x8c>)
 8000260:	f000 fa5a 	bl	8000718 <GPIO_PCLK>

    GPIO_Init(&btn_handle);
 8000264:	463b      	mov	r3, r7
 8000266:	4618      	mov	r0, r3
 8000268:	f000 fb24 	bl	80008b4 <GPIO_Init>
}
 800026c:	bf00      	nop
 800026e:	3718      	adds	r7, #24
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	48000400 	.word	0x48000400
 8000278:	080010f0 	.word	0x080010f0
 800027c:	48000800 	.word	0x48000800

08000280 <SPI_VerifyResponse>:

uint8_t SPI_VerifyResponse(uint8_t ack) {
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
    return 1;
 800028a:	2301      	movs	r3, #1
    if (ack == 0xF5) {
        return 1;
    } else {
        return 0;
    }
}
 800028c:	4618      	mov	r0, r3
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr

08000298 <process_led_toggle>:

void process_led_toggle(SPI_Handle_t *spi_handle) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
    // Send command
    uint8_t cmd_code = CMD_LED_CTRL;
 80002a0:	2350      	movs	r3, #80	@ 0x50
 80002a2:	73fb      	strb	r3, [r7, #15]
    SPI_SendData(spi_handle->pSPIx, &cmd_code, 1);
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	f107 010f 	add.w	r1, r7, #15
 80002ac:	2201      	movs	r2, #1
 80002ae:	4618      	mov	r0, r3
 80002b0:	f000 fe0c 	bl	8000ecc <SPI_SendData>
    // Clear RXNE
    SPI_ReceiveData(spi_handle->pSPIx, &dummy_data, 1);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	2201      	movs	r2, #1
 80002ba:	491b      	ldr	r1, [pc, #108]	@ (8000328 <process_led_toggle+0x90>)
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 fe55 	bl	8000f6c <SPI_ReceiveData>

    delay(1000);
 80002c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002c6:	f7ff ff7d 	bl	80001c4 <delay>

    // Get ACK/NACK
    uint8_t ack;
    uint8_t args[2];

    SPI_SendData(spi_handle->pSPIx, &dummy_byte, 1);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2201      	movs	r2, #1
 80002d0:	4916      	ldr	r1, [pc, #88]	@ (800032c <process_led_toggle+0x94>)
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 fdfa 	bl	8000ecc <SPI_SendData>
    SPI_ReceiveData(spi_handle->pSPIx, &ack, 1);
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f107 010e 	add.w	r1, r7, #14
 80002e0:	2201      	movs	r2, #1
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 fe42 	bl	8000f6c <SPI_ReceiveData>

    if (SPI_VerifyResponse(ack)) {
 80002e8:	7bbb      	ldrb	r3, [r7, #14]
 80002ea:	4618      	mov	r0, r3
 80002ec:	f7ff ffc8 	bl	8000280 <SPI_VerifyResponse>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d00b      	beq.n	800030e <process_led_toggle+0x76>
        args[0] = LED_PIN;
 80002f6:	2309      	movs	r3, #9
 80002f8:	733b      	strb	r3, [r7, #12]
        args[1] = LED_ON;
 80002fa:	2301      	movs	r3, #1
 80002fc:	737b      	strb	r3, [r7, #13]

        SPI_SendData(spi_handle->pSPIx, args, 2);
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f107 010c 	add.w	r1, r7, #12
 8000306:	2202      	movs	r2, #2
 8000308:	4618      	mov	r0, r3
 800030a:	f000 fddf 	bl	8000ecc <SPI_SendData>
    }

    // 1 for busy, Wait for busy flag to clear
    while (spi_handle->pSPIx->SR & (0x1 << SPI_SR_BSY))
 800030e:	bf00      	nop
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	689b      	ldr	r3, [r3, #8]
 8000316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800031a:	2b00      	cmp	r3, #0
 800031c:	d1f8      	bne.n	8000310 <process_led_toggle+0x78>
        ;
}
 800031e:	bf00      	nop
 8000320:	bf00      	nop
 8000322:	3710      	adds	r7, #16
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000020 	.word	0x20000020
 800032c:	20000000 	.word	0x20000000

08000330 <process_sensor_read>:

void process_sensor_read(SPI_Handle_t *spi_handle) {
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
    uint8_t cmd_code = CMD_SENSOR_READ;
 8000338:	2351      	movs	r3, #81	@ 0x51
 800033a:	73fb      	strb	r3, [r7, #15]
    SPI_SendData(spi_handle->pSPIx, &cmd_code, 1);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f107 010f 	add.w	r1, r7, #15
 8000344:	2201      	movs	r2, #1
 8000346:	4618      	mov	r0, r3
 8000348:	f000 fdc0 	bl	8000ecc <SPI_SendData>

    delay(1000);
 800034c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000350:	f7ff ff38 	bl	80001c4 <delay>

    // Clear RXNE
    SPI_ReceiveData(spi_handle->pSPIx, &dummy_data, 1);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2201      	movs	r2, #1
 800035a:	4925      	ldr	r1, [pc, #148]	@ (80003f0 <process_sensor_read+0xc0>)
 800035c:	4618      	mov	r0, r3
 800035e:	f000 fe05 	bl	8000f6c <SPI_ReceiveData>

    // Get ACK/NACK
    uint8_t ack;
    uint8_t args[2];

    SPI_SendData(spi_handle->pSPIx, &dummy_byte, 1);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	2201      	movs	r2, #1
 8000368:	4922      	ldr	r1, [pc, #136]	@ (80003f4 <process_sensor_read+0xc4>)
 800036a:	4618      	mov	r0, r3
 800036c:	f000 fdae 	bl	8000ecc <SPI_SendData>
    SPI_ReceiveData(spi_handle->pSPIx, &ack, 1);
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f107 010e 	add.w	r1, r7, #14
 8000378:	2201      	movs	r2, #1
 800037a:	4618      	mov	r0, r3
 800037c:	f000 fdf6 	bl	8000f6c <SPI_ReceiveData>

    if (SPI_VerifyResponse(ack)) {
 8000380:	7bbb      	ldrb	r3, [r7, #14]
 8000382:	4618      	mov	r0, r3
 8000384:	f7ff ff7c 	bl	8000280 <SPI_VerifyResponse>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d022      	beq.n	80003d4 <process_sensor_read+0xa4>
        args[0] = ANALOG_PIN0;
 800038e:	2300      	movs	r3, #0
 8000390:	733b      	strb	r3, [r7, #12]

        SPI_SendData(spi_handle->pSPIx, args, 1);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f107 010c 	add.w	r1, r7, #12
 800039a:	2201      	movs	r2, #1
 800039c:	4618      	mov	r0, r3
 800039e:	f000 fd95 	bl	8000ecc <SPI_SendData>

        // Clear RXNE
        SPI_ReceiveData(spi_handle->pSPIx, &dummy_data, 1);
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2201      	movs	r2, #1
 80003a8:	4911      	ldr	r1, [pc, #68]	@ (80003f0 <process_sensor_read+0xc0>)
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 fdde 	bl	8000f6c <SPI_ReceiveData>

        // Delay, so slave is ready with data
        delay(100);
 80003b0:	2064      	movs	r0, #100	@ 0x64
 80003b2:	f7ff ff07 	bl	80001c4 <delay>

        // Get data from slave
        SPI_SendData(spi_handle->pSPIx, &dummy_byte, 1);
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	2201      	movs	r2, #1
 80003bc:	490d      	ldr	r1, [pc, #52]	@ (80003f4 <process_sensor_read+0xc4>)
 80003be:	4618      	mov	r0, r3
 80003c0:	f000 fd84 	bl	8000ecc <SPI_SendData>

        uint8_t analog_read;
        SPI_ReceiveData(spi_handle->pSPIx, &analog_read, 1);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f107 010b 	add.w	r1, r7, #11
 80003cc:	2201      	movs	r2, #1
 80003ce:	4618      	mov	r0, r3
 80003d0:	f000 fdcc 	bl	8000f6c <SPI_ReceiveData>
    }

    // 1 for busy, Wait for busy flag to clear
    while (spi_handle->pSPIx->SR & (0x1 << SPI_SR_BSY))
 80003d4:	bf00      	nop
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d1f8      	bne.n	80003d6 <process_sensor_read+0xa6>
        ;
}
 80003e4:	bf00      	nop
 80003e6:	bf00      	nop
 80003e8:	3710      	adds	r7, #16
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	20000020 	.word	0x20000020
 80003f4:	20000000 	.word	0x20000000

080003f8 <process_led_read>:

void process_led_read(SPI_Handle_t *spi_handle) {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
    uint8_t cmd_code = CMD_LED_READ;
 8000400:	2352      	movs	r3, #82	@ 0x52
 8000402:	73fb      	strb	r3, [r7, #15]
    SPI_SendData(spi_handle->pSPIx, &cmd_code, 1);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	f107 010f 	add.w	r1, r7, #15
 800040c:	2201      	movs	r2, #1
 800040e:	4618      	mov	r0, r3
 8000410:	f000 fd5c 	bl	8000ecc <SPI_SendData>

    delay(1000);
 8000414:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000418:	f7ff fed4 	bl	80001c4 <delay>

    // Clear RXNE
    SPI_ReceiveData(spi_handle->pSPIx, &dummy_data, 1);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2201      	movs	r2, #1
 8000422:	4920      	ldr	r1, [pc, #128]	@ (80004a4 <process_led_read+0xac>)
 8000424:	4618      	mov	r0, r3
 8000426:	f000 fda1 	bl	8000f6c <SPI_ReceiveData>

    // Get ACK/NACK
    uint8_t ack;
    uint8_t args[2];

    SPI_SendData(spi_handle->pSPIx, &dummy_byte, 1);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	2201      	movs	r2, #1
 8000430:	491d      	ldr	r1, [pc, #116]	@ (80004a8 <process_led_read+0xb0>)
 8000432:	4618      	mov	r0, r3
 8000434:	f000 fd4a 	bl	8000ecc <SPI_SendData>
    SPI_ReceiveData(spi_handle->pSPIx, &ack, 1);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f107 010e 	add.w	r1, r7, #14
 8000440:	2201      	movs	r2, #1
 8000442:	4618      	mov	r0, r3
 8000444:	f000 fd92 	bl	8000f6c <SPI_ReceiveData>

    if (SPI_VerifyResponse(ack)) {
 8000448:	7bbb      	ldrb	r3, [r7, #14]
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff ff18 	bl	8000280 <SPI_VerifyResponse>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d022      	beq.n	800049c <process_led_read+0xa4>
        args[0] = LED_PIN;
 8000456:	2309      	movs	r3, #9
 8000458:	733b      	strb	r3, [r7, #12]

        SPI_SendData(spi_handle->pSPIx, args, 1);
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f107 010c 	add.w	r1, r7, #12
 8000462:	2201      	movs	r2, #1
 8000464:	4618      	mov	r0, r3
 8000466:	f000 fd31 	bl	8000ecc <SPI_SendData>

        // Clear RXNE
        SPI_ReceiveData(spi_handle->pSPIx, &dummy_data, 1);
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2201      	movs	r2, #1
 8000470:	490c      	ldr	r1, [pc, #48]	@ (80004a4 <process_led_read+0xac>)
 8000472:	4618      	mov	r0, r3
 8000474:	f000 fd7a 	bl	8000f6c <SPI_ReceiveData>

        // Delay, so slave is ready with data
        delay(100);
 8000478:	2064      	movs	r0, #100	@ 0x64
 800047a:	f7ff fea3 	bl	80001c4 <delay>

        // Get data from slave
        SPI_SendData(spi_handle->pSPIx, &dummy_byte, 1);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	2201      	movs	r2, #1
 8000484:	4908      	ldr	r1, [pc, #32]	@ (80004a8 <process_led_read+0xb0>)
 8000486:	4618      	mov	r0, r3
 8000488:	f000 fd20 	bl	8000ecc <SPI_SendData>

        uint8_t led_state;
        SPI_ReceiveData(spi_handle->pSPIx, &led_state, 1);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f107 010b 	add.w	r1, r7, #11
 8000494:	2201      	movs	r2, #1
 8000496:	4618      	mov	r0, r3
 8000498:	f000 fd68 	bl	8000f6c <SPI_ReceiveData>
    }
}
 800049c:	bf00      	nop
 800049e:	3710      	adds	r7, #16
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	20000020 	.word	0x20000020
 80004a8:	20000000 	.word	0x20000000

080004ac <process_print>:

void process_print(SPI_Handle_t *spi_handle){}
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	bf00      	nop
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr

080004c0 <process_id_read>:

void process_id_read(SPI_Handle_t *spi_handle){
 80004c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80004c4:	b089      	sub	sp, #36	@ 0x24
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
    // Send command
    // TODO we really should take it as a param and make the initial "handshake" a function
    uint8_t cmd = CMD_ID_READ;
 80004ca:	2354      	movs	r3, #84	@ 0x54
 80004cc:	73fb      	strb	r3, [r7, #15]
    SPI_SendData(spi_handle->pSPIx, &cmd, 1);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f107 010f 	add.w	r1, r7, #15
 80004d6:	2201      	movs	r2, #1
 80004d8:	4618      	mov	r0, r3
 80004da:	f000 fcf7 	bl	8000ecc <SPI_SendData>

    delay(1000);
 80004de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004e2:	f7ff fe6f 	bl	80001c4 <delay>

    // Reset RX flag
    SPI_ReceiveData(spi_handle->pSPIx, &dummy_data, 1);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2201      	movs	r2, #1
 80004ec:	4936      	ldr	r1, [pc, #216]	@ (80005c8 <process_id_read+0x108>)
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 fd3c 	bl	8000f6c <SPI_ReceiveData>

    delay(1000);
 80004f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004f8:	f7ff fe64 	bl	80001c4 <delay>

    // Send dummy data to obtain ack
    uint8_t ack;
    SPI_SendData(spi_handle->pSPIx, &dummy_byte, 1);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2201      	movs	r2, #1
 8000502:	4932      	ldr	r1, [pc, #200]	@ (80005cc <process_id_read+0x10c>)
 8000504:	4618      	mov	r0, r3
 8000506:	f000 fce1 	bl	8000ecc <SPI_SendData>
    SPI_ReceiveData(spi_handle->pSPIx, &ack, 1);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f107 010e 	add.w	r1, r7, #14
 8000512:	2201      	movs	r2, #1
 8000514:	4618      	mov	r0, r3
 8000516:	f000 fd29 	bl	8000f6c <SPI_ReceiveData>

    const uint8_t buff_size = 10;
 800051a:	230a      	movs	r3, #10
 800051c:	76fb      	strb	r3, [r7, #27]

    if (SPI_VerifyResponse(ack)) {
 800051e:	7bbb      	ldrb	r3, [r7, #14]
 8000520:	4618      	mov	r0, r3
 8000522:	f7ff fead 	bl	8000280 <SPI_VerifyResponse>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d047      	beq.n	80005bc <process_id_read+0xfc>
 800052c:	466b      	mov	r3, sp
 800052e:	461e      	mov	r6, r3
        uint8_t buffer[buff_size];
 8000530:	7efb      	ldrb	r3, [r7, #27]
 8000532:	3b01      	subs	r3, #1
 8000534:	617b      	str	r3, [r7, #20]
 8000536:	7efb      	ldrb	r3, [r7, #27]
 8000538:	2200      	movs	r2, #0
 800053a:	4698      	mov	r8, r3
 800053c:	4691      	mov	r9, r2
 800053e:	f04f 0200 	mov.w	r2, #0
 8000542:	f04f 0300 	mov.w	r3, #0
 8000546:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800054a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800054e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000552:	7efb      	ldrb	r3, [r7, #27]
 8000554:	2200      	movs	r2, #0
 8000556:	461c      	mov	r4, r3
 8000558:	4615      	mov	r5, r2
 800055a:	f04f 0200 	mov.w	r2, #0
 800055e:	f04f 0300 	mov.w	r3, #0
 8000562:	00eb      	lsls	r3, r5, #3
 8000564:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000568:	00e2      	lsls	r2, r4, #3
 800056a:	7efb      	ldrb	r3, [r7, #27]
 800056c:	3307      	adds	r3, #7
 800056e:	08db      	lsrs	r3, r3, #3
 8000570:	00db      	lsls	r3, r3, #3
 8000572:	ebad 0d03 	sub.w	sp, sp, r3
 8000576:	466b      	mov	r3, sp
 8000578:	3300      	adds	r3, #0
 800057a:	613b      	str	r3, [r7, #16]

        for (uint32_t i = 0; i < buff_size; i++) {
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]
 8000580:	e017      	b.n	80005b2 <process_id_read+0xf2>
            // Send over dummy bytes to read id bytes
            SPI_SendData(spi_handle->pSPIx, &dummy_byte, 1);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2201      	movs	r2, #1
 8000588:	4910      	ldr	r1, [pc, #64]	@ (80005cc <process_id_read+0x10c>)
 800058a:	4618      	mov	r0, r3
 800058c:	f000 fc9e 	bl	8000ecc <SPI_SendData>
            uint8_t byte;
            SPI_ReceiveData(spi_handle->pSPIx, &byte, 1);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f107 010d 	add.w	r1, r7, #13
 8000598:	2201      	movs	r2, #1
 800059a:	4618      	mov	r0, r3
 800059c:	f000 fce6 	bl	8000f6c <SPI_ReceiveData>
            buffer[i] = byte;
 80005a0:	7b79      	ldrb	r1, [r7, #13]
 80005a2:	693a      	ldr	r2, [r7, #16]
 80005a4:	69fb      	ldr	r3, [r7, #28]
 80005a6:	4413      	add	r3, r2
 80005a8:	460a      	mov	r2, r1
 80005aa:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < buff_size; i++) {
 80005ac:	69fb      	ldr	r3, [r7, #28]
 80005ae:	3301      	adds	r3, #1
 80005b0:	61fb      	str	r3, [r7, #28]
 80005b2:	7efb      	ldrb	r3, [r7, #27]
 80005b4:	69fa      	ldr	r2, [r7, #28]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d3e3      	bcc.n	8000582 <process_id_read+0xc2>
 80005ba:	46b5      	mov	sp, r6
        }
    }
}
 80005bc:	bf00      	nop
 80005be:	3724      	adds	r7, #36	@ 0x24
 80005c0:	46bd      	mov	sp, r7
 80005c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80005c6:	bf00      	nop
 80005c8:	20000020 	.word	0x20000020
 80005cc:	20000000 	.word	0x20000000

080005d0 <spi_send>:

void spi_send() {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
    uint8_t active_cmd = CMD_ID_READ;
 80005d6:	2354      	movs	r3, #84	@ 0x54
 80005d8:	73fb      	strb	r3, [r7, #15]

    SPI_GPIO_Setup();
 80005da:	f7ff fe09 	bl	80001f0 <SPI_GPIO_Setup>

    SPI_Handle_t spi_handle = {
 80005de:	4a33      	ldr	r2, [pc, #204]	@ (80006ac <spi_send+0xdc>)
 80005e0:	463b      	mov	r3, r7
 80005e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80005e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            .SPI_CPHA = SPI_CPAH_LOW,
            .SPI_SSM = SPI_SSM_DI
        }
    };

    SPI_Init(&spi_handle);
 80005e8:	463b      	mov	r3, r7
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fb88 	bl	8000d00 <SPI_Init>

    SPI_SSOEConfig(spi_handle.pSPIx, ENABLE);
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	2101      	movs	r1, #1
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fd2e 	bl	8001056 <SPI_SSOEConfig>

    uint8_t is_down = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	73bb      	strb	r3, [r7, #14]

    while (1) {
        uint8_t button_state = GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_N2);
 80005fe:	2102      	movs	r1, #2
 8000600:	482b      	ldr	r0, [pc, #172]	@ (80006b0 <spi_send+0xe0>)
 8000602:	f000 fb0f 	bl	8000c24 <GPIO_ReadFromInputPin>
 8000606:	4603      	mov	r3, r0
 8000608:	737b      	strb	r3, [r7, #13]

        if (button_state == 0 && is_down == 0) {
 800060a:	7b7b      	ldrb	r3, [r7, #13]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d147      	bne.n	80006a0 <spi_send+0xd0>
 8000610:	7bbb      	ldrb	r3, [r7, #14]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d144      	bne.n	80006a0 <spi_send+0xd0>
            is_down = 1;
 8000616:	2301      	movs	r3, #1
 8000618:	73bb      	strb	r3, [r7, #14]
            delay(50000);
 800061a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800061e:	f7ff fdd1 	bl	80001c4 <delay>
            SPI_Enable(spi_handle.pSPIx, ENABLE);
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	2101      	movs	r1, #1
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fcdd 	bl	8000fe6 <SPI_Enable>

            switch (active_cmd) {
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	3b50      	subs	r3, #80	@ 0x50
 8000630:	2b04      	cmp	r3, #4
 8000632:	d82e      	bhi.n	8000692 <spi_send+0xc2>
 8000634:	a201      	add	r2, pc, #4	@ (adr r2, 800063c <spi_send+0x6c>)
 8000636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800063a:	bf00      	nop
 800063c:	08000651 	.word	0x08000651
 8000640:	0800065f 	.word	0x0800065f
 8000644:	0800066d 	.word	0x0800066d
 8000648:	0800067b 	.word	0x0800067b
 800064c:	08000685 	.word	0x08000685
                case 0x50:
                    process_led_toggle(&spi_handle);
 8000650:	463b      	mov	r3, r7
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff fe20 	bl	8000298 <process_led_toggle>
                    active_cmd = CMD_SENSOR_READ;
 8000658:	2351      	movs	r3, #81	@ 0x51
 800065a:	73fb      	strb	r3, [r7, #15]
                    break;
 800065c:	e01a      	b.n	8000694 <spi_send+0xc4>
                case 0x51:
                    process_sensor_read(&spi_handle);
 800065e:	463b      	mov	r3, r7
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff fe65 	bl	8000330 <process_sensor_read>
                    active_cmd = CMD_LED_READ;
 8000666:	2352      	movs	r3, #82	@ 0x52
 8000668:	73fb      	strb	r3, [r7, #15]
                    break;
 800066a:	e013      	b.n	8000694 <spi_send+0xc4>
                case 0x52:
                    process_led_read(&spi_handle);
 800066c:	463b      	mov	r3, r7
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff fec2 	bl	80003f8 <process_led_read>
                    active_cmd = CMD_ID_READ;
 8000674:	2354      	movs	r3, #84	@ 0x54
 8000676:	73fb      	strb	r3, [r7, #15]
                    break;
 8000678:	e00c      	b.n	8000694 <spi_send+0xc4>
                case 0x53:
                    process_print(&spi_handle);
 800067a:	463b      	mov	r3, r7
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ff15 	bl	80004ac <process_print>
                    break;
 8000682:	e007      	b.n	8000694 <spi_send+0xc4>
                case 0x54:
                    process_id_read(&spi_handle);
 8000684:	463b      	mov	r3, r7
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff ff1a 	bl	80004c0 <process_id_read>
                    active_cmd = CMD_LED_CTRL;
 800068c:	2350      	movs	r3, #80	@ 0x50
 800068e:	73fb      	strb	r3, [r7, #15]
                    break;
 8000690:	e000      	b.n	8000694 <spi_send+0xc4>
                default:
                    break;
 8000692:	bf00      	nop
            }

            SPI_Enable(spi_handle.pSPIx, DISABLE);
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fca4 	bl	8000fe6 <SPI_Enable>
 800069e:	e004      	b.n	80006aa <spi_send+0xda>
        } else if (button_state == 1) {
 80006a0:	7b7b      	ldrb	r3, [r7, #13]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d1ab      	bne.n	80005fe <spi_send+0x2e>
            is_down = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	73bb      	strb	r3, [r7, #14]
    while (1) {
 80006aa:	e7a8      	b.n	80005fe <spi_send+0x2e>
 80006ac:	080010fc 	.word	0x080010fc
 80006b0:	48000800 	.word	0x48000800

080006b4 <main>:
        }
    }
}

int main(void) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
    spi_send();
 80006b8:	f7ff ff8a 	bl	80005d0 <spi_send>
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006c4:	480d      	ldr	r0, [pc, #52]	@ (80006fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006cc:	480c      	ldr	r0, [pc, #48]	@ (8000700 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ce:	490d      	ldr	r1, [pc, #52]	@ (8000704 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000708 <LoopForever+0xe>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d4:	e002      	b.n	80006dc <LoopCopyDataInit>

080006d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006da:	3304      	adds	r3, #4

080006dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e0:	d3f9      	bcc.n	80006d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e2:	4a0a      	ldr	r2, [pc, #40]	@ (800070c <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000710 <LoopForever+0x16>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e8:	e001      	b.n	80006ee <LoopFillZerobss>

080006ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ec:	3204      	adds	r2, #4

080006ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f0:	d3fb      	bcc.n	80006ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006f2:	f000 fccd 	bl	8001090 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006f6:	f7ff ffdd 	bl	80006b4 <main>

080006fa <LoopForever>:

LoopForever:
  b LoopForever
 80006fa:	e7fe      	b.n	80006fa <LoopForever>
  ldr   r0, =_estack
 80006fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000704:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000708:	08001110 	.word	0x08001110
  ldr r2, =_sbss
 800070c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000710:	20000024 	.word	0x20000024

08000714 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000714:	e7fe      	b.n	8000714 <ADC1_2_IRQHandler>
	...

08000718 <GPIO_PCLK>:
#include "stm32l476xx_gpio_driver.h"

void GPIO_PCLK(GPIO_RegDef_t *pGPIOx, uint8_t isEnable) {
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	70fb      	strb	r3, [r7, #3]
	if (isEnable == ENABLE) {
 8000724:	78fb      	ldrb	r3, [r7, #3]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d157      	bne.n	80007da <GPIO_PCLK+0xc2>
		if (pGPIOx == GPIOA) {
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000730:	d106      	bne.n	8000740 <GPIO_PCLK+0x28>
			GPIOA_PCLK_EN();
 8000732:	4b58      	ldr	r3, [pc, #352]	@ (8000894 <GPIO_PCLK+0x17c>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	4a57      	ldr	r2, [pc, #348]	@ (8000894 <GPIO_PCLK+0x17c>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	64d3      	str	r3, [r2, #76]	@ 0x4c
			GPIOG_PCLK_DI();
		} else if (pGPIOx == GPIOH) {
			GPIOH_PCLK_DI();
		}
	}
}
 800073e:	e0a3      	b.n	8000888 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOB) {
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4a55      	ldr	r2, [pc, #340]	@ (8000898 <GPIO_PCLK+0x180>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d106      	bne.n	8000756 <GPIO_PCLK+0x3e>
			GPIOB_PCLK_EN();
 8000748:	4b52      	ldr	r3, [pc, #328]	@ (8000894 <GPIO_PCLK+0x17c>)
 800074a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074c:	4a51      	ldr	r2, [pc, #324]	@ (8000894 <GPIO_PCLK+0x17c>)
 800074e:	f043 0302 	orr.w	r3, r3, #2
 8000752:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000754:	e098      	b.n	8000888 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOC) {
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a50      	ldr	r2, [pc, #320]	@ (800089c <GPIO_PCLK+0x184>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d106      	bne.n	800076c <GPIO_PCLK+0x54>
			GPIOC_PCLK_EN();
 800075e:	4b4d      	ldr	r3, [pc, #308]	@ (8000894 <GPIO_PCLK+0x17c>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	4a4c      	ldr	r2, [pc, #304]	@ (8000894 <GPIO_PCLK+0x17c>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800076a:	e08d      	b.n	8000888 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOD) {
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4a4c      	ldr	r2, [pc, #304]	@ (80008a0 <GPIO_PCLK+0x188>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d106      	bne.n	8000782 <GPIO_PCLK+0x6a>
			GPIOD_PCLK_EN();
 8000774:	4b47      	ldr	r3, [pc, #284]	@ (8000894 <GPIO_PCLK+0x17c>)
 8000776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000778:	4a46      	ldr	r2, [pc, #280]	@ (8000894 <GPIO_PCLK+0x17c>)
 800077a:	f043 0308 	orr.w	r3, r3, #8
 800077e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000780:	e082      	b.n	8000888 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOE) {
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a47      	ldr	r2, [pc, #284]	@ (80008a4 <GPIO_PCLK+0x18c>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d106      	bne.n	8000798 <GPIO_PCLK+0x80>
			GPIOE_PCLK_EN();
 800078a:	4b42      	ldr	r3, [pc, #264]	@ (8000894 <GPIO_PCLK+0x17c>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078e:	4a41      	ldr	r2, [pc, #260]	@ (8000894 <GPIO_PCLK+0x17c>)
 8000790:	f043 0310 	orr.w	r3, r3, #16
 8000794:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000796:	e077      	b.n	8000888 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOF) {
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4a43      	ldr	r2, [pc, #268]	@ (80008a8 <GPIO_PCLK+0x190>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d106      	bne.n	80007ae <GPIO_PCLK+0x96>
			GPIOF_PCLK_EN();
 80007a0:	4b3c      	ldr	r3, [pc, #240]	@ (8000894 <GPIO_PCLK+0x17c>)
 80007a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a4:	4a3b      	ldr	r2, [pc, #236]	@ (8000894 <GPIO_PCLK+0x17c>)
 80007a6:	f043 0320 	orr.w	r3, r3, #32
 80007aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80007ac:	e06c      	b.n	8000888 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOG) {
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4a3e      	ldr	r2, [pc, #248]	@ (80008ac <GPIO_PCLK+0x194>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d106      	bne.n	80007c4 <GPIO_PCLK+0xac>
			GPIOG_PCLK_EN();
 80007b6:	4b37      	ldr	r3, [pc, #220]	@ (8000894 <GPIO_PCLK+0x17c>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ba:	4a36      	ldr	r2, [pc, #216]	@ (8000894 <GPIO_PCLK+0x17c>)
 80007bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80007c2:	e061      	b.n	8000888 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOH) {
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a3a      	ldr	r2, [pc, #232]	@ (80008b0 <GPIO_PCLK+0x198>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d15d      	bne.n	8000888 <GPIO_PCLK+0x170>
			GPIOH_PCLK_EN();
 80007cc:	4b31      	ldr	r3, [pc, #196]	@ (8000894 <GPIO_PCLK+0x17c>)
 80007ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d0:	4a30      	ldr	r2, [pc, #192]	@ (8000894 <GPIO_PCLK+0x17c>)
 80007d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80007d8:	e056      	b.n	8000888 <GPIO_PCLK+0x170>
		if (pGPIOx == GPIOA) {
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80007e0:	d106      	bne.n	80007f0 <GPIO_PCLK+0xd8>
			GPIOA_PCLK_DI();
 80007e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000894 <GPIO_PCLK+0x17c>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e6:	4a2b      	ldr	r2, [pc, #172]	@ (8000894 <GPIO_PCLK+0x17c>)
 80007e8:	f023 0301 	bic.w	r3, r3, #1
 80007ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80007ee:	e04b      	b.n	8000888 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOB) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4a29      	ldr	r2, [pc, #164]	@ (8000898 <GPIO_PCLK+0x180>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d106      	bne.n	8000806 <GPIO_PCLK+0xee>
			GPIOB_PCLK_DI();
 80007f8:	4b26      	ldr	r3, [pc, #152]	@ (8000894 <GPIO_PCLK+0x17c>)
 80007fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fc:	4a25      	ldr	r2, [pc, #148]	@ (8000894 <GPIO_PCLK+0x17c>)
 80007fe:	f023 0302 	bic.w	r3, r3, #2
 8000802:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000804:	e040      	b.n	8000888 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOC) {
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a24      	ldr	r2, [pc, #144]	@ (800089c <GPIO_PCLK+0x184>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d106      	bne.n	800081c <GPIO_PCLK+0x104>
			GPIOC_PCLK_DI();
 800080e:	4b21      	ldr	r3, [pc, #132]	@ (8000894 <GPIO_PCLK+0x17c>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000812:	4a20      	ldr	r2, [pc, #128]	@ (8000894 <GPIO_PCLK+0x17c>)
 8000814:	f023 0304 	bic.w	r3, r3, #4
 8000818:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800081a:	e035      	b.n	8000888 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOD) {
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4a20      	ldr	r2, [pc, #128]	@ (80008a0 <GPIO_PCLK+0x188>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d106      	bne.n	8000832 <GPIO_PCLK+0x11a>
			GPIOD_PCLK_DI();
 8000824:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <GPIO_PCLK+0x17c>)
 8000826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000828:	4a1a      	ldr	r2, [pc, #104]	@ (8000894 <GPIO_PCLK+0x17c>)
 800082a:	f023 0308 	bic.w	r3, r3, #8
 800082e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000830:	e02a      	b.n	8000888 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOE) {
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a1b      	ldr	r2, [pc, #108]	@ (80008a4 <GPIO_PCLK+0x18c>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d106      	bne.n	8000848 <GPIO_PCLK+0x130>
			GPIOE_PCLK_DI();
 800083a:	4b16      	ldr	r3, [pc, #88]	@ (8000894 <GPIO_PCLK+0x17c>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	4a15      	ldr	r2, [pc, #84]	@ (8000894 <GPIO_PCLK+0x17c>)
 8000840:	f023 0310 	bic.w	r3, r3, #16
 8000844:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000846:	e01f      	b.n	8000888 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOF) {
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4a17      	ldr	r2, [pc, #92]	@ (80008a8 <GPIO_PCLK+0x190>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d106      	bne.n	800085e <GPIO_PCLK+0x146>
			GPIOF_PCLK_DI();
 8000850:	4b10      	ldr	r3, [pc, #64]	@ (8000894 <GPIO_PCLK+0x17c>)
 8000852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000854:	4a0f      	ldr	r2, [pc, #60]	@ (8000894 <GPIO_PCLK+0x17c>)
 8000856:	f023 0320 	bic.w	r3, r3, #32
 800085a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800085c:	e014      	b.n	8000888 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOG) {
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a12      	ldr	r2, [pc, #72]	@ (80008ac <GPIO_PCLK+0x194>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d106      	bne.n	8000874 <GPIO_PCLK+0x15c>
			GPIOG_PCLK_DI();
 8000866:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <GPIO_PCLK+0x17c>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086a:	4a0a      	ldr	r2, [pc, #40]	@ (8000894 <GPIO_PCLK+0x17c>)
 800086c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000870:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000872:	e009      	b.n	8000888 <GPIO_PCLK+0x170>
		} else if (pGPIOx == GPIOH) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a0e      	ldr	r2, [pc, #56]	@ (80008b0 <GPIO_PCLK+0x198>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d105      	bne.n	8000888 <GPIO_PCLK+0x170>
			GPIOH_PCLK_DI();
 800087c:	4b05      	ldr	r3, [pc, #20]	@ (8000894 <GPIO_PCLK+0x17c>)
 800087e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000880:	4a04      	ldr	r2, [pc, #16]	@ (8000894 <GPIO_PCLK+0x17c>)
 8000882:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000886:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	40021000 	.word	0x40021000
 8000898:	48000400 	.word	0x48000400
 800089c:	48000800 	.word	0x48000800
 80008a0:	48000c00 	.word	0x48000c00
 80008a4:	48001000 	.word	0x48001000
 80008a8:	48001400 	.word	0x48001400
 80008ac:	48001800 	.word	0x48001800
 80008b0:	48001c00 	.word	0x48001c00

080008b4 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80008b4:	b480      	push	{r7}
 80008b6:	b091      	sub	sp, #68	@ 0x44
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	// Configure mode
	GPIO_PinConfig_t pinConfig = pGPIOHandle->GPIO_PinConfig;
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	3204      	adds	r2, #4
 80008c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008c8:	6018      	str	r0, [r3, #0]
 80008ca:	3304      	adds	r3, #4
 80008cc:	8019      	strh	r1, [r3, #0]
	uint32_t mode = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	63fb      	str	r3, [r7, #60]	@ 0x3c

	uint8_t pin_mode = pinConfig.GPIO_PinMode;
 80008d2:	7b7b      	ldrb	r3, [r7, #13]
 80008d4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t pin_number = pinConfig.GPIO_PinNumber;
 80008d8:	7b3b      	ldrb	r3, [r7, #12]
 80008da:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	// non IT
	if (pin_mode <= GPIO_MODE_ANALOG) {
 80008de:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80008e2:	2b03      	cmp	r3, #3
 80008e4:	d81d      	bhi.n	8000922 <GPIO_Init+0x6e>
		// Mode takes 2 bits, all go consecutively so we can do 2 * pin number
		mode = pinConfig.GPIO_PinMode << (2 * pinConfig.GPIO_PinNumber);
 80008e6:	7b7b      	ldrb	r3, [r7, #13]
 80008e8:	461a      	mov	r2, r3
 80008ea:	7b3b      	ldrb	r3, [r7, #12]
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	63fb      	str	r3, [r7, #60]	@ 0x3c

		// Must clear before set!
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	7b3b      	ldrb	r3, [r7, #12]
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	2103      	movs	r1, #3
 8000900:	fa01 f303 	lsl.w	r3, r1, r3
 8000904:	43db      	mvns	r3, r3
 8000906:	4619      	mov	r1, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	400a      	ands	r2, r1
 800090e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= mode;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	6819      	ldr	r1, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800091c:	430a      	orrs	r2, r1
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	e0e6      	b.n	8000af0 <GPIO_Init+0x23c>
	} else {
	    // On reset mode will be analog, mode cant be analog for IT to work
        pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	7b3b      	ldrb	r3, [r7, #12]
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	2103      	movs	r1, #3
 800092e:	fa01 f303 	lsl.w	r3, r1, r3
 8000932:	43db      	mvns	r3, r3
 8000934:	4619      	mov	r1, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	400a      	ands	r2, r1
 800093c:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= GPIO_MODE_INPUT;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	6812      	ldr	r2, [r2, #0]
 8000948:	601a      	str	r2, [r3, #0]
	    // PA1, PB1 etc are connected to EXTI1
	    // ...
	    // PA15, PB15 are connected to EXTI15
	    // Lines 0-15 are for GPIO's

	    volatile uint32_t *FTSR = &EXTI->FTSR1;
 800094a:	4baa      	ldr	r3, [pc, #680]	@ (8000bf4 <GPIO_Init+0x340>)
 800094c:	637b      	str	r3, [r7, #52]	@ 0x34
	    volatile uint32_t *RTSR = &EXTI->RTSR1;
 800094e:	4baa      	ldr	r3, [pc, #680]	@ (8000bf8 <GPIO_Init+0x344>)
 8000950:	633b      	str	r3, [r7, #48]	@ 0x30
	    volatile uint32_t *IMR = &EXTI->IMR1;
 8000952:	4baa      	ldr	r3, [pc, #680]	@ (8000bfc <GPIO_Init+0x348>)
 8000954:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    // GPIO => EXTI(Edge detection, interupt delivery) => NVIC(Enable and configure IRQ) => CPU
	    // IRQ - interupt request
	    // NVIC - nested vectored interupt controler
        if (pin_mode == GPIO_MODE_IR_FT) {
 8000956:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800095a:	2b04      	cmp	r3, #4
 800095c:	d115      	bne.n	800098a <GPIO_Init+0xd6>
            // Configure falling edge control register (FTSR)
            *FTSR |= (1 << pin_number);
 800095e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000966:	2101      	movs	r1, #1
 8000968:	fa01 f202 	lsl.w	r2, r1, r2
 800096c:	431a      	orrs	r2, r3
 800096e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000970:	601a      	str	r2, [r3, #0]
            *RTSR &= ~(1 << pin_number); // Reset RTSR just in case
 8000972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800097a:	2101      	movs	r1, #1
 800097c:	fa01 f202 	lsl.w	r2, r1, r2
 8000980:	43d2      	mvns	r2, r2
 8000982:	401a      	ands	r2, r3
 8000984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	e031      	b.n	80009ee <GPIO_Init+0x13a>
        } else if (pin_mode == GPIO_MODE_IR_RT) {
 800098a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800098e:	2b05      	cmp	r3, #5
 8000990:	d115      	bne.n	80009be <GPIO_Init+0x10a>
            // Configure rising edge control register (RTSR)
            *RTSR |= (1 << pin_number);
 8000992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800099a:	2101      	movs	r1, #1
 800099c:	fa01 f202 	lsl.w	r2, r1, r2
 80009a0:	431a      	orrs	r2, r3
 80009a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009a4:	601a      	str	r2, [r3, #0]
            *FTSR &= ~(1 << pin_number); // Reset FTSR just in case
 80009a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 80009ae:	2101      	movs	r1, #1
 80009b0:	fa01 f202 	lsl.w	r2, r1, r2
 80009b4:	43d2      	mvns	r2, r2
 80009b6:	401a      	ands	r2, r3
 80009b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	e017      	b.n	80009ee <GPIO_Init+0x13a>
        } else if (pin_mode == GPIO_MODE_IR_RFT) {
 80009be:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80009c2:	2b06      	cmp	r3, #6
 80009c4:	d113      	bne.n	80009ee <GPIO_Init+0x13a>
            // Configure both registers
            *RTSR |= (1 << pin_number);
 80009c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 80009ce:	2101      	movs	r1, #1
 80009d0:	fa01 f202 	lsl.w	r2, r1, r2
 80009d4:	431a      	orrs	r2, r3
 80009d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009d8:	601a      	str	r2, [r3, #0]
            *FTSR |= (1 << pin_number);
 80009da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 80009e2:	2101      	movs	r1, #1
 80009e4:	fa01 f202 	lsl.w	r2, r1, r2
 80009e8:	431a      	orrs	r2, r3
 80009ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009ec:	601a      	str	r2, [r3, #0]
        }

        // Configure GPIO port in SYSCFG_EXTIR
        uint8_t index = pin_number / 4;
 80009ee:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80009f2:	089b      	lsrs	r3, r3, #2
 80009f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        uint8_t offset = pin_number % 4;
 80009f8:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80009fc:	f003 0303 	and.w	r3, r3, #3
 8000a00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

        uint8_t portcode = GPIO_ADR_TO_CODE(pGPIOHandle->pGPIOx);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a0c:	d032      	beq.n	8000a74 <GPIO_Init+0x1c0>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a7b      	ldr	r2, [pc, #492]	@ (8000c00 <GPIO_Init+0x34c>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d02b      	beq.n	8000a70 <GPIO_Init+0x1bc>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a79      	ldr	r2, [pc, #484]	@ (8000c04 <GPIO_Init+0x350>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d024      	beq.n	8000a6c <GPIO_Init+0x1b8>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a78      	ldr	r2, [pc, #480]	@ (8000c08 <GPIO_Init+0x354>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d01d      	beq.n	8000a68 <GPIO_Init+0x1b4>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a76      	ldr	r2, [pc, #472]	@ (8000c0c <GPIO_Init+0x358>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d016      	beq.n	8000a64 <GPIO_Init+0x1b0>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a75      	ldr	r2, [pc, #468]	@ (8000c10 <GPIO_Init+0x35c>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d00f      	beq.n	8000a60 <GPIO_Init+0x1ac>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a73      	ldr	r2, [pc, #460]	@ (8000c14 <GPIO_Init+0x360>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d008      	beq.n	8000a5c <GPIO_Init+0x1a8>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a72      	ldr	r2, [pc, #456]	@ (8000c18 <GPIO_Init+0x364>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d101      	bne.n	8000a58 <GPIO_Init+0x1a4>
 8000a54:	2307      	movs	r3, #7
 8000a56:	e00e      	b.n	8000a76 <GPIO_Init+0x1c2>
 8000a58:	2300      	movs	r3, #0
 8000a5a:	e00c      	b.n	8000a76 <GPIO_Init+0x1c2>
 8000a5c:	2306      	movs	r3, #6
 8000a5e:	e00a      	b.n	8000a76 <GPIO_Init+0x1c2>
 8000a60:	2305      	movs	r3, #5
 8000a62:	e008      	b.n	8000a76 <GPIO_Init+0x1c2>
 8000a64:	2304      	movs	r3, #4
 8000a66:	e006      	b.n	8000a76 <GPIO_Init+0x1c2>
 8000a68:	2303      	movs	r3, #3
 8000a6a:	e004      	b.n	8000a76 <GPIO_Init+0x1c2>
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	e002      	b.n	8000a76 <GPIO_Init+0x1c2>
 8000a70:	2301      	movs	r3, #1
 8000a72:	e000      	b.n	8000a76 <GPIO_Init+0x1c2>
 8000a74:	2300      	movs	r3, #0
 8000a76:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

        SYSCFG_PCLK_EN();
 8000a7a:	4b68      	ldr	r3, [pc, #416]	@ (8000c1c <GPIO_Init+0x368>)
 8000a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a7e:	4a67      	ldr	r2, [pc, #412]	@ (8000c1c <GPIO_Init+0x368>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6613      	str	r3, [r2, #96]	@ 0x60
        SYSCFG->EXTICR[index] &= ~(portcode << (offset * 4));
 8000a86:	4a66      	ldr	r2, [pc, #408]	@ (8000c20 <GPIO_Init+0x36c>)
 8000a88:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000a8c:	3302      	adds	r3, #2
 8000a8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a92:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8000a96:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	495e      	ldr	r1, [pc, #376]	@ (8000c20 <GPIO_Init+0x36c>)
 8000aa6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000aaa:	4002      	ands	r2, r0
 8000aac:	3302      	adds	r3, #2
 8000aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        SYSCFG->EXTICR[index] |= portcode << (offset * 4);
 8000ab2:	4a5b      	ldr	r2, [pc, #364]	@ (8000c20 <GPIO_Init+0x36c>)
 8000ab4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000ab8:	3302      	adds	r3, #2
 8000aba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000abe:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8000ac2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8000acc:	4618      	mov	r0, r3
 8000ace:	4954      	ldr	r1, [pc, #336]	@ (8000c20 <GPIO_Init+0x36c>)
 8000ad0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000ad4:	4302      	orrs	r2, r0
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Enable EXTI interupt delivery using IMR (Interupt mask register)
        *IMR |= (1 << pin_number);
 8000adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aea:	431a      	orrs	r2, r3
 8000aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000aee:	601a      	str	r2, [r3, #0]
	}
	// Configure speed
	uint32_t speed = pinConfig.GPIO_PinSpeed << (2 * pinConfig.GPIO_PinNumber);
 8000af0:	7bbb      	ldrb	r3, [r7, #14]
 8000af2:	461a      	mov	r2, r3
 8000af4:	7b3b      	ldrb	r3, [r7, #12]
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	fa02 f303 	lsl.w	r3, r2, r3
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	689a      	ldr	r2, [r3, #8]
 8000b04:	7b3b      	ldrb	r3, [r7, #12]
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	2103      	movs	r1, #3
 8000b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	4619      	mov	r1, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	400a      	ands	r2, r1
 8000b18:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= speed;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	6899      	ldr	r1, [r3, #8]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b26:	430a      	orrs	r2, r1
 8000b28:	609a      	str	r2, [r3, #8]

	// Configure pull up/down
	uint32_t pull = pinConfig.GPIO_PinPuPdControl << (2 * pinConfig.GPIO_PinNumber);
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	7b3b      	ldrb	r3, [r7, #12]
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	623b      	str	r3, [r7, #32]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	68da      	ldr	r2, [r3, #12]
 8000b3e:	7b3b      	ldrb	r3, [r7, #12]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	2103      	movs	r1, #3
 8000b44:	fa01 f303 	lsl.w	r3, r1, r3
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	400a      	ands	r2, r1
 8000b52:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= pull;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	68d9      	ldr	r1, [r3, #12]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	6a3a      	ldr	r2, [r7, #32]
 8000b60:	430a      	orrs	r2, r1
 8000b62:	60da      	str	r2, [r3, #12]

	// Configure otype, output type
	uint32_t o_type = pinConfig.GPIO_PinOPType << pinConfig.GPIO_PinNumber;
 8000b64:	7c3b      	ldrb	r3, [r7, #16]
 8000b66:	461a      	mov	r2, r3
 8000b68:	7b3b      	ldrb	r3, [r7, #12]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIOx->OTYPER |= o_type;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	6859      	ldr	r1, [r3, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	69fa      	ldr	r2, [r7, #28]
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	605a      	str	r2, [r3, #4]

	// Configure alt function
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	795b      	ldrb	r3, [r3, #5]
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d12f      	bne.n	8000be8 <GPIO_Init+0x334>

		uint32_t index = pinConfig.GPIO_PinNumber / 8;
 8000b88:	7b3b      	ldrb	r3, [r7, #12]
 8000b8a:	08db      	lsrs	r3, r3, #3
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	61bb      	str	r3, [r7, #24]
		uint32_t offset = pinConfig.GPIO_PinNumber % 8;
 8000b90:	7b3b      	ldrb	r3, [r7, #12]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	617b      	str	r3, [r7, #20]

		pGPIOHandle->pGPIOx->AFR[index] &= ~(0xF << (4 * offset));
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	3208      	adds	r2, #8
 8000ba0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	210f      	movs	r1, #15
 8000baa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4011      	ands	r1, r2
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	3208      	adds	r2, #8
 8000bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[index] |= pinConfig.GPIO_PinAltFunMode << (4 * offset);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	3208      	adds	r2, #8
 8000bc8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bcc:	7c7b      	ldrb	r3, [r7, #17]
 8000bce:	4619      	mov	r1, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd8:	4619      	mov	r1, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4311      	orrs	r1, r2
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	3208      	adds	r2, #8
 8000be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000be8:	bf00      	nop
 8000bea:	3744      	adds	r7, #68	@ 0x44
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	4001040c 	.word	0x4001040c
 8000bf8:	40010408 	.word	0x40010408
 8000bfc:	40010400 	.word	0x40010400
 8000c00:	48000400 	.word	0x48000400
 8000c04:	48000800 	.word	0x48000800
 8000c08:	48000c00 	.word	0x48000c00
 8000c0c:	48001000 	.word	0x48001000
 8000c10:	48001400 	.word	0x48001400
 8000c14:	48001800 	.word	0x48001800
 8000c18:	48001c00 	.word	0x48001c00
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40010000 	.word	0x40010000

08000c24 <GPIO_ReadFromInputPin>:
	} else if (pGPIOx == GPIOH) {
		GPIOH_REG_RESET();
	}
}

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber) {
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	70fb      	strb	r3, [r7, #3]
	return (uint8_t) (pGPIOx->IDR >> pinNumber) & 0x00000001;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	691a      	ldr	r2, [r3, #16]
 8000c34:	78fb      	ldrb	r3, [r7, #3]
 8000c36:	fa22 f303 	lsr.w	r3, r2, r3
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	b2db      	uxtb	r3, r3
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <SPI_PCLK>:
#include "stm32l476xx_spi_driver.h"

void SPI_PCLK(SPI_RegDef_t *pSPIx, uint8_t isEnable) {
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	70fb      	strb	r3, [r7, #3]
    if (isEnable == ENABLE) {
 8000c5c:	78fb      	ldrb	r3, [r7, #3]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d120      	bne.n	8000ca4 <SPI_PCLK+0x54>
        if (pSPIx == SPI1) {
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a22      	ldr	r2, [pc, #136]	@ (8000cf0 <SPI_PCLK+0xa0>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d106      	bne.n	8000c78 <SPI_PCLK+0x28>
            SPI1_PCLK_EN();
 8000c6a:	4b22      	ldr	r3, [pc, #136]	@ (8000cf4 <SPI_PCLK+0xa4>)
 8000c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c6e:	4a21      	ldr	r2, [pc, #132]	@ (8000cf4 <SPI_PCLK+0xa4>)
 8000c70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c74:	6613      	str	r3, [r2, #96]	@ 0x60
            SPI2_PCLK_DI();
        } else if (pSPIx == SPI3) {
            SPI3_PCLK_DI();
        }
    }
}
 8000c76:	e035      	b.n	8000ce4 <SPI_PCLK+0x94>
        } else if (pSPIx == SPI2) {
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a1f      	ldr	r2, [pc, #124]	@ (8000cf8 <SPI_PCLK+0xa8>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d106      	bne.n	8000c8e <SPI_PCLK+0x3e>
            SPI2_PCLK_EN();
 8000c80:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf4 <SPI_PCLK+0xa4>)
 8000c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c84:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf4 <SPI_PCLK+0xa4>)
 8000c86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c8a:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000c8c:	e02a      	b.n	8000ce4 <SPI_PCLK+0x94>
        } else if (pSPIx == SPI3) {
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a1a      	ldr	r2, [pc, #104]	@ (8000cfc <SPI_PCLK+0xac>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d126      	bne.n	8000ce4 <SPI_PCLK+0x94>
            SPI3_PCLK_EN();
 8000c96:	4b17      	ldr	r3, [pc, #92]	@ (8000cf4 <SPI_PCLK+0xa4>)
 8000c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c9a:	4a16      	ldr	r2, [pc, #88]	@ (8000cf4 <SPI_PCLK+0xa4>)
 8000c9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ca0:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000ca2:	e01f      	b.n	8000ce4 <SPI_PCLK+0x94>
        if (pSPIx == SPI1) {
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a12      	ldr	r2, [pc, #72]	@ (8000cf0 <SPI_PCLK+0xa0>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d106      	bne.n	8000cba <SPI_PCLK+0x6a>
            SPI1_PCLK_DI();
 8000cac:	4b11      	ldr	r3, [pc, #68]	@ (8000cf4 <SPI_PCLK+0xa4>)
 8000cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cb0:	4a10      	ldr	r2, [pc, #64]	@ (8000cf4 <SPI_PCLK+0xa4>)
 8000cb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000cb6:	6613      	str	r3, [r2, #96]	@ 0x60
}
 8000cb8:	e014      	b.n	8000ce4 <SPI_PCLK+0x94>
        } else if (pSPIx == SPI2) {
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf8 <SPI_PCLK+0xa8>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d106      	bne.n	8000cd0 <SPI_PCLK+0x80>
            SPI2_PCLK_DI();
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <SPI_PCLK+0xa4>)
 8000cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc6:	4a0b      	ldr	r2, [pc, #44]	@ (8000cf4 <SPI_PCLK+0xa4>)
 8000cc8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000ccc:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000cce:	e009      	b.n	8000ce4 <SPI_PCLK+0x94>
        } else if (pSPIx == SPI3) {
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cfc <SPI_PCLK+0xac>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d105      	bne.n	8000ce4 <SPI_PCLK+0x94>
            SPI3_PCLK_DI();
 8000cd8:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <SPI_PCLK+0xa4>)
 8000cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cdc:	4a05      	ldr	r2, [pc, #20]	@ (8000cf4 <SPI_PCLK+0xa4>)
 8000cde:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000ce2:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	40013000 	.word	0x40013000
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	40003800 	.word	0x40003800
 8000cfc:	40003c00 	.word	0x40003c00

08000d00 <SPI_Init>:

void SPI_Init(SPI_Handle_t *pSPIHandle) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
    SPI_PCLK(pSPIHandle->pSPIx, ENABLE);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ff9e 	bl	8000c50 <SPI_PCLK>

    SPI_Config_t *config = &pSPIHandle->SPIConfig;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3304      	adds	r3, #4
 8000d18:	60fb      	str	r3, [r7, #12]

    // Device mode
    if (config->SPI_DeviceMode == SPI_DEVICE_MODE_MASTER) {
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d108      	bne.n	8000d34 <SPI_Init+0x34>
        pSPIHandle->pSPIx->CR1 |= 0x1 << SPI_CR1_MSTR;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f042 0204 	orr.w	r2, r2, #4
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	e007      	b.n	8000d44 <SPI_Init+0x44>
    } else {
        pSPIHandle->pSPIx->CR1 &= ~(0x1 << SPI_CR1_MSTR);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f022 0204 	bic.w	r2, r2, #4
 8000d42:	601a      	str	r2, [r3, #0]
    }

    // Bus config
    if (config->SPI_BusConfig == SPI_BUS_CONFIG_FD) {
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	785b      	ldrb	r3, [r3, #1]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d110      	bne.n	8000d6e <SPI_Init+0x6e>
        // 2-line unidirectional
        pSPIHandle->pSPIx->CR1 &= ~(1 << SPI_CR1_BIDIMODE);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000d5a:	601a      	str	r2, [r3, #0]

        // Must be cleared in uni 2 line
        pSPIHandle->pSPIx->CR1 &= ~(1 << SPI_CR1_RXONLY);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	e020      	b.n	8000db0 <SPI_Init+0xb0>

    } else if (config->SPI_BusConfig == SPI_BUS_CONFIG_HD) {
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	785b      	ldrb	r3, [r3, #1]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d108      	bne.n	8000d88 <SPI_Init+0x88>
        pSPIHandle->pSPIx->CR1 |= 1 << SPI_CR1_BIDIMODE;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	e013      	b.n	8000db0 <SPI_Init+0xb0>
    } else if (config->SPI_BusConfig == SPI_BUS_CONFIG_S_RXONLY) {
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	785b      	ldrb	r3, [r3, #1]
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	d10f      	bne.n	8000db0 <SPI_Init+0xb0>
        // 2-line unidirectional, tho we use but one line
        pSPIHandle->pSPIx->CR1 &= ~(1 << SPI_CR1_BIDIMODE);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000d9e:	601a      	str	r2, [r3, #0]

        // Must be cleared in uni 2 line
        pSPIHandle->pSPIx->CR1 &= ~(1 << SPI_CR1_RXONLY);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000dae:	601a      	str	r2, [r3, #0]
    }

    // Clock speed
    pSPIHandle->pSPIx->CR1 &= ~(0x7 << SPI_CR1_BR);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8000dbe:	601a      	str	r2, [r3, #0]
    pSPIHandle->pSPIx->CR1 |= config->SPI_SclkSpeed << SPI_CR1_BR;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	6819      	ldr	r1, [r3, #0]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	789b      	ldrb	r3, [r3, #2]
 8000dca:	00da      	lsls	r2, r3, #3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	601a      	str	r2, [r3, #0]

    // DFF
    pSPIHandle->pSPIx->CR2 &= ~(0xF << SPI_CR2_DS);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 8000de2:	605a      	str	r2, [r3, #4]

    if(config->SPI_DFF == SPI_DFF_8BITS) {
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	78db      	ldrb	r3, [r3, #3]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d110      	bne.n	8000e0e <SPI_Init+0x10e>
        pSPIHandle->pSPIx->CR2 |= 0x7 << SPI_CR2_DS;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8000dfa:	605a      	str	r2, [r3, #4]

        // FRXTH, RXNE event on 8 >= bits
        pSPIHandle->pSPIx->CR2 |= 1 << SPI_CR2_FRXTH;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	e00f      	b.n	8000e2e <SPI_Init+0x12e>
    } else {
        pSPIHandle->pSPIx->CR2 |= 0xF << SPI_CR2_DS;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	685a      	ldr	r2, [r3, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f442 6270 	orr.w	r2, r2, #3840	@ 0xf00
 8000e1c:	605a      	str	r2, [r3, #4]

        // FRXTH, RXNE event on 16 >= bits
        pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_FRXTH);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	685a      	ldr	r2, [r3, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000e2c:	605a      	str	r2, [r3, #4]
    }

    // CPOL
    if (config->SPI_CPOL == SPI_CPOL_HIGH) {
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	791b      	ldrb	r3, [r3, #4]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d108      	bne.n	8000e48 <SPI_Init+0x148>
        pSPIHandle->pSPIx->CR1 |= 1 << SPI_CR1_CPOL;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f042 0202 	orr.w	r2, r2, #2
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	e007      	b.n	8000e58 <SPI_Init+0x158>
    } else {
        pSPIHandle->pSPIx->CR1 &= ~(1 << SPI_CR1_CPOL);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f022 0202 	bic.w	r2, r2, #2
 8000e56:	601a      	str	r2, [r3, #0]
    }

    // CPHA
    if (config->SPI_CPHA == SPI_CPAH_HIGH) {
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	795b      	ldrb	r3, [r3, #5]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d108      	bne.n	8000e72 <SPI_Init+0x172>
        pSPIHandle->pSPIx->CR1 |= 1 << SPI_CR1_CPHA;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f042 0201 	orr.w	r2, r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	e007      	b.n	8000e82 <SPI_Init+0x182>
    } else {
        pSPIHandle->pSPIx->CR1 &= ~(1 << SPI_CR1_CPHA);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f022 0201 	bic.w	r2, r2, #1
 8000e80:	601a      	str	r2, [r3, #0]
    }

    // SSM
    if (config->SPI_SSM == SPI_SSM_EN) {
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	799b      	ldrb	r3, [r3, #6]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d10e      	bne.n	8000ea8 <SPI_Init+0x1a8>
        pSPIHandle->pSPIx->CR1 |= 1 << SPI_CR1_SSM;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000e98:	601a      	str	r2, [r3, #0]

        SPI_SSIConfig(pSPIHandle->pSPIx, ENABLE);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 f8bc 	bl	800101e <SPI_SSIConfig>

        SPI_SSIConfig(pSPIHandle->pSPIx, DISABLE);
    }


}
 8000ea6:	e00d      	b.n	8000ec4 <SPI_Init+0x1c4>
        pSPIHandle->pSPIx->CR1 &= ~(1 << SPI_CR1_SSM);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000eb6:	601a      	str	r2, [r3, #0]
        SPI_SSIConfig(pSPIHandle->pSPIx, DISABLE);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f8ad 	bl	800101e <SPI_SSIConfig>
}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <SPI_SendData>:
    }

    return FLAG_RESET;
}

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *source, uint32_t size) {
 8000ecc:	b480      	push	{r7}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
    uint16_t is_16 = (pSPIx->CR2 >> SPI_CR2_DS & 0xF) == 0xF;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	2b0f      	cmp	r3, #15
 8000ee4:	bf0c      	ite	eq
 8000ee6:	2301      	moveq	r3, #1
 8000ee8:	2300      	movne	r3, #0
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	82bb      	strh	r3, [r7, #20]

    // Alternative: source++
    uint8_t index = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	75fb      	strb	r3, [r7, #23]

    while (size > 0) {
 8000ef2:	e031      	b.n	8000f58 <SPI_SendData+0x8c>
        // Whait while TX buffer is not empty

        // Alternative: (pSPIx->SR >> SPI_SR_TXE & 0x1) == 0
        while ((pSPIx->SR & (0x1 << SPI_SR_TXE)) == 0)
 8000ef4:	bf00      	nop
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0f9      	beq.n	8000ef6 <SPI_SendData+0x2a>
            ;

        // Place a single or two bytes in the data register
        if (is_16) {
 8000f02:	8abb      	ldrh	r3, [r7, #20]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d01a      	beq.n	8000f3e <SPI_SendData+0x72>
            uint16_t low = *(source + index++);
 8000f08:	7dfb      	ldrb	r3, [r7, #23]
 8000f0a:	1c5a      	adds	r2, r3, #1
 8000f0c:	75fa      	strb	r2, [r7, #23]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	4413      	add	r3, r2
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	827b      	strh	r3, [r7, #18]
            uint16_t high = *(source + index++);
 8000f18:	7dfb      	ldrb	r3, [r7, #23]
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	75fa      	strb	r2, [r7, #23]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4413      	add	r3, r2
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	823b      	strh	r3, [r7, #16]

            // Alternative *((uint16_t*)source + index++)
            pSPIx->DR = high << 8 | low;
 8000f28:	8a3b      	ldrh	r3, [r7, #16]
 8000f2a:	021a      	lsls	r2, r3, #8
 8000f2c:	8a7b      	ldrh	r3, [r7, #18]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	461a      	mov	r2, r3
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	60da      	str	r2, [r3, #12]
            size -= 2;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	e00c      	b.n	8000f58 <SPI_SendData+0x8c>
        } else {
            *((volatile uint8_t*) &pSPIx->DR) = *(source + index++);
 8000f3e:	7dfb      	ldrb	r3, [r7, #23]
 8000f40:	1c5a      	adds	r2, r3, #1
 8000f42:	75fa      	strb	r2, [r7, #23]
 8000f44:	461a      	mov	r2, r3
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	441a      	add	r2, r3
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	330c      	adds	r3, #12
 8000f4e:	7812      	ldrb	r2, [r2, #0]
 8000f50:	701a      	strb	r2, [r3, #0]
            size--;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3b01      	subs	r3, #1
 8000f56:	607b      	str	r3, [r7, #4]
    while (size > 0) {
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1ca      	bne.n	8000ef4 <SPI_SendData+0x28>
        }
    }
}
 8000f5e:	bf00      	nop
 8000f60:	bf00      	nop
 8000f62:	371c      	adds	r7, #28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <SPI_ReceiveData>:

void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *destination, uint32_t size) {
 8000f6c:	b480      	push	{r7}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
    uint16_t is_16 = (pSPIx->CR2 >> SPI_CR2_DS & 0xF) == 0xF;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	2b0f      	cmp	r3, #15
 8000f84:	bf0c      	ite	eq
 8000f86:	2301      	moveq	r3, #1
 8000f88:	2300      	movne	r3, #0
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	82fb      	strh	r3, [r7, #22]

    while (size > 0) {
 8000f8e:	e020      	b.n	8000fd2 <SPI_ReceiveData+0x66>
        // Wait for buffer to fill
        while((pSPIx->SR & (0x01 << SPI_SR_RXNE)) == 0);
 8000f90:	bf00      	nop
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d0f9      	beq.n	8000f92 <SPI_ReceiveData+0x26>

        if (is_16) {
 8000f9e:	8afb      	ldrh	r3, [r7, #22]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d00b      	beq.n	8000fbc <SPI_ReceiveData+0x50>
            *((uint16_t*) destination) = (uint16_t) pSPIx->DR;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	801a      	strh	r2, [r3, #0]
            (uint16_t*) destination++;
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	60bb      	str	r3, [r7, #8]
            size -= 2;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b02      	subs	r3, #2
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	e00a      	b.n	8000fd2 <SPI_ReceiveData+0x66>
        } else {
            *destination = (uint8_t) pSPIx->DR;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	701a      	strb	r2, [r3, #0]
            destination++;
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	60bb      	str	r3, [r7, #8]
            size--;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	607b      	str	r3, [r7, #4]
    while (size > 0) {
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1db      	bne.n	8000f90 <SPI_ReceiveData+0x24>
        }
    }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	371c      	adds	r7, #28
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <SPI_Enable>:

void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t isEnable) {}
void SPI_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority) {}
void SPI_IRQHandle(SPI_Handle_t *pHandle) {}

void SPI_Enable(SPI_RegDef_t *pSPIx, uint8_t isEnable) {
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	70fb      	strb	r3, [r7, #3]
    // SSM == 0, SPE == 1 => NSS LOW when SPE == 1
    // SSM == 0, SPE == 0 => NSS high when SPE 0
    // If SSOE is set to 1

    if (isEnable == ENABLE) {
 8000ff2:	78fb      	ldrb	r3, [r7, #3]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d106      	bne.n	8001006 <SPI_Enable+0x20>
        pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	601a      	str	r2, [r3, #0]
    } else {
        pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
    }
}
 8001004:	e005      	b.n	8001012 <SPI_Enable+0x2c>
        pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	601a      	str	r2, [r3, #0]
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <SPI_SSIConfig>:

void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t isEnable) {
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	460b      	mov	r3, r1
 8001028:	70fb      	strb	r3, [r7, #3]
    if (isEnable == ENABLE) {
 800102a:	78fb      	ldrb	r3, [r7, #3]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d106      	bne.n	800103e <SPI_SSIConfig+0x20>
        pSPIx->CR1 |= (1 << SPI_CR1_SSI);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	601a      	str	r2, [r3, #0]
    } else {
        pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
    }
}
 800103c:	e005      	b.n	800104a <SPI_SSIConfig+0x2c>
        pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	601a      	str	r2, [r3, #0]
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <SPI_SSOEConfig>:

// SS output enable
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t isEnable) {
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	460b      	mov	r3, r1
 8001060:	70fb      	strb	r3, [r7, #3]
    if (isEnable == ENABLE) {
 8001062:	78fb      	ldrb	r3, [r7, #3]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d106      	bne.n	8001076 <SPI_SSOEConfig+0x20>
        // SS output enabled, cannot work in multi master mode
        pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f043 0204 	orr.w	r2, r3, #4
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	605a      	str	r2, [r3, #4]
    } else {
        pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
    }
}
 8001074:	e005      	b.n	8001082 <SPI_SSOEConfig+0x2c>
        pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f023 0204 	bic.w	r2, r3, #4
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	605a      	str	r2, [r3, #4]
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <__libc_init_array>:
 8001090:	b570      	push	{r4, r5, r6, lr}
 8001092:	4d0d      	ldr	r5, [pc, #52]	@ (80010c8 <__libc_init_array+0x38>)
 8001094:	4c0d      	ldr	r4, [pc, #52]	@ (80010cc <__libc_init_array+0x3c>)
 8001096:	1b64      	subs	r4, r4, r5
 8001098:	10a4      	asrs	r4, r4, #2
 800109a:	2600      	movs	r6, #0
 800109c:	42a6      	cmp	r6, r4
 800109e:	d109      	bne.n	80010b4 <__libc_init_array+0x24>
 80010a0:	4d0b      	ldr	r5, [pc, #44]	@ (80010d0 <__libc_init_array+0x40>)
 80010a2:	4c0c      	ldr	r4, [pc, #48]	@ (80010d4 <__libc_init_array+0x44>)
 80010a4:	f000 f818 	bl	80010d8 <_init>
 80010a8:	1b64      	subs	r4, r4, r5
 80010aa:	10a4      	asrs	r4, r4, #2
 80010ac:	2600      	movs	r6, #0
 80010ae:	42a6      	cmp	r6, r4
 80010b0:	d105      	bne.n	80010be <__libc_init_array+0x2e>
 80010b2:	bd70      	pop	{r4, r5, r6, pc}
 80010b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80010b8:	4798      	blx	r3
 80010ba:	3601      	adds	r6, #1
 80010bc:	e7ee      	b.n	800109c <__libc_init_array+0xc>
 80010be:	f855 3b04 	ldr.w	r3, [r5], #4
 80010c2:	4798      	blx	r3
 80010c4:	3601      	adds	r6, #1
 80010c6:	e7f2      	b.n	80010ae <__libc_init_array+0x1e>
 80010c8:	08001108 	.word	0x08001108
 80010cc:	08001108 	.word	0x08001108
 80010d0:	08001108 	.word	0x08001108
 80010d4:	0800110c 	.word	0x0800110c

080010d8 <_init>:
 80010d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010da:	bf00      	nop
 80010dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010de:	bc08      	pop	{r3}
 80010e0:	469e      	mov	lr, r3
 80010e2:	4770      	bx	lr

080010e4 <_fini>:
 80010e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010e6:	bf00      	nop
 80010e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010ea:	bc08      	pop	{r3}
 80010ec:	469e      	mov	lr, r3
 80010ee:	4770      	bx	lr
