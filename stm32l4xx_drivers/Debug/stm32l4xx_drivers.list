
stm32l4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000360  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004e4  080004ec  000014ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004e4  080004e4  000014ec  2**0
                  CONTENTS
  4 .ARM          00000000  080004e4  080004e4  000014ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004e4  080004ec  000014ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004e4  080004e4  000014e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004e8  080004e8  000014e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000014ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  000014ec  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   000009ed  00000000  00000000  0000151c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002b5  00000000  00000000  00001f09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00000237  00000000  00000000  000021be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000c0  00000000  00000000  000023f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000009c  00000000  00000000  000024b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000015fa  00000000  00000000  00002554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000cf4  00000000  00000000  00003b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000522c  00000000  00000000  00004842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00009a6e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000014c  00000000  00000000  00009ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004c  00000000  00000000  00009c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000000 	.word	0x20000000
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080004cc 	.word	0x080004cc

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000004 	.word	0x20000004
 80001c0:	080004cc 	.word	0x080004cc

080001c4 <led_push_pull>:
// XXX why was this generated?
//#if !defined(__SOFT_FP__) && defined(__ARM_FP)
//  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
//#endif

void led_push_pull() {
 80001c4:	b500      	push	{lr}
 80001c6:	b085      	sub	sp, #20
	// Setup GPIO
	GPIO_Handle_t gpio_handle = {
 80001c8:	2300      	movs	r3, #0
 80001ca:	9301      	str	r3, [sp, #4]
 80001cc:	9302      	str	r3, [sp, #8]
 80001ce:	9303      	str	r3, [sp, #12]
 80001d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001d4:	9001      	str	r0, [sp, #4]
 80001d6:	2305      	movs	r3, #5
 80001d8:	f88d 3008 	strb.w	r3, [sp, #8]
 80001dc:	2101      	movs	r1, #1
 80001de:	f88d 1009 	strb.w	r1, [sp, #9]
 80001e2:	2302      	movs	r3, #2
 80001e4:	f88d 300a 	strb.w	r3, [sp, #10]
			.GPIO_PinOPType = GPIO_OP_TYPE_PP,
		}
	};

	// Enable clock for port A
	GPIO_PCLK(GPIOA, ENABLE);
 80001e8:	f000 f840 	bl	800026c <GPIO_PCLK>

	GPIO_Init(&gpio_handle);
 80001ec:	a801      	add	r0, sp, #4
 80001ee:	f000 f8e1 	bl	80003b4 <GPIO_Init>
 80001f2:	e003      	b.n	80001fc <led_push_pull+0x38>
	while (1) {
		// Write to GPIO
		GPIO_TogglePin(GPIOA, gpio_handle.GPIO_PinConfig.GPIO_PinNumber);

		// Locking delay
		for(uint32_t i=0;i<500000;i++);
 80001f4:	3301      	adds	r3, #1
 80001f6:	4a05      	ldr	r2, [pc, #20]	@ (800020c <led_push_pull+0x48>)
 80001f8:	4293      	cmp	r3, r2
 80001fa:	d9fb      	bls.n	80001f4 <led_push_pull+0x30>
		GPIO_TogglePin(GPIOA, gpio_handle.GPIO_PinConfig.GPIO_PinNumber);
 80001fc:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8000200:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000204:	f000 f937 	bl	8000476 <GPIO_TogglePin>
		for(uint32_t i=0;i<500000;i++);
 8000208:	2300      	movs	r3, #0
 800020a:	e7f4      	b.n	80001f6 <led_push_pull+0x32>
 800020c:	0007a11f 	.word	0x0007a11f

08000210 <main>:
}



int main(void)
{
 8000210:	b508      	push	{r3, lr}
	led_push_pull();
 8000212:	f7ff ffd7 	bl	80001c4 <led_push_pull>
	...

08000218 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000218:	480d      	ldr	r0, [pc, #52]	@ (8000250 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800021a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800021c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000220:	480c      	ldr	r0, [pc, #48]	@ (8000254 <LoopForever+0x6>)
  ldr r1, =_edata
 8000222:	490d      	ldr	r1, [pc, #52]	@ (8000258 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000224:	4a0d      	ldr	r2, [pc, #52]	@ (800025c <LoopForever+0xe>)
  movs r3, #0
 8000226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000228:	e002      	b.n	8000230 <LoopCopyDataInit>

0800022a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800022a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800022c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800022e:	3304      	adds	r3, #4

08000230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000234:	d3f9      	bcc.n	800022a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000236:	4a0a      	ldr	r2, [pc, #40]	@ (8000260 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000238:	4c0a      	ldr	r4, [pc, #40]	@ (8000264 <LoopForever+0x16>)
  movs r3, #0
 800023a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800023c:	e001      	b.n	8000242 <LoopFillZerobss>

0800023e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800023e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000240:	3204      	adds	r2, #4

08000242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000244:	d3fb      	bcc.n	800023e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000246:	f000 f91d 	bl	8000484 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800024a:	f7ff ffe1 	bl	8000210 <main>

0800024e <LoopForever>:

LoopForever:
  b LoopForever
 800024e:	e7fe      	b.n	800024e <LoopForever>
  ldr   r0, =_estack
 8000250:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000258:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800025c:	080004ec 	.word	0x080004ec
  ldr r2, =_sbss
 8000260:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000264:	2000001c 	.word	0x2000001c

08000268 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000268:	e7fe      	b.n	8000268 <ADC1_2_IRQHandler>
	...

0800026c <GPIO_PCLK>:
#include "stm32l476xx_gpio_driver.h"

void GPIO_PCLK(GPIO_RegDef_t *pGPIOx, uint8_t isEnable) {
	if (isEnable == ENABLE) {
 800026c:	2901      	cmp	r1, #1
 800026e:	d018      	beq.n	80002a2 <GPIO_PCLK+0x36>
			GPIOG_PCLK_EN();
		} else if (pGPIOx == GPIOH) {
			GPIOH_PCLK_EN();
		}
	} else {
		if (pGPIOx == GPIOA) {
 8000270:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8000274:	d05d      	beq.n	8000332 <GPIO_PCLK+0xc6>
			GPIOA_PCLK_DI();
		} else if (pGPIOx == GPIOB) {
 8000276:	4b47      	ldr	r3, [pc, #284]	@ (8000394 <GPIO_PCLK+0x128>)
 8000278:	4298      	cmp	r0, r3
 800027a:	d060      	beq.n	800033e <GPIO_PCLK+0xd2>
			GPIOB_PCLK_DI();
		} else if (pGPIOx == GPIOC) {
 800027c:	4b46      	ldr	r3, [pc, #280]	@ (8000398 <GPIO_PCLK+0x12c>)
 800027e:	4298      	cmp	r0, r3
 8000280:	d063      	beq.n	800034a <GPIO_PCLK+0xde>
			GPIOC_PCLK_DI();
		} else if (pGPIOx == GPIOD) {
 8000282:	4b46      	ldr	r3, [pc, #280]	@ (800039c <GPIO_PCLK+0x130>)
 8000284:	4298      	cmp	r0, r3
 8000286:	d066      	beq.n	8000356 <GPIO_PCLK+0xea>
			GPIOD_PCLK_DI();
		} else if (pGPIOx == GPIOE) {
 8000288:	4b45      	ldr	r3, [pc, #276]	@ (80003a0 <GPIO_PCLK+0x134>)
 800028a:	4298      	cmp	r0, r3
 800028c:	d069      	beq.n	8000362 <GPIO_PCLK+0xf6>
			GPIOE_PCLK_DI();
		} else if (pGPIOx == GPIOF) {
 800028e:	4b45      	ldr	r3, [pc, #276]	@ (80003a4 <GPIO_PCLK+0x138>)
 8000290:	4298      	cmp	r0, r3
 8000292:	d06c      	beq.n	800036e <GPIO_PCLK+0x102>
			GPIOF_PCLK_DI();
		} else if (pGPIOx == GPIOG) {
 8000294:	4b44      	ldr	r3, [pc, #272]	@ (80003a8 <GPIO_PCLK+0x13c>)
 8000296:	4298      	cmp	r0, r3
 8000298:	d06f      	beq.n	800037a <GPIO_PCLK+0x10e>
			GPIOG_PCLK_DI();
		} else if (pGPIOx == GPIOH) {
 800029a:	4b44      	ldr	r3, [pc, #272]	@ (80003ac <GPIO_PCLK+0x140>)
 800029c:	4298      	cmp	r0, r3
 800029e:	d072      	beq.n	8000386 <GPIO_PCLK+0x11a>
			GPIOH_PCLK_DI();
		}
	}
}
 80002a0:	4770      	bx	lr
		if (pGPIOx == GPIOA) {
 80002a2:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 80002a6:	d01a      	beq.n	80002de <GPIO_PCLK+0x72>
		} else if (pGPIOx == GPIOB) {
 80002a8:	4b3a      	ldr	r3, [pc, #232]	@ (8000394 <GPIO_PCLK+0x128>)
 80002aa:	4298      	cmp	r0, r3
 80002ac:	d01d      	beq.n	80002ea <GPIO_PCLK+0x7e>
		} else if (pGPIOx == GPIOC) {
 80002ae:	4b3a      	ldr	r3, [pc, #232]	@ (8000398 <GPIO_PCLK+0x12c>)
 80002b0:	4298      	cmp	r0, r3
 80002b2:	d020      	beq.n	80002f6 <GPIO_PCLK+0x8a>
		} else if (pGPIOx == GPIOD) {
 80002b4:	4b39      	ldr	r3, [pc, #228]	@ (800039c <GPIO_PCLK+0x130>)
 80002b6:	4298      	cmp	r0, r3
 80002b8:	d023      	beq.n	8000302 <GPIO_PCLK+0x96>
		} else if (pGPIOx == GPIOE) {
 80002ba:	4b39      	ldr	r3, [pc, #228]	@ (80003a0 <GPIO_PCLK+0x134>)
 80002bc:	4298      	cmp	r0, r3
 80002be:	d026      	beq.n	800030e <GPIO_PCLK+0xa2>
		} else if (pGPIOx == GPIOF) {
 80002c0:	4b38      	ldr	r3, [pc, #224]	@ (80003a4 <GPIO_PCLK+0x138>)
 80002c2:	4298      	cmp	r0, r3
 80002c4:	d029      	beq.n	800031a <GPIO_PCLK+0xae>
		} else if (pGPIOx == GPIOG) {
 80002c6:	4b38      	ldr	r3, [pc, #224]	@ (80003a8 <GPIO_PCLK+0x13c>)
 80002c8:	4298      	cmp	r0, r3
 80002ca:	d02c      	beq.n	8000326 <GPIO_PCLK+0xba>
		} else if (pGPIOx == GPIOH) {
 80002cc:	4b37      	ldr	r3, [pc, #220]	@ (80003ac <GPIO_PCLK+0x140>)
 80002ce:	4298      	cmp	r0, r3
 80002d0:	d1e6      	bne.n	80002a0 <GPIO_PCLK+0x34>
			GPIOH_PCLK_EN();
 80002d2:	4a37      	ldr	r2, [pc, #220]	@ (80003b0 <GPIO_PCLK+0x144>)
 80002d4:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80002d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002dc:	4770      	bx	lr
			GPIOA_PCLK_EN();
 80002de:	4a34      	ldr	r2, [pc, #208]	@ (80003b0 <GPIO_PCLK+0x144>)
 80002e0:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80002e2:	f043 0301 	orr.w	r3, r3, #1
 80002e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002e8:	4770      	bx	lr
			GPIOB_PCLK_EN();
 80002ea:	4a31      	ldr	r2, [pc, #196]	@ (80003b0 <GPIO_PCLK+0x144>)
 80002ec:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80002ee:	f043 0302 	orr.w	r3, r3, #2
 80002f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002f4:	4770      	bx	lr
			GPIOC_PCLK_EN();
 80002f6:	4a2e      	ldr	r2, [pc, #184]	@ (80003b0 <GPIO_PCLK+0x144>)
 80002f8:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80002fa:	f043 0304 	orr.w	r3, r3, #4
 80002fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000300:	4770      	bx	lr
			GPIOD_PCLK_EN();
 8000302:	4a2b      	ldr	r2, [pc, #172]	@ (80003b0 <GPIO_PCLK+0x144>)
 8000304:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8000306:	f043 0308 	orr.w	r3, r3, #8
 800030a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800030c:	4770      	bx	lr
			GPIOE_PCLK_EN();
 800030e:	4a28      	ldr	r2, [pc, #160]	@ (80003b0 <GPIO_PCLK+0x144>)
 8000310:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8000312:	f043 0310 	orr.w	r3, r3, #16
 8000316:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000318:	4770      	bx	lr
			GPIOF_PCLK_EN();
 800031a:	4a25      	ldr	r2, [pc, #148]	@ (80003b0 <GPIO_PCLK+0x144>)
 800031c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800031e:	f043 0320 	orr.w	r3, r3, #32
 8000322:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000324:	4770      	bx	lr
			GPIOG_PCLK_EN();
 8000326:	4a22      	ldr	r2, [pc, #136]	@ (80003b0 <GPIO_PCLK+0x144>)
 8000328:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800032a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800032e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000330:	4770      	bx	lr
			GPIOA_PCLK_DI();
 8000332:	4a1f      	ldr	r2, [pc, #124]	@ (80003b0 <GPIO_PCLK+0x144>)
 8000334:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8000336:	f023 0301 	bic.w	r3, r3, #1
 800033a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800033c:	4770      	bx	lr
			GPIOB_PCLK_DI();
 800033e:	4a1c      	ldr	r2, [pc, #112]	@ (80003b0 <GPIO_PCLK+0x144>)
 8000340:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8000342:	f023 0302 	bic.w	r3, r3, #2
 8000346:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000348:	4770      	bx	lr
			GPIOC_PCLK_DI();
 800034a:	4a19      	ldr	r2, [pc, #100]	@ (80003b0 <GPIO_PCLK+0x144>)
 800034c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800034e:	f023 0304 	bic.w	r3, r3, #4
 8000352:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000354:	4770      	bx	lr
			GPIOD_PCLK_DI();
 8000356:	4a16      	ldr	r2, [pc, #88]	@ (80003b0 <GPIO_PCLK+0x144>)
 8000358:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800035a:	f023 0308 	bic.w	r3, r3, #8
 800035e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000360:	4770      	bx	lr
			GPIOE_PCLK_DI();
 8000362:	4a13      	ldr	r2, [pc, #76]	@ (80003b0 <GPIO_PCLK+0x144>)
 8000364:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8000366:	f023 0310 	bic.w	r3, r3, #16
 800036a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800036c:	4770      	bx	lr
			GPIOF_PCLK_DI();
 800036e:	4a10      	ldr	r2, [pc, #64]	@ (80003b0 <GPIO_PCLK+0x144>)
 8000370:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8000372:	f023 0320 	bic.w	r3, r3, #32
 8000376:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000378:	4770      	bx	lr
			GPIOG_PCLK_DI();
 800037a:	4a0d      	ldr	r2, [pc, #52]	@ (80003b0 <GPIO_PCLK+0x144>)
 800037c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800037e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000382:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000384:	4770      	bx	lr
			GPIOH_PCLK_DI();
 8000386:	4a0a      	ldr	r2, [pc, #40]	@ (80003b0 <GPIO_PCLK+0x144>)
 8000388:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800038a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800038e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000390:	e786      	b.n	80002a0 <GPIO_PCLK+0x34>
 8000392:	bf00      	nop
 8000394:	48000400 	.word	0x48000400
 8000398:	48000800 	.word	0x48000800
 800039c:	48000c00 	.word	0x48000c00
 80003a0:	48001000 	.word	0x48001000
 80003a4:	48001400 	.word	0x48001400
 80003a8:	48001800 	.word	0x48001800
 80003ac:	48001c00 	.word	0x48001c00
 80003b0:	40021000 	.word	0x40021000

080003b4 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80003b4:	b430      	push	{r4, r5}
 80003b6:	b082      	sub	sp, #8
 80003b8:	4603      	mov	r3, r0
	// Configure mode
	GPIO_PinConfig_t pinConfig = pGPIOHandle->GPIO_PinConfig;
 80003ba:	1d02      	adds	r2, r0, #4
 80003bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003c0:	9000      	str	r0, [sp, #0]
 80003c2:	f8ad 1004 	strh.w	r1, [sp, #4]
	uint32_t mode = 0;

	// non IT
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80003c6:	795a      	ldrb	r2, [r3, #5]
 80003c8:	2a03      	cmp	r2, #3
 80003ca:	d80f      	bhi.n	80003ec <GPIO_Init+0x38>
		// Mode takes 2 bits, all go consecutively so we can do 2 * pin number
		mode = pinConfig.GPIO_PinMode << (2 * pinConfig.GPIO_PinNumber);
 80003cc:	f89d 1000 	ldrb.w	r1, [sp]
 80003d0:	0049      	lsls	r1, r1, #1
 80003d2:	408a      	lsls	r2, r1

		// Must clear before set!
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 80003d4:	681d      	ldr	r5, [r3, #0]
 80003d6:	6828      	ldr	r0, [r5, #0]
 80003d8:	2403      	movs	r4, #3
 80003da:	fa04 f101 	lsl.w	r1, r4, r1
 80003de:	ea20 0101 	bic.w	r1, r0, r1
 80003e2:	6029      	str	r1, [r5, #0]
		pGPIOHandle->pGPIOx->MODER |= mode;
 80003e4:	6818      	ldr	r0, [r3, #0]
 80003e6:	6801      	ldr	r1, [r0, #0]
 80003e8:	430a      	orrs	r2, r1
 80003ea:	6002      	str	r2, [r0, #0]
	} else {
		// TODO IT later
	}
	// Configure speed
	uint32_t speed = pinConfig.GPIO_PinSpeed << (2 * pinConfig.GPIO_PinNumber);
 80003ec:	f89d c002 	ldrb.w	ip, [sp, #2]
 80003f0:	f89d 2000 	ldrb.w	r2, [sp]
 80003f4:	0054      	lsls	r4, r2, #1
 80003f6:	fa0c fc04 	lsl.w	ip, ip, r4
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 80003fa:	681d      	ldr	r5, [r3, #0]
 80003fc:	68a8      	ldr	r0, [r5, #8]
 80003fe:	2103      	movs	r1, #3
 8000400:	40a1      	lsls	r1, r4
 8000402:	ea20 0001 	bic.w	r0, r0, r1
 8000406:	60a8      	str	r0, [r5, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= speed;
 8000408:	681d      	ldr	r5, [r3, #0]
 800040a:	68a8      	ldr	r0, [r5, #8]
 800040c:	ea40 000c 	orr.w	r0, r0, ip
 8000410:	60a8      	str	r0, [r5, #8]

	// Configure pull up/down
	uint32_t pull = pinConfig.GPIO_PinPuPdControl << (2 * pinConfig.GPIO_PinNumber);
 8000412:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8000416:	40a0      	lsls	r0, r4
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (pinConfig.GPIO_PinNumber * 2));
 8000418:	681d      	ldr	r5, [r3, #0]
 800041a:	68ec      	ldr	r4, [r5, #12]
 800041c:	ea24 0101 	bic.w	r1, r4, r1
 8000420:	60e9      	str	r1, [r5, #12]
	pGPIOHandle->pGPIOx->PUPDR |= pull;
 8000422:	681c      	ldr	r4, [r3, #0]
 8000424:	68e1      	ldr	r1, [r4, #12]
 8000426:	4301      	orrs	r1, r0
 8000428:	60e1      	str	r1, [r4, #12]

	// Configure otype, output type
	uint32_t o_type = pinConfig.GPIO_PinOPType << pinConfig.GPIO_PinNumber;
 800042a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800042e:	4090      	lsls	r0, r2
	pGPIOHandle->pGPIOx->OTYPER |= o_type;
 8000430:	681c      	ldr	r4, [r3, #0]
 8000432:	6861      	ldr	r1, [r4, #4]
 8000434:	4301      	orrs	r1, r0
 8000436:	6061      	str	r1, [r4, #4]

	// Configure alt function
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000438:	7959      	ldrb	r1, [r3, #5]
 800043a:	2902      	cmp	r1, #2
 800043c:	d002      	beq.n	8000444 <GPIO_Init+0x90>
		uint32_t offset = pinConfig.GPIO_PinNumber % 8;

		pGPIOHandle->pGPIOx->AFR[index] &= ~(0xF << (4 * offset));
		pGPIOHandle->pGPIOx->AFR[index] |= pinConfig.GPIO_PinAltFunMode << (4 * offset);
	}
}
 800043e:	b002      	add	sp, #8
 8000440:	bc30      	pop	{r4, r5}
 8000442:	4770      	bx	lr
		uint32_t index = pinConfig.GPIO_PinNumber / 8;
 8000444:	08d1      	lsrs	r1, r2, #3
		uint32_t offset = pinConfig.GPIO_PinNumber % 8;
 8000446:	f002 0207 	and.w	r2, r2, #7
		pGPIOHandle->pGPIOx->AFR[index] &= ~(0xF << (4 * offset));
 800044a:	681d      	ldr	r5, [r3, #0]
 800044c:	3108      	adds	r1, #8
 800044e:	f855 0021 	ldr.w	r0, [r5, r1, lsl #2]
 8000452:	0092      	lsls	r2, r2, #2
 8000454:	240f      	movs	r4, #15
 8000456:	4094      	lsls	r4, r2
 8000458:	ea20 0004 	bic.w	r0, r0, r4
 800045c:	f845 0021 	str.w	r0, [r5, r1, lsl #2]
		pGPIOHandle->pGPIOx->AFR[index] |= pinConfig.GPIO_PinAltFunMode << (4 * offset);
 8000460:	681c      	ldr	r4, [r3, #0]
 8000462:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 8000466:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800046a:	fa00 f202 	lsl.w	r2, r0, r2
 800046e:	4313      	orrs	r3, r2
 8000470:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
}
 8000474:	e7e3      	b.n	800043e <GPIO_Init+0x8a>

08000476 <GPIO_TogglePin>:
void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t value) {
	pGPIOx->ODR |= value;
}

void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber) {
	pGPIOx->ODR = pGPIOx->ODR ^ (1 << pinNumber);
 8000476:	6943      	ldr	r3, [r0, #20]
 8000478:	2201      	movs	r2, #1
 800047a:	408a      	lsls	r2, r1
 800047c:	4053      	eors	r3, r2
 800047e:	6143      	str	r3, [r0, #20]
}
 8000480:	4770      	bx	lr
	...

08000484 <__libc_init_array>:
 8000484:	b570      	push	{r4, r5, r6, lr}
 8000486:	4d0d      	ldr	r5, [pc, #52]	@ (80004bc <__libc_init_array+0x38>)
 8000488:	4c0d      	ldr	r4, [pc, #52]	@ (80004c0 <__libc_init_array+0x3c>)
 800048a:	1b64      	subs	r4, r4, r5
 800048c:	10a4      	asrs	r4, r4, #2
 800048e:	2600      	movs	r6, #0
 8000490:	42a6      	cmp	r6, r4
 8000492:	d109      	bne.n	80004a8 <__libc_init_array+0x24>
 8000494:	4d0b      	ldr	r5, [pc, #44]	@ (80004c4 <__libc_init_array+0x40>)
 8000496:	4c0c      	ldr	r4, [pc, #48]	@ (80004c8 <__libc_init_array+0x44>)
 8000498:	f000 f818 	bl	80004cc <_init>
 800049c:	1b64      	subs	r4, r4, r5
 800049e:	10a4      	asrs	r4, r4, #2
 80004a0:	2600      	movs	r6, #0
 80004a2:	42a6      	cmp	r6, r4
 80004a4:	d105      	bne.n	80004b2 <__libc_init_array+0x2e>
 80004a6:	bd70      	pop	{r4, r5, r6, pc}
 80004a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ac:	4798      	blx	r3
 80004ae:	3601      	adds	r6, #1
 80004b0:	e7ee      	b.n	8000490 <__libc_init_array+0xc>
 80004b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004b6:	4798      	blx	r3
 80004b8:	3601      	adds	r6, #1
 80004ba:	e7f2      	b.n	80004a2 <__libc_init_array+0x1e>
 80004bc:	080004e4 	.word	0x080004e4
 80004c0:	080004e4 	.word	0x080004e4
 80004c4:	080004e4 	.word	0x080004e4
 80004c8:	080004e8 	.word	0x080004e8

080004cc <_init>:
 80004cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ce:	bf00      	nop
 80004d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004d2:	bc08      	pop	{r3}
 80004d4:	469e      	mov	lr, r3
 80004d6:	4770      	bx	lr

080004d8 <_fini>:
 80004d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004da:	bf00      	nop
 80004dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004de:	bc08      	pop	{r3}
 80004e0:	469e      	mov	lr, r3
 80004e2:	4770      	bx	lr
